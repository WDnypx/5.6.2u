{"remainingRequest":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\product\\productList\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\product\\productList\\index.vue","mtime":1750726023752},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\babel.config.js","mtime":1679965410000},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\.babelrc","mtime":1679965410000},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1753254256661},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1753254258567},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1753254260598}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvciBmcm9tICJEOi9wYy96bS9cdTY2MDZcdTY2MEVcdTk2MTRcdTdGRDRcdTc5RDFcdTYyODBcdTY3MDlcdTk2NTBcdTUxNkNcdTUzRjgvXHU2RTkwXHU3ODAxL0NSTUVCLUJaIHY1LjYuMigyMDI1MDYzMCkvdGVtcGxhdGUvYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6L3BjL3ptL1x1NjYwNlx1NjYwRVx1OTYxNFx1N0ZENFx1NzlEMVx1NjI4MFx1NjcwOVx1OTY1MFx1NTE2Q1x1NTNGOC9cdTZFOTBcdTc4MDEvQ1JNRUItQlogdjUuNi4yKDIwMjUwNjMwKS90ZW1wbGF0ZS9hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIkQ6L3BjL3ptL1x1NjYwNlx1NjYwRVx1OTYxNFx1N0ZENFx1NzlEMVx1NjI4MFx1NjcwOVx1OTY1MFx1NTE2Q1x1NTNGOC9cdTZFOTBcdTc4MDEvQ1JNRUItQlogdjUuNi4yKDIwMjUwNjMwKS90ZW1wbGF0ZS9hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5wdXNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuaXRlcmF0b3IuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5kaWZmZXJlbmNlLnYyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0LmludGVyc2VjdGlvbi52Mi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5pcy1kaXNqb2ludC1mcm9tLnYyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0LmlzLXN1YnNldC1vZi52Mi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5pcy1zdXBlcnNldC1vZi52Mi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5zeW1tZXRyaWMtZGlmZmVyZW5jZS52Mi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC51bmlvbi52Mi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0IGV4cGFuZFJvdyBmcm9tICcuL3RhYmxlRXhwYW5kLnZ1ZSc7CmltcG9ydCBhdHRyaWJ1dGUgZnJvbSAnLi9hdHRyaWJ1dGUnOwppbXBvcnQgdG9FeGNlbCBmcm9tICcuLi8uLi8uLi91dGlscy9FeGNlbC5qcyc7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB0YW9CYW8gZnJvbSAnLi90YW9CYW8nOwppbXBvcnQgZ29vZHNEZXRhaWwgZnJvbSAnLi9jb21wb25lbnRzL2dvb2RzRGV0YWlsLnZ1ZSc7CmltcG9ydCBjb3Vwb25MaXN0IGZyb20gJ0AvY29tcG9uZW50cy9jb3Vwb25MaXN0JzsKaW1wb3J0IHsgZXhwb3J0UHJvZHVjdExpc3QsIGV4cG9ydFByb2R1Y3RFeHBvcnQgfSBmcm9tICdAL2FwaS9leHBvcnQnOwppbXBvcnQgc2V0dGluZ3MgZnJvbSAnQC9zZXR0aW5nJzsKaW1wb3J0IGdvb2RzSW1wb3J0IGZyb20gJy4vY29tcG9uZW50cy9nb29kc0ltcG9ydC52dWUnOwppbXBvcnQgYnJva2VyYWdlU2V0IGZyb20gJy4uL2NvbXBvbmVudHMvYnJva2VyYWdlU2V0LnZ1ZSc7CmltcG9ydCB2aXBQcmljZVNldCBmcm9tICcuLi9jb21wb25lbnRzL3ZpcFByaWNlU2V0LnZ1ZSc7CmltcG9ydCB7IGdldEdvb2RIZWFkZSwgZ2V0R29vZHMsIFBvc3Rnb29kc0lzU2hvdywgY2FzY2FkZXJMaXN0QXBpLAovLyDliIbnsbvliJfooagKcHJvZHVjdFNob3dBcGksIHByb2R1Y3RVbnNob3dBcGksIHN0b3JlUHJvZHVjdEFwaSwgYmF0Y2hTZXR0aW5nLCBwcm9kdWN0R2V0VGVtcGxhdGVBcGksIHByb2R1Y3RMYWJlbFVzZUxpc3RBcGksIHByb2R1Y3RCYXRjaERlbGV0ZSB9IGZyb20gJ0AvYXBpL3Byb2R1Y3QnOwppbXBvcnQgdXNlckxhYmVsIGZyb20gJ0AvY29tcG9uZW50cy9sYWJlbExpc3QnOwppbXBvcnQgc3RvcmVMYWJlbExpc3QgZnJvbSAnQC9jb21wb25lbnRzL3N0b3JlTGFiZWxMaXN0JzsKaW1wb3J0IGdvb2RzTGFiZWwgZnJvbSAnQC9jb21wb25lbnRzL2dvb2RzTGFiZWwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ3Byb2R1Y3RfcHJvZHVjdExpc3QnLAogIGNvbXBvbmVudHM6IHsKICAgIGV4cGFuZFJvdzogZXhwYW5kUm93LAogICAgYXR0cmlidXRlOiBhdHRyaWJ1dGUsCiAgICB0YW9CYW86IHRhb0JhbywKICAgIGdvb2RzRGV0YWlsOiBnb29kc0RldGFpbCwKICAgIHVzZXJMYWJlbDogdXNlckxhYmVsLAogICAgY291cG9uTGlzdDogY291cG9uTGlzdCwKICAgIGdvb2RzSW1wb3J0OiBnb29kc0ltcG9ydCwKICAgIGJyb2tlcmFnZVNldDogYnJva2VyYWdlU2V0LAogICAgdmlwUHJpY2VTZXQ6IHZpcFByaWNlU2V0LAogICAgc3RvcmVMYWJlbExpc3Q6IHN0b3JlTGFiZWxMaXN0LAogICAgZ29vZHNMYWJlbDogZ29vZHNMYWJlbAogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKCd1c2VyTGV2ZWwnLCBbJ2NhdGVnb3J5SWQnXSkpLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICByb3V0ZVByZTogc2V0dGluZ3Mucm91dGVQcmUsCiAgICAgIHBpY2tlck9wdGlvbnM6IHRoaXMuJHRpbWVPcHRpb25zLAogICAgICB0ZW1wbGF0ZTogZmFsc2UsCiAgICAgIG1vZGFsczogZmFsc2UsCiAgICAgIGltcG9ydFNob3c6IGZhbHNlLAogICAgICBiYXRjaE1vZGFsOiBmYWxzZSwKICAgICAgbGFiZWxTaG93OiBmYWxzZSwKICAgICAgYmF0Y2hUeXBlOiAxLAogICAgICAvLyDmibnph4/orr7nva7nsbvlnosKICAgICAgYmF0Y2hGb3JtRGF0YTogewogICAgICAgIGNhdGVfaWQ6IFtdLAogICAgICAgIGxvZ2lzdGljczogW10sCiAgICAgICAgZnJlaWdodDogMiwKICAgICAgICBwb3N0YWdlOiAwLAogICAgICAgIHRlbXBfaWQ6IG51bGwsCiAgICAgICAgZ2l2ZV9pbnRlZ3JhbDogMCwKICAgICAgICBsYWJlbF9pZDogW10sCiAgICAgICAgY291cG9uX2lkczogW10sCiAgICAgICAgcmVjb21tZW5kOiBbXQogICAgICB9LAogICAgICBydWxlQmF0Y2g6IHt9LAogICAgICBjb3Vwb25OYW1lOiBbXSwKICAgICAgLy8g5LyY5oOg5Yi4CiAgICAgIGRhdGFMYWJlbDogW10sCiAgICAgIC8vIOagh+etvgogICAgICB0ZW1wbGF0ZUxpc3Q6IFtdLAogICAgICAvLyDov5DotLnmqKHniYgKICAgICAgZ3JpZDogewogICAgICAgIHhsOiA2LAogICAgICAgIGxnOiA4LAogICAgICAgIG1kOiAxMiwKICAgICAgICBzbTogMjQsCiAgICAgICAgeHM6IDI0CiAgICAgIH0sCiAgICAgIGFydEZyb206IHsKICAgICAgICBwYWdlOiAxLAogICAgICAgIGxpbWl0OiAxNSwKICAgICAgICBjYXRlX2lkOiAnJywKICAgICAgICB0eXBlOiAnMScsCiAgICAgICAgc3RvcmVfbmFtZTogJycsCiAgICAgICAgc3BlY190eXBlOiAnJywKICAgICAgICBsb2dpc3RpY3M6ICcnLAogICAgICAgIHZpcF9wcm9kdWN0OiAnJywKICAgICAgICBpc19naWZ0OiAnJywKICAgICAgICBzYWxlc19zOiBbJycsICcnXSwKICAgICAgICBzdG9ja19zOiBbJycsICcnXSwKICAgICAgICBwcmljZV9zOiBbJycsICcnXSwKICAgICAgICBzdG9yZV9sYWJlbF9pZDogW10sCiAgICAgICAgdGltZTogJycsCiAgICAgICAgdmlydHVhbF90eXBlOiAnJwogICAgICB9LAogICAgICBsaXN0OiBbXSwKICAgICAgdGFibGVMaXN0OiBbXSwKICAgICAgaGVhZGVOdW06IFtdLAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZGF0YTogW10sCiAgICAgIHRvdGFsOiAwLAogICAgICBhdHRyVGVtcGxhdGU6IGZhbHNlLAogICAgICBpZHM6IFtdLAogICAgICBnb29kc0lkOiAnJywKICAgICAgaXNQcm9kdWN0Qm94OiBmYWxzZSwKICAgICAgdHJlZVNlbGVjdDogW10sCiAgICAgIG11bHRpcGxlU2VsZWN0aW9uOiBbXSwKICAgICAgc2hvd0Jyb2tlcmFnZTogZmFsc2UsCiAgICAgIHNob3dWaXBQcmljZTogZmFsc2UsCiAgICAgIHN0b3JlTGFiZWxTaG93OiBmYWxzZSwKICAgICAgdGFnU2hvdzogZmFsc2UsCiAgICAgIHByb2R1Y3RJZDogMCwKICAgICAgc3RvcmVMYWJlbExpc3Q6IFtdLAogICAgICBnb29kc0xhYmVsTGlzdDogW10sCiAgICAgIHRpbWVWYWw6IFtdLAogICAgICBjb2xsYXBzZTogZmFsc2UKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgJHJvdXRlOiBmdW5jdGlvbiAkcm91dGUoKSB7CiAgICAgIGlmICh0aGlzLiRyb3V0ZS5mdWxsUGF0aCA9PT0gdGhpcy4kcm91dGVQcm9TdHIgKyAnL3Byb2R1Y3QvcHJvZHVjdF9saXN0P3R5cGU9NScpIHsKICAgICAgICB0aGlzLmdldFBhdGgoKTsKICAgICAgfQogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHt9LAogIGFjdGl2YXRlZDogZnVuY3Rpb24gYWN0aXZhdGVkKCkgewogICAgdGhpcy5nb29kSGVhZGUoKTsKICAgIHRoaXMuZ29vZHNDYXRlZ29yeSgpOwogICAgdGhpcy5nZXRMYWJlbExpc3QoKTsKICAgIGlmICh0aGlzLiRyb3V0ZS5mdWxsUGF0aCA9PT0gdGhpcy4kcm91dGVQcm9TdHIgKyAnL3Byb2R1Y3QvcHJvZHVjdF9saXN0P3R5cGU9NScpIHsKICAgICAgdGhpcy5nZXRQYXRoKCk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmdldERhdGFMaXN0KCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDlhbfkvZPml6XmnJ8KICAgIG9uY2hhbmdlVGltZTogZnVuY3Rpb24gb25jaGFuZ2VUaW1lKGUpIHsKICAgICAgdGhpcy50aW1lVmFsID0gZTsKICAgICAgdGhpcy5hcnRGcm9tLnRpbWUgPSB0aGlzLnRpbWVWYWwgPyB0aGlzLnRpbWVWYWwuam9pbignLScpIDogJyc7CiAgICAgIHRoaXMuYXJ0RnJvbS5wYWdlID0gMTsKICAgICAgdGhpcy5nZXREYXRhTGlzdCgpOwogICAgfSwKICAgIC8vIOagh+etvuW8ueeql+WFs+mXrQogICAgc3RvcmVMYWJlbENsb3NlOiBmdW5jdGlvbiBzdG9yZUxhYmVsQ2xvc2UoKSB7CiAgICAgIHRoaXMuc3RvcmVMYWJlbFNob3cgPSBmYWxzZTsKICAgIH0sCiAgICBnZXRMYWJlbExpc3Q6IGZ1bmN0aW9uIGdldExhYmVsTGlzdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcHJvZHVjdExhYmVsVXNlTGlzdEFwaSgpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHJlcy5kYXRhLm1hcChmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgIGlmIChlbC5saXN0ICYmIGVsLmxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgIGVsLmxpc3QubWFwKGZ1bmN0aW9uIChsYWJlbCkgewogICAgICAgICAgICAgIGxhYmVsLmFjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBfdGhpcy5nb29kc0xhYmVsTGlzdCA9IHJlcy5kYXRhOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIG9wZW5TdG9yZUxhYmVsOiBmdW5jdGlvbiBvcGVuU3RvcmVMYWJlbChyb3cpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMuc3RvcmVMYWJlbFNob3cgPSB0cnVlOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzMi4kcmVmcy5zdG9yZUxhYmVsLnN0b3JlTGFiZWwoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczIuc3RvcmVMYWJlbExpc3QpKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGNsb3NlU3RvcmVMYWJlbDogZnVuY3Rpb24gY2xvc2VTdG9yZUxhYmVsKGxhYmVsKSB7CiAgICAgIHZhciBpbmRleCA9IHRoaXMuc3RvcmVMYWJlbExpc3QuaW5kZXhPZih0aGlzLnN0b3JlTGFiZWxMaXN0LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLmlkID09IGxhYmVsLmlkOwogICAgICB9KVswXSk7CiAgICAgIHRoaXMuc3RvcmVMYWJlbExpc3Quc3BsaWNlKGluZGV4LCAxKTsKICAgICAgdGhpcy5nZXRMYWJlbElkKHRoaXMuc3RvcmVMYWJlbExpc3QpOwogICAgfSwKICAgIGFjdGl2ZVN0b3JlRGF0YTogZnVuY3Rpb24gYWN0aXZlU3RvcmVEYXRhKHN0b3JlRGF0YUxhYmVsKSB7CiAgICAgIHRoaXMuc3RvcmVMYWJlbFNob3cgPSBmYWxzZTsKICAgICAgdGhpcy5zdG9yZUxhYmVsTGlzdCA9IHN0b3JlRGF0YUxhYmVsOwogICAgICB0aGlzLmdldExhYmVsSWQoc3RvcmVEYXRhTGFiZWwpOwogICAgfSwKICAgIGdldExhYmVsSWQ6IGZ1bmN0aW9uIGdldExhYmVsSWQoc3RvcmVEYXRhTGFiZWwpIHsKICAgICAgdmFyIHN0b3JlQWN0aXZlSWRzID0gW107CiAgICAgIHN0b3JlRGF0YUxhYmVsLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBzdG9yZUFjdGl2ZUlkcy5wdXNoKGl0ZW0uaWQpOwogICAgICB9KTsKICAgICAgdGhpcy5hcnRGcm9tLnN0b3JlX2xhYmVsX2lkID0gc3RvcmVBY3RpdmVJZHM7CiAgICAgIHRoaXMuYXJ0RnJvbS5wYWdlID0gMTsKICAgICAgdGhpcy5nZXREYXRhTGlzdCgpOwogICAgfSwKICAgIGFjdGl2aXR5RGV0YWlsOiBmdW5jdGlvbiBhY3Rpdml0eURldGFpbChyb3csIHR5cGUpIHsKICAgICAgdmFyIG5hbWUgPSAnJzsKICAgICAgaWYgKHR5cGUgPT09IDApIHsKICAgICAgICBuYW1lID0gJ21hcmtldGluZ19zdG9yZUJhcmdhaW4nOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDEpIHsKICAgICAgICBuYW1lID0gJ21hcmtldGluZ19jb21iaW5hbGlzdCc7CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMikgewogICAgICAgIG5hbWUgPSAnbWFya2V0aW5nX3N0b3JlU2Vja2lsbCc7CiAgICAgIH0KICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBwcm9kdWN0X2lkOiByb3cuaWQKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIG9wZW5Nb2RhbDogZnVuY3Rpb24gb3Blbk1vZGFsKHJvdywgdHlwZSkgewogICAgICB0aGlzLnByb2R1Y3RJZCA9IHJvdy5pZDsKICAgICAgdGhpcy4kcmVmc1t0eXBlXS52aXNpYmxlID0gdHJ1ZTsKICAgIH0sCiAgICBiYXRjaFN1YjogZnVuY3Rpb24gYmF0Y2hTdWIoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB2YXIgZGF0YSA9IHRoaXMuYmF0Y2hGb3JtRGF0YTsKICAgICAgZGF0YS5pZHMgPSB0aGlzLmlkczsKICAgICAgZGF0YS50eXBlID0gdGhpcy5iYXRjaFR5cGU7CiAgICAgIHZhciBhY3RpdmVJZHMgPSBbXTsKICAgICAgdGhpcy5kYXRhTGFiZWwuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGFjdGl2ZUlkcy5wdXNoKGl0ZW0uaWQpOwogICAgICB9KTsKICAgICAgZGF0YS5sYWJlbF9pZCA9IGFjdGl2ZUlkczsKICAgICAgaWYgKHRoaXMuYmF0Y2hUeXBlID09IDIgJiYgIXRoaXMuYmF0Y2hGb3JtRGF0YS5sb2dpc3RpY3MubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup54mp5rWB5pa55byPJyk7CiAgICAgIH0KICAgICAgYmF0Y2hTZXR0aW5nKGRhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIF90aGlzMy5nZXREYXRhTGlzdCgpOwogICAgICAgIF90aGlzMy5jbGVhckJhdGNoRGF0YShmYWxzZSk7CiAgICAgICAgX3RoaXMzLmlkcyA9IFtdOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgX3RoaXMzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICB9KTsKICAgIH0sCiAgICBjbGVhckJhdGNoRGF0YTogZnVuY3Rpb24gY2xlYXJCYXRjaERhdGEoc3RhdHVzKSB7CiAgICAgIGlmICghc3RhdHVzKSB7CiAgICAgICAgdGhpcy5iYXRjaEZvcm1EYXRhID0gewogICAgICAgICAgY2F0ZV9pZDogW10sCiAgICAgICAgICBsb2dpc3RpY3M6IFtdLAogICAgICAgICAgZnJlaWdodDogMCwKICAgICAgICAgIHBvc3RhZ2U6IG51bGwsCiAgICAgICAgICB0ZW1wX2lkOiBudWxsLAogICAgICAgICAgZ2l2ZV9pbnRlZ3JhbDogbnVsbCwKICAgICAgICAgIGxhYmVsX2lkOiBbXSwKICAgICAgICAgIGNvdXBvbl9pZHM6IFtdLAogICAgICAgICAgcmVjb21tZW5kOiBbXSwKICAgICAgICAgIGlzX2dpZnQ6IG51bGwsCiAgICAgICAgICBsYWJlbF9saXN0OiBbXQogICAgICAgIH07CiAgICAgICAgdGhpcy5kYXRhTGFiZWwgPSBbXTsKICAgICAgfQogICAgICB0aGlzLmJhdGNoTW9kYWwgPSBmYWxzZTsKICAgICAgdGhpcy4kcmVmcy50YWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgfSwKICAgIC8vIOaJuemHj+iuvue9ruWVhuWTgQogICAgYmF0Y2hTZWxlY3Q6IGZ1bmN0aW9uIGJhdGNoU2VsZWN0KHR5cGUpIHsKICAgICAgY29uc29sZS5sb2codHlwZSwgJ3R5cGUnKTsKICAgICAgaWYgKCF0aGlzLmlkcy5sZW5ndGgpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+mAieaLqeimgeS/ruaUueeahOWVhuWTgScpOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDcpIHsKICAgICAgICB0aGlzLm9uRGlzbW91bnQoKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA4KSB7CiAgICAgICAgdGhpcy5vblNoZWx2ZXMoKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA5KSB7CiAgICAgICAgdGhpcy5iYXRjaFR5cGUgPSB0eXBlOwogICAgICAgIHRoaXMudGFnU2hvdyA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMTEpIHsKICAgICAgICB0aGlzLmJhdGNoR29vZHNTZXR0aW5nKCflhajpg6jnp7vliLDlm57mlLbnq5knLCAxKTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAxMikgewogICAgICAgIHRoaXMuYmF0Y2hHb29kc1NldHRpbmcoJ+aBouWkjemAieS4reWVhuWTgScsIDIpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuYmF0Y2hUeXBlID0gdHlwZTsKICAgICAgICB0aGlzLmJhdGNoTW9kYWwgPSB0cnVlOwogICAgICAgIHRoaXMucHJvZHVjdEdldFRlbXBsYXRlKCk7CiAgICAgIH0KICAgIH0sCiAgICBiYXRjaEdvb2RzU2V0dGluZzogZnVuY3Rpb24gYmF0Y2hHb29kc1NldHRpbmcodGl0LCB0eXBlKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICB2YXIgdXJsID0gdHlwZSA9PSAxID8gJ3Byb2R1Y3QvcHJvZHVjdC9iYXRjaF9kZWxldGUnIDogJ3Byb2R1Y3QvcHJvZHVjdC9iYXRjaF9yZWNvdmVyJzsKICAgICAgdmFyIGRlbGZyb21EYXRhID0gewogICAgICAgIHRpdGxlOiB0aXQsCiAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgaWRzOiB7CiAgICAgICAgICBpZHM6IHRoaXMuaWRzCiAgICAgICAgfSwKICAgICAgICB1bjogMQogICAgICB9OwogICAgICB0aGlzLiRtb2RhbFN1cmUoZGVsZnJvbURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzNC4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIF90aGlzNC5nb29kSGVhZGUoKTsKICAgICAgICBfdGhpczQuZ2V0RGF0YUxpc3QoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzNC4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgfSk7CiAgICB9LAogICAgZ29vZHNNb3ZlOiBmdW5jdGlvbiBnb29kc01vdmUodHlwZSkgewogICAgICBpZiAodHlwZSA9PT0gMSkgewogICAgICAgIHRoaXMub25JbXBvcnQoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm9uRXhwb3J0cygyKTsKICAgICAgfQogICAgfSwKICAgIGFjdGl2ZURhdGE6IGZ1bmN0aW9uIGFjdGl2ZURhdGEoZGF0YUxhYmVsKSB7CiAgICAgIHRoaXMubGFiZWxTaG93ID0gZmFsc2U7CiAgICAgIHRoaXMuZGF0YUxhYmVsID0gZGF0YUxhYmVsOwogICAgfSwKICAgIG5hbWVJZDogZnVuY3Rpb24gbmFtZUlkKGlkLCBuYW1lcykgewogICAgICB0aGlzLmJhdGNoRm9ybURhdGEuY291cG9uX2lkcyA9IGlkOwogICAgICB0aGlzLmNvdXBvbk5hbWUgPSB0aGlzLnVuaXF1ZShuYW1lcyk7CiAgICB9LAogICAgaGFuZGxlQ2xvc2U6IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKG5hbWUpIHsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5jb3Vwb25OYW1lLmluZGV4T2YobmFtZSk7CiAgICAgIHRoaXMuY291cG9uTmFtZS5zcGxpY2UoaW5kZXgsIDEpOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5jb3Vwb25faWRzLnNwbGljZShpbmRleCwgMSk7CiAgICB9LAogICAgLy/lr7nosaHmlbDnu4Tljrvph43vvJsKICAgIHVuaXF1ZTogZnVuY3Rpb24gdW5pcXVlKGFycikgewogICAgICB2YXIgcmVzID0gbmV3IE1hcCgpOwogICAgICByZXR1cm4gYXJyLmZpbHRlcihmdW5jdGlvbiAoYXJyKSB7CiAgICAgICAgcmV0dXJuICFyZXMuaGFzKGFyci5pZCkgJiYgcmVzLnNldChhcnIuaWQsIDEpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDojrflj5bov5DotLnmqKHmnb/vvJsKICAgIHByb2R1Y3RHZXRUZW1wbGF0ZTogZnVuY3Rpb24gcHJvZHVjdEdldFRlbXBsYXRlKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKICAgICAgcHJvZHVjdEdldFRlbXBsYXRlQXBpKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXM1LnRlbXBsYXRlTGlzdCA9IHJlcy5kYXRhOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDmoIfnrb7lvLnnqpflhbPpl60KICAgIGxhYmVsQ2xvc2U6IGZ1bmN0aW9uIGxhYmVsQ2xvc2UoKSB7CiAgICAgIHRoaXMubGFiZWxTaG93ID0gZmFsc2U7CiAgICAgIHRoaXMudGFnU2hvdyA9IGZhbHNlOwogICAgfSwKICAgIC8vIOmAieaLqeWVhuWTgeagh+etvgogICAgYWN0aXZlR29vZHNMYWJlbDogZnVuY3Rpb24gYWN0aXZlR29vZHNMYWJlbChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKGRhdGEsICdkYXRhJyk7CiAgICAgIHRoaXMudGFnU2hvdyA9IGZhbHNlOwogICAgICB0aGlzLmJhdGNoRm9ybURhdGEubGFiZWxfbGlzdCA9IEFycmF5LmZyb20obmV3IFNldChkYXRhKSk7CiAgICAgIHRoaXMuYmF0Y2hTdWIoKTsKICAgIH0sCiAgICBsb29rOiBmdW5jdGlvbiBsb29rKHJvdykgewogICAgICB0aGlzLmdvb2RzSWQgPSByb3cuaWQ7CiAgICAgIHRoaXMuaXNQcm9kdWN0Qm94ID0gdHJ1ZTsKICAgIH0sCiAgICAvLyDnianmtYHmlrnlvI8KICAgIGxvZ2lzdGljc0J0bjogZnVuY3Rpb24gbG9naXN0aWNzQnRuKGUpIHsKICAgICAgdGhpcy5iYXRjaEZvcm1EYXRhLmxvZ2lzdGljcyA9IGU7CiAgICB9LAogICAgLy8g5YWz6IGU55So5oi35qCH562+CiAgICBvcGVuTGFiZWw6IGZ1bmN0aW9uIG9wZW5MYWJlbCgpIHsKICAgICAgdGhpcy5sYWJlbFNob3cgPSB0cnVlOwogICAgICAvLyB0aGlzLiRyZWZzLnVzZXJMYWJlbC5zZXRMYWJlbChKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YUxhYmVsKSkpOwogICAgfSwKICAgIGNsb3NlTGFiZWw6IGZ1bmN0aW9uIGNsb3NlTGFiZWwobGFiZWwpIHsKICAgICAgdmFyIGluZGV4ID0gdGhpcy5kYXRhTGFiZWwuaW5kZXhPZih0aGlzLmRhdGFMYWJlbC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5pZCA9PSBsYWJlbC5pZDsKICAgICAgfSlbMF0pOwogICAgICB0aGlzLmRhdGFMYWJlbC5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSwKICAgIC8vIOa3u+WKoOS8mOaDoOWIuAogICAgYWRkQ291cG9uOiBmdW5jdGlvbiBhZGRDb3Vwb24oKSB7CiAgICAgIHRoaXMuJHJlZnMuY291cG9uVGVtcGxhdGVzLmlzVGVtcGxhdGUgPSB0cnVlOwogICAgICB0aGlzLiRyZWZzLmNvdXBvblRlbXBsYXRlcy50YWJsZUxpc3QoKTsKICAgIH0sCiAgICBnZXRQYXRoOiBmdW5jdGlvbiBnZXRQYXRoKCkgewogICAgICB0aGlzLmFydEZyb20ucGFnZSA9IDE7CiAgICAgIHRoaXMuYXJ0RnJvbS50eXBlID0gdGhpcy4kcm91dGUucXVlcnkudHlwZS50b1N0cmluZygpOwogICAgICB0aGlzLmdldERhdGFMaXN0KCk7CiAgICB9LAogICAgb25JbXBvcnQ6IGZ1bmN0aW9uIG9uSW1wb3J0KCkgewogICAgICB0aGlzLmltcG9ydFNob3cgPSB0cnVlOwogICAgfSwKICAgIC8vIOWvvOWHugogICAgb25FeHBvcnRzOiBmdW5jdGlvbiBvbkV4cG9ydHModHlwZSkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IoKS5tKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHRoLCBmaWxla2V5LCBkYXRhLCBmaWxlTmFtZSwgZXhjZWxEYXRhLCBpLCBsZWJEYXRhOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IoKS53KGZ1bmN0aW9uIChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQubikgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdGggPSBbXSwgZmlsZWtleSA9IFtdLCBkYXRhID0gW10sIGZpbGVOYW1lID0gJyc7CiAgICAgICAgICAgICAgZXhjZWxEYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShfdGhpczYuYXJ0RnJvbSkpOwogICAgICAgICAgICAgIGV4Y2VsRGF0YS5wYWdlID0gMTsKICAgICAgICAgICAgICBleGNlbERhdGEubGltaXQgPSA1MDsKICAgICAgICAgICAgICBleGNlbERhdGEuaWRzID0gX3RoaXM2LmlkczsKICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGlmICghKGkgPCBleGNlbERhdGEucGFnZSArIDEpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBfY29udGV4dC5uID0gMjsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXM2LmdldEV4Y2VsRGF0YShleGNlbERhdGEsIHR5cGUpOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgbGViRGF0YSA9IF9jb250ZXh0LnY7CiAgICAgICAgICAgICAgaWYgKCFmaWxlTmFtZSkgZmlsZU5hbWUgPSBsZWJEYXRhLmZpbGVuYW1lOwogICAgICAgICAgICAgIGlmICghZmlsZWtleS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGZpbGVrZXkgPSBsZWJEYXRhLmZpbGVLZXk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghdGgubGVuZ3RoKSB0aCA9IGxlYkRhdGEuaGVhZGVyOwogICAgICAgICAgICAgIGlmICghbGViRGF0YS5leHBvcnQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uID0gMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkYXRhID0gZGF0YS5jb25jYXQobGViRGF0YS5leHBvcnQpOwogICAgICAgICAgICAgIGV4Y2VsRGF0YS5wYWdlKys7CiAgICAgICAgICAgICAgX2NvbnRleHQubiA9IDQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfdGhpczYuJGV4cG9ydEV4Y2VsKHRoLCBmaWxla2V5LCBmaWxlTmFtZSwgZGF0YSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmEoMik7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgX2NvbnRleHQubiA9IDE7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYSgyKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0RXhjZWxEYXRhOiBmdW5jdGlvbiBnZXRFeGNlbERhdGEoZXhjZWxEYXRhLCB0eXBlKSB7CiAgICAgIHZhciBmdW4gPSB0eXBlID8gZXhwb3J0UHJvZHVjdEV4cG9ydCA6IGV4cG9ydFByb2R1Y3RMaXN0OwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bihleGNlbERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIGZyZWlnaHQ6IGZ1bmN0aW9uIGZyZWlnaHQoKSB7CiAgICAgIHRoaXMuJHJlZnMudGVtcGxhdGUuaXNUZW1wbGF0ZSA9IHRydWU7CiAgICB9LAogICAgLy8g5om56YeP5LiK5p62CiAgICBvblNoZWx2ZXM6IGZ1bmN0aW9uIG9uU2hlbHZlcygpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CiAgICAgIGlmICh0aGlzLmlkcy5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+mAieaLqeimgeS4iuaetueahOWVhuWTgScpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgaWRzOiB0aGlzLmlkcwogICAgICAgIH07CiAgICAgICAgcHJvZHVjdFNob3dBcGkoZGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczcuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgIF90aGlzNy5nb29kSGVhZGUoKTsKICAgICAgICAgIF90aGlzNy5nZXREYXRhTGlzdCgpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzNy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIC8vIOaJuemHj+S4i+aetgogICAgb25EaXNtb3VudDogZnVuY3Rpb24gb25EaXNtb3VudCgpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CiAgICAgIGlmICh0aGlzLmlkcy5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+mAieaLqeimgeS4i+aetueahOWVhuWTgScpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgaWRzOiB0aGlzLmlkcwogICAgICAgIH07CiAgICAgICAgcHJvZHVjdFVuc2hvd0FwaShkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzOC4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgX3RoaXM4LmFydEZyb20ucGFnZSA9IDE7CiAgICAgICAgICBfdGhpczguZ29vZEhlYWRlKCk7CiAgICAgICAgICBfdGhpczguZ2V0RGF0YUxpc3QoKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczguJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlhajpgIkKICAgIC8vIG9uU2VsZWN0VGFiIChzZWxlY3Rpb24pIHsKICAgIC8vICAgICBsZXQgZGF0YSA9IFtdCiAgICAvLyAgICAgc2VsZWN0aW9uLm1hcCgoaXRlbSkgPT4gewogICAgLy8gICAgICAgICBkYXRhLnB1c2goaXRlbS5pZCkKICAgIC8vICAgICB9KQogICAgLy8gICAgIHRoaXMuaWRzID0gZGF0YQogICAgLy8gfSwKICAgIGdldFJvd0tleTogZnVuY3Rpb24gZ2V0Um93S2V5KHJvdykgewogICAgICByZXR1cm4gcm93LmlkOwogICAgfSwKICAgIC8vICDpgInkuK3mn5DkuIDooYwKICAgIGhhbmRsZVNlbGVjdFJvdzogZnVuY3Rpb24gaGFuZGxlU2VsZWN0Um93KHNlbGVjdGlvbikgewogICAgICB2YXIgdW5pcXVlQXJyID0gW107CiAgICAgIHZhciBpZHMgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3Rpb24ubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgaXRlbSA9IHNlbGVjdGlvbltpXTsKICAgICAgICBpZiAoIWlkcy5pbmNsdWRlcyhpdGVtLmlkKSkgewogICAgICAgICAgdW5pcXVlQXJyLnB1c2goaXRlbSk7CiAgICAgICAgICBpZHMucHVzaChpdGVtLmlkKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5pZHMgPSBpZHM7CiAgICAgIHRoaXMubXVsdGlwbGVTZWxlY3Rpb24gPSB1bmlxdWVBcnI7CiAgICB9LAogICAgLy8g5re75Yqg5reY5a6d5ZWG5ZOB5oiQ5YqfCiAgICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkgewogICAgICB0aGlzLm1vZGFscyA9IGZhbHNlOwogICAgfSwKICAgIC8vIOWkjeWItua3mOWunQogICAgb25Db3B5OiBmdW5jdGlvbiBvbkNvcHkoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiB0aGlzLiRyb3V0ZVByb1N0ciArICcvcHJvZHVjdC9hZGRfcHJvZHVjdCcsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIHR5cGU6IC0xCiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gdGhpcy5tb2RhbHMgPSB0cnVlCiAgICB9LAogICAgLy8gdGFi6YCJ5oupCiAgICBvbkNsaWNrVGFiOiBmdW5jdGlvbiBvbkNsaWNrVGFiKCkgewogICAgICB0aGlzLmFydEZyb20ucGFnZSA9IDE7CiAgICAgIHRoaXMubXVsdGlwbGVTZWxlY3Rpb24gPSBbXTsKICAgICAgdGhpcy4kcmVmcy50YWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICB0aGlzLmdldERhdGFMaXN0KCk7CiAgICB9LAogICAgLy8g5LiL5ouJ5qCRCiAgICBoYW5kbGVDaGVja0NoYW5nZTogZnVuY3Rpb24gaGFuZGxlQ2hlY2tDaGFuZ2UoZGF0YSkgewogICAgICB2YXIgdmFsdWUgPSAnJzsKICAgICAgdmFyIHRpdGxlID0gJyc7CiAgICAgIHRoaXMubGlzdCA9IFtdOwogICAgICB0aGlzLmFydEZyb20uY2F0ZV9pZCA9IDA7CiAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgICB2YWx1ZSArPSAiIi5jb25jYXQoaXRlbS5pZCwgIiwiKTsKICAgICAgICB0aXRsZSArPSAiIi5jb25jYXQoaXRlbS50aXRsZSwgIiwiKTsKICAgICAgfSk7CiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDEpOwogICAgICB0aXRsZSA9IHRpdGxlLnN1YnN0cmluZygwLCB0aXRsZS5sZW5ndGggLSAxKTsKICAgICAgdGhpcy5saXN0LnB1c2goewogICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICB0aXRsZTogdGl0bGUKICAgICAgfSk7CiAgICAgIHRoaXMuYXJ0RnJvbS5jYXRlX2lkID0gdmFsdWU7CiAgICAgIHRoaXMuZ2V0RGF0YUxpc3QoKTsKICAgIH0sCiAgICAvLyDojrflj5bllYblk4HooajljZXlpLTmlbDph48KICAgIGdvb2RIZWFkZTogZnVuY3Rpb24gZ29vZEhlYWRlKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKICAgICAgZ2V0R29vZEhlYWRlKHRoaXMuYXJ0RnJvbSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXM5LmhlYWRlTnVtID0gcmVzLmRhdGEubGlzdDsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzOS4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5ZWG5ZOB5YiG57G777ybCiAgICBnb29kc0NhdGVnb3J5OiBmdW5jdGlvbiBnb29kc0NhdGVnb3J5KCkgewogICAgICB2YXIgX3RoaXMwID0gdGhpczsKICAgICAgY2FzY2FkZXJMaXN0QXBpKDEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMC50cmVlU2VsZWN0ID0gcmVzLmRhdGE7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczAuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWVhuWTgeWIl+ihqO+8mwogICAgZ2V0RGF0YUxpc3Q6IGZ1bmN0aW9uIGdldERhdGFMaXN0KCkgewogICAgICB2YXIgX3RoaXMxID0gdGhpczsKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5hcnRGcm9tLmNhdGVfaWQgPSB0aGlzLmFydEZyb20uY2F0ZV9pZCB8fCAnJzsKICAgICAgZ2V0R29vZHModGhpcy5hcnRGcm9tKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhOwogICAgICAgIF90aGlzMS50YWJsZUxpc3QgPSBkYXRhLmxpc3Q7CiAgICAgICAgX3RoaXMxLnRvdGFsID0gcmVzLmRhdGEuY291bnQ7CiAgICAgICAgX3RoaXMxLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvL+ehruS/nWRvbeWKoOi9veWujOavlQogICAgICAgICAgLy8gdGhpcy5zZXRDaGVja2VkKCk7CiAgICAgICAgICBfdGhpczEuc2hvd1NlbGVjdERhdGEoKTsKICAgICAgICB9KTsKICAgICAgICBfdGhpczEubG9hZGluZyA9IGZhbHNlOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMxLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICBfdGhpczEuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIHNob3dTZWxlY3REYXRhOiBmdW5jdGlvbiBzaG93U2VsZWN0RGF0YSgpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwogICAgICBpZiAodGhpcy5tdWx0aXBsZVNlbGVjdGlvbi5sZW5ndGggPiAwKSB7CiAgICAgICAgLy8g5Yik5pat5piv5ZCm5a2Y5Zyo5Yu+6YCJ6L+H55qE5pWw5o2uCiAgICAgICAgdGhpcy50YWJsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgICAgICAvLyDojrflj5bmlbDmja7liJfooajmjqXlj6Por7fmsYLliLDnmoTmlbDmja4KICAgICAgICAgIF90aGlzMTAubXVsdGlwbGVTZWxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAvLyDli77pgInliLDnmoTmlbDmja4KICAgICAgICAgICAgaWYgKHJvdy5pZCA9PT0gaXRlbS5pZCkgewogICAgICAgICAgICAgIF90aGlzMTAuJHJlZnMudGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKGl0ZW0sIHRydWUpOyAvLyDoi6XmnInph43lkIjvvIzliJnlm57mmL7or6XmnaHmlbDmja4KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDooajmoLzmkJzntKIKICAgIHVzZXJTZWFyY2hzOiBmdW5jdGlvbiB1c2VyU2VhcmNocygpIHsKICAgICAgdGhpcy5hcnRGcm9tLnBhZ2UgPSAxOwogICAgICB0aGlzLmdvb2RIZWFkZSgpOwogICAgICB0aGlzLmdldERhdGFMaXN0KCk7CiAgICB9LAogICAgLy8g5LiK5LiL5p62CiAgICBjaGFuZ2VTd2l0Y2g6IGZ1bmN0aW9uIGNoYW5nZVN3aXRjaChyb3cpIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwogICAgICBQb3N0Z29vZHNJc1Nob3cocm93LmlkLCByb3cuaXNfc2hvdykudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMxMS4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIF90aGlzMTEuZ29vZEhlYWRlKCk7CiAgICAgICAgX3RoaXMxMS5nZXREYXRhTGlzdCgpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgcm93LmlzX3Nob3cgPSAhcm93LmlzX3Nob3cgPyAxIDogMDsKICAgICAgICBfdGhpczExLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDmlbDmja7lr7zlh7rvvJsKICAgIGV4cG9ydERhdGE6IGZ1bmN0aW9uIGV4cG9ydERhdGEoKSB7CiAgICAgIHZhciB0aCA9IFsn5ZWG5ZOB5ZCN56ewJywgJ+WVhuWTgeeugOS7iycsICfllYblk4HliIbnsbsnLCAn5Lu35qC8JywgJ+W6k+WtmCcsICfplIDph48nLCAn5pS26JeP5Lq65pWwJ107CiAgICAgIHZhciBmaWx0ZXJWYWwgPSBbJ3N0b3JlX25hbWUnLCAnc3RvcmVfaW5mbycsICdjYXRlX25hbWUnLCAncHJpY2UnLCAnc3RvY2snLCAnc2FsZXMnLCAnY29sbGVjdCddOwogICAgICB0aGlzLndoZXJlLnBhZ2UgPSAnbm9wYWdlJzsKICAgICAgZ2V0R29vZHModGhpcy53aGVyZSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIGRhdGEgPSByZXMuZGF0YS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICAgIHJldHVybiBmaWx0ZXJWYWwubWFwKGZ1bmN0aW9uIChrKSB7CiAgICAgICAgICAgIHJldHVybiB2W2tdOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGZpbGVUaW1lID0gRGF0ZS5wYXJzZShuZXcgRGF0ZSgpKTsKICAgICAgICB2YXIgZmlsZU5hbWUgPSAn5ZWG5oi35pWw5o2uXycgKyBmaWxlVGltZSwKICAgICAgICAgIGZpbGVUeXBlID0gJ3hsc3gnLAogICAgICAgICAgc2hlZXROYW1lID0gJ+WVhuaIt+aVsOaNric7CiAgICAgICAgdG9FeGNlbCh7CiAgICAgICAgICB0aDogdGgsCiAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLAogICAgICAgICAgZmlsZVR5cGU6IGZpbGVUeXBlLAogICAgICAgICAgc2hlZXROYW1lOiBzaGVldE5hbWUKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5bGe5oCn5by55Ye677ybCiAgICBhdHRyVGFwOiBmdW5jdGlvbiBhdHRyVGFwKCkgewogICAgICB0aGlzLmF0dHJUZW1wbGF0ZSA9IHRydWU7CiAgICB9LAogICAgY2hhbmdlVGVtcGxhdGU6IGZ1bmN0aW9uIGNoYW5nZVRlbXBsYXRlKG1zZykgewogICAgICB0aGlzLmF0dHJUZW1wbGF0ZSA9IG1zZzsKICAgIH0sCiAgICAvLyDnvJbovpEKICAgIGVkaXQ6IGZ1bmN0aW9uIGVkaXQocm93KSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiB0aGlzLiRyb3V0ZVByb1N0ciArICcvcHJvZHVjdC9hZGRfcHJvZHVjdC8nICsgcm93LmlkCiAgICAgIH0pOwogICAgfSwKICAgIC8vIOehruiupAogICAgZGVsOiBmdW5jdGlvbiBkZWwocm93LCB0aXQsIG51bSkgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CiAgICAgIHZhciBkZWxmcm9tRGF0YSA9IHsKICAgICAgICB0aXRsZTogdGl0LAogICAgICAgIG51bTogbnVtLAogICAgICAgIHVybDogInByb2R1Y3QvcHJvZHVjdC8iLmNvbmNhdChyb3cuaWQpLAogICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgaWRzOiAnJywKICAgICAgICB1bjogMQogICAgICB9OwogICAgICB0aGlzLiRtb2RhbFN1cmUoZGVsZnJvbURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMTIuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICBfdGhpczEyLnRhYmxlTGlzdC5zcGxpY2UobnVtLCAxKTsKICAgICAgICBfdGhpczEyLmdvb2RIZWFkZSgpOwogICAgICAgIF90aGlzMTIuZ2V0RGF0YUxpc3QoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMTIuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIGZ1bGxEZWw6IGZ1bmN0aW9uIGZ1bGxEZWwocm93LCB0aXQsIG51bSkgewogICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CiAgICAgIHZhciBkZWxmcm9tRGF0YSA9IHsKICAgICAgICB0aXRsZTogdGl0LAogICAgICAgIG51bTogbnVtLAogICAgICAgIHVybDogInByb2R1Y3QvZnVsbF9kZWwvIi5jb25jYXQocm93LmlkKSwKICAgICAgICBtZXRob2Q6ICdERUxFVEUnCiAgICAgIH07CiAgICAgIHRoaXMuJG1vZGFsU3VyZShkZWxmcm9tRGF0YSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMxMy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIF90aGlzMTMudGFibGVMaXN0LnNwbGljZShudW0sIDEpOwogICAgICAgIF90aGlzMTMuZ29vZEhlYWRlKCk7CiAgICAgICAgX3RoaXMxMy5nZXREYXRhTGlzdCgpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMxMy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g6YeN572uCiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQobmFtZSkgewogICAgICB0aGlzLmFydEZyb20gPSB7CiAgICAgICAgcGFnZTogMSwKICAgICAgICBsaW1pdDogMTUsCiAgICAgICAgY2F0ZV9pZDogJycsCiAgICAgICAgdHlwZTogJzEnLAogICAgICAgIHN0b3JlX25hbWU6ICcnLAogICAgICAgIHNwZWNfdHlwZTogJycsCiAgICAgICAgbG9naXN0aWNzOiAnJywKICAgICAgICB2aXBfcHJvZHVjdDogJycsCiAgICAgICAgaXNfZ2lmdDogJycsCiAgICAgICAgc2FsZXNfczogWycnLCAnJ10sCiAgICAgICAgc3RvY2tfczogWycnLCAnJ10sCiAgICAgICAgcHJpY2VfczogWycnLCAnJ10sCiAgICAgICAgc3RvcmVfbGFiZWxfaWQ6IFtdLAogICAgICAgIHRpbWU6ICcnLAogICAgICAgIHZpcnR1YWxfdHlwZTogJycKICAgICAgfTsKICAgICAgdGhpcy5zdG9yZUxhYmVsTGlzdCA9IFtdOwogICAgICB0aGlzLnRhYmxlTGlzdCA9IFtdOwogICAgICB0aGlzLnRvdGFsID0gMDsKICAgICAgdGhpcy50aW1lVmFsID0gW107CiAgICAgIHRoaXMuZ2V0RGF0YUxpc3QoKTsKICAgIH0KICB9Cn07"},null]}