{"remainingRequest":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\kefu\\mobile\\orderList\\orderDelivery.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\kefu\\mobile\\orderList\\orderDelivery.vue","mtime":1731313973071},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\babel.config.js","mtime":1679965410000},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\.babelrc","mtime":1679965410000},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1753254256661},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1753254258567},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1753254260598}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvciBmcm9tICJEOi9wYy96bS9cdTY2MDZcdTY2MEVcdTk2MTRcdTdGRDRcdTc5RDFcdTYyODBcdTY3MDlcdTk2NTBcdTUxNkNcdTUzRjgvXHU2RTkwXHU3ODAxL0NSTUVCLUJaIHY1LjYuMigyMDI1MDYzMCkvdGVtcGxhdGUvYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3JlZ2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6L3BjL3ptL1x1NjYwNlx1NjYwRVx1OTYxNFx1N0ZENFx1NzlEMVx1NjI4MFx1NjcwOVx1OTY1MFx1NTE2Q1x1NTNGOC9cdTZFOTBcdTc4MDEvQ1JNRUItQlogdjUuNi4yKDIwMjUwNjMwKS90ZW1wbGF0ZS9hZG1pbi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnB1c2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5pdGVyYXRvci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLml0ZXJhdG9yLm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgeyBvcmRlclNlbmRBcGksIG9yZGVyRGV0YWlsQXBpIH0gZnJvbSAnQC9hcGkvb3JkZXInOwppbXBvcnQgeyBvcmRlclRlbXAsIG9yZGVySW5mbywgb3JkZXJFeHBvcnQsIG9yZGVyRGVsaXZlcnksIGdldFNlbmRlciwgb3JkZXJEZWxpdmVyeUFsbCB9IGZyb20gJ0AvYXBpL2tlZnUnOwppbXBvcnQgeyByZXF1aXJlZCwgbnVtIH0gZnJvbSAnQC91dGlscy92YWxpZGF0ZSc7CmltcG9ydCB7IHZhbGlkYXRvckRlZmF1bHRDYXRjaCB9IGZyb20gJ0AvbGlicy9kaWFsb2cnOwppbXBvcnQgdnVlUGlja2VycyBmcm9tICd2dWUtcGlja2Vycyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnR29vZHNEZWxpdmVyJywKICBjb21wb25lbnRzOiB7CiAgICB2dWVQaWNrZXJzOiB2dWVQaWNrZXJzCiAgfSwKICBwcm9wczoge30sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBpY2tlclZpc2libGU6IGZhbHNlLAogICAgICAvLyDlv6vpgJLlhazlj7jpgInmi6kKICAgICAgdHlwZXM6IFt7CiAgICAgICAgdHlwZTogMSwKICAgICAgICB0aXRsZTogJ+WPkei0pycKICAgICAgfSwgewogICAgICAgIHR5cGU6IDIsCiAgICAgICAgdGl0bGU6ICfpgIHotKcnCiAgICAgIH0sIHsKICAgICAgICB0eXBlOiAzLAogICAgICAgIHRpdGxlOiAn5peg6ZyA5Y+R6LSnJwogICAgICB9XSwKICAgICAgZXhwcmVzc1R5cGU6IFt7CiAgICAgICAgdGl0bGU6ICfmiYvliqjloavlhpknLAogICAgICAgIGtleTogMQogICAgICB9LCB7CiAgICAgICAgdGl0bGU6ICfnlLXlrZDpnaLljZXmiZPljbAnLAogICAgICAgIGtleTogMgogICAgICB9XSwKICAgICAgYWN0aXZlOiAwLAogICAgICBhY3RpdmVFeHBUcGU6IDAsCiAgICAgIG9yZGVySWQ6ICcnLAogICAgICBkZWxpdmVyeTogbnVsbCwKICAgICAgcGlja0RhdGE6IFtdLAogICAgICB0eXBlOiAnMScsCiAgICAgIHJlc3VsdDoge30sCiAgICAgIGV4cEZyb206IHsKICAgICAgICB0eXBlOiAxLAogICAgICAgIC8vIOWPkei0p+aWueW8jwogICAgICAgIGRlbGl2ZXJ5X25hbWU6ICcnLAogICAgICAgIC8v5b+r6YCS5YWs5Y+4CiAgICAgICAgZGVsaXZlcnlfaWQ6ICcnLAogICAgICAgIC8v5b+r6YCS5Y2V5Y+3CiAgICAgICAgZGVsaXZlcnlfY29kZTogJycsCiAgICAgICAgLy/lv6vpgJLlhazlj7jnvJbnoIEKICAgICAgICBleHByZXNzX3JlY29yZF90eXBlOiAxLAogICAgICAgIC8vIOWPkei0p+exu+WeiwogICAgICAgIGV4cHJlc3NfdGVtcF9pZDogJycsCiAgICAgICAgLy8g55S15a2Q6Z2i5Y2V5qih5p2/CiAgICAgICAgdG9fbmFtZTogJycsCiAgICAgICAgdG9fdGVsOiAnJywKICAgICAgICB0b19hZGRyOiAnJywKICAgICAgICBzaF9kZWxpdmVyeV9uYW1lOiAnJywKICAgICAgICBzaF9kZWxpdmVyeV9pZDogJycsCiAgICAgICAgc2hfZGVsaXZlcnlfdWlkOiAnJywKICAgICAgICBmaWN0aXRpb3VzX2NvbnRlbnQ6ICcnCiAgICAgIH0sCiAgICAgIGV4cFRlbXA6IFtdLAogICAgICBwaWNrZXJWaXNpYmxlTmFtZTogZmFsc2UsCiAgICAgIC8vIOmAgei0p+S6uumAieaLqQogICAgICBwaWNrZXJWaXNpYmxlRXhwVGVtcDogZmFsc2UsCiAgICAgIC8v55S15a2Q6Z2i5Y2V6YCJ5oupCiAgICAgIGV4cFRlbXBEYXRhOiBbXSwKICAgICAgLy8g6Z2i5Y2V5pWw5o2uCiAgICAgIHRlbXBOYW1lOiAnJywKICAgICAgLy8g6Z2i5Y2V5ZCN56ewCiAgICAgIHRlbXBJbWc6ICcnLAogICAgICAvL+mdouWNleWbvueJhwogICAgICBkZWxpdmVyeUxpc3Q6IFtdIC8vIOmAgei0p+S6uuaVsOaNrgogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICAnJHJvdXRlLnBhcmFtcy5vcmRlcklkJzogZnVuY3Rpb24gJHJvdXRlUGFyYW1zT3JkZXJJZChuZXdWYWwpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICBpZiAobmV3VmFsICE9IHVuZGVmaW5lZCkgewogICAgICAgIHRoYXQub3JkZXJJZCA9IG5ld1ZhbDsKICAgICAgICB0aGF0LmdldEluZGV4KCk7CiAgICAgIH0KICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvLyBpbXBvcnQoJ0AvYXNzZXRzL2pzL21lZGlhXzc1MCcpCiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5vcmRlcklkID0gdGhpcy4kcm91dGUucGFyYW1zLm9yZGVySWQ7CiAgICB0aGlzLmdldEluZGV4KCk7CiAgICB0aGlzLmdldExvZ2lzdGljcygpOwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5pi+56S66YCB6LSn5Lq6CiAgICBzaG93TmFtZTogZnVuY3Rpb24gc2hvd05hbWUoKSB7CiAgICAgIHRoaXMucGlja2VyVmlzaWJsZU5hbWUgPSB0cnVlOwogICAgfSwKICAgIC8vIOiOt+WPlumFjemAgeS6ugogICAgZ2V0RGVsaXZlcnk6IGZ1bmN0aW9uIGdldERlbGl2ZXJ5KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBvcmRlckRlbGl2ZXJ5QWxsKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIHRkYXRhID0gW107CiAgICAgICAgcmVzLmRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICB0ZGF0YS5wdXNoKHsKICAgICAgICAgICAgbGFiZWw6IGl0ZW0ubmlja25hbWUsCiAgICAgICAgICAgIHZhbHVlOiBpdGVtLnVpZCwKICAgICAgICAgICAgcGhvbmU6IGl0ZW0ucGhvbmUKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIF90aGlzLmRlbGl2ZXJ5TGlzdCA9IFt0ZGF0YV07CiAgICAgICAgX3RoaXMuZXhwRnJvbS5zaF9kZWxpdmVyeV9uYW1lID0gdGRhdGFbMF0ubGFiZWw7CiAgICAgICAgX3RoaXMuZXhwRnJvbS5zaF9kZWxpdmVyeV9pZCA9IHRkYXRhWzBdLnBob25lOwogICAgICAgIF90aGlzLmV4cEZyb20uc2hfZGVsaXZlcnlfdWlkID0gdGRhdGFbMF0udmFsdWU7CiAgICAgICAgaWYgKF90aGlzLmV4cEZyb20uZXhwcmVzc19yZWNvcmRfdHlwZSA9PT0gMikgX3RoaXMuZ2V0VGVtcCgpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDpgInmi6npgIHotKfkuroKICAgIGNvbmZpcm1OYW1lOiBmdW5jdGlvbiBjb25maXJtTmFtZShyZXMpIHsKICAgICAgdGhpcy5leHBGcm9tLnNoX2RlbGl2ZXJ5X25hbWUgPSByZXNbMF0ubGFiZWw7CiAgICAgIHRoaXMuZXhwRnJvbS5zaF9kZWxpdmVyeV9pZCA9IHJlc1swXS5waG9uZTsKICAgICAgdGhpcy5leHBGcm9tLnNoX2RlbGl2ZXJ5X3VpZCA9IHJlc1swXS52YWx1ZTsKICAgIH0sCiAgICAvLyDojrflj5borqLljZXmiZPljbDpu5jorqTphY3nva4KICAgIG9yZGVyRGVsaXZlcnlJbmZvOiBmdW5jdGlvbiBvcmRlckRlbGl2ZXJ5SW5mbygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIGdldFNlbmRlcigpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMi5leHBGcm9tLnRvX25hbWUgPSByZXMuZGF0YS50b19uYW1lOwogICAgICAgIF90aGlzMi5leHBGcm9tLnRvX3RlbCA9IHJlcy5kYXRhLnRvX3RlbDsKICAgICAgICBfdGhpczIuZXhwRnJvbS50b19hZGRyID0gcmVzLmRhdGEudG9fYWRkOwogICAgICB9KTsKICAgIH0sCiAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgLy8gdGhpcy5yZXN1bHQgPSAnY2xpY2sgY2FuY2VsIHJlc3VsdDogbnVsbCcKICAgIH0sCiAgICAvLyDpgInmi6nlj5HotKfnsbvlnosKICAgIGNoYW5nZUV4cFRwZTogZnVuY3Rpb24gY2hhbmdlRXhwVHBlKGl0ZW0sIGluZGV4KSB7CiAgICAgIHRoaXMuZXhwRnJvbS5leHByZXNzX3JlY29yZF90eXBlID0gaXRlbS5rZXk7CiAgICAgIHRoaXMuYWN0aXZlRXhwVHBlID0gaW5kZXg7CiAgICAgIGlmIChpdGVtLmtleSA9PT0gMikgewogICAgICAgIHRoaXMub3JkZXJEZWxpdmVyeUluZm8oKTsKICAgICAgICB0aGlzLmdldFRlbXAoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmV4cFRlbXAgPSBbXTsKICAgICAgfQogICAgfSwKICAgIC8vIOW/q+mAkuaooeadvwogICAgZ2V0VGVtcDogZnVuY3Rpb24gZ2V0VGVtcCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIG9yZGVyVGVtcCh7CiAgICAgICAgY29tOiB0aGlzLmV4cEZyb20uZGVsaXZlcnlfY29kZQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczMuZXhwVGVtcCA9IHJlcy5kYXRhLmRhdGE7CiAgICAgICAgdmFyIHRkYXRhID0gW107CiAgICAgICAgaWYgKF90aGlzMy5leHBUZW1wLmxlbmd0aCkgewogICAgICAgICAgX3RoaXMzLmV4cFRlbXAubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHRkYXRhLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiBpdGVtLnRpdGxlLAogICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnRlbXBfaWQsCiAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsCiAgICAgICAgICAgICAgcGljOiBpdGVtLnBpYywKICAgICAgICAgICAgICBjb2RlOiBpdGVtLmNvZGUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIF90aGlzMy5leHBUZW1wRGF0YSA9IFt0ZGF0YV07CiAgICAgICAgICBfdGhpczMuZXhwRnJvbS5leHByZXNzX3RlbXBfaWQgPSB0ZGF0YVswXS52YWx1ZTsKICAgICAgICAgIF90aGlzMy50ZW1wTmFtZSA9IHRkYXRhWzBdLmxhYmVsOwogICAgICAgICAgX3RoaXMzLnRlbXBJbWcgPSB0ZGF0YVswXS5waWM7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDpgInmi6nnlLXlrZDpnaLljZXmqKHmnb8KICAgIGNvbmZpcm1FeHBUZW1wOiBmdW5jdGlvbiBjb25maXJtRXhwVGVtcChyZXMpIHsKICAgICAgdGhpcy5leHBGcm9tLmV4cHJlc3NfdGVtcF9pZCA9IHJlc1swXS52YWx1ZTsKICAgICAgdGhpcy50ZW1wTmFtZSA9IHJlc1swXS5sYWJlbDsKICAgICAgdGhpcy50ZW1wSW1nID0gcmVzWzBdLnBpYzsKICAgIH0sCiAgICAvLyDpgInmi6nlv6vpgJLlhazlj7gKICAgIGNvbmZpcm06IGZ1bmN0aW9uIGNvbmZpcm0ocmVzKSB7CiAgICAgIHRoaXMuZXhwRnJvbS5kZWxpdmVyeV9uYW1lID0gcmVzWzBdLmxhYmVsOwogICAgICB0aGlzLmV4cEZyb20uZGVsaXZlcnlfY29kZSA9IHJlc1swXS52YWx1ZTsKICAgICAgaWYgKHRoaXMuZXhwRnJvbS5leHByZXNzX3JlY29yZF90eXBlID09PSAyKSB0aGlzLmdldFRlbXAoKTsKICAgIH0sCiAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkgewogICAgICB0aGlzLnBpY2tlclZpc2libGUgPSB0cnVlOwogICAgfSwKICAgIHNob3dFeHBUZW1wOiBmdW5jdGlvbiBzaG93RXhwVGVtcCgpIHsKICAgICAgdGhpcy5waWNrZXJWaXNpYmxlRXhwVGVtcCA9IHRydWU7CiAgICB9LAogICAgLy8g5Y+R6LSn5pa55byPCiAgICBjaGFuZ2VUeXBlOiBmdW5jdGlvbiBjaGFuZ2VUeXBlKGl0ZW0sIGluZGV4KSB7CiAgICAgIHRoaXMuYWN0aXZlID0gaW5kZXg7CiAgICAgIHRoaXMuZXhwRnJvbS50eXBlID0gaXRlbS50eXBlOwogICAgICBpZiAoaW5kZXggPT09IDEpIHRoaXMuZ2V0RGVsaXZlcnkoKTsKICAgIH0sCiAgICBnZXRJbmRleDogZnVuY3Rpb24gZ2V0SW5kZXgoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICBvcmRlckluZm8odGhpcy4kcm91dGUucGFyYW1zLmlkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczQuZGVsaXZlcnkgPSByZXMuZGF0YTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgX3RoaXM0LiRkaWFsb2cuZXJyb3IoZXJyb3IubXNnKTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0TG9naXN0aWNzOiBmdW5jdGlvbiBnZXRMb2dpc3RpY3MoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICBvcmRlckV4cG9ydCgpLnRoZW4oLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IoKS5tKGZ1bmN0aW9uIF9jYWxsZWUocmVzKSB7CiAgICAgICAgICB2YXIgdGRhdGE7CiAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yKCkudyhmdW5jdGlvbiAoX2NvbnRleHQpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQubikgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRkYXRhID0gW107CiAgICAgICAgICAgICAgICByZXMuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgdGRhdGEucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0udmFsdWUsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uY29kZSwKICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX3RoaXM1LnBpY2tEYXRhID0gW3RkYXRhXTsKICAgICAgICAgICAgICAgIF90aGlzNS5leHBGcm9tLmRlbGl2ZXJ5X25hbWUgPSB0ZGF0YVswXS5sYWJlbDsKICAgICAgICAgICAgICAgIF90aGlzNS5leHBGcm9tLmRlbGl2ZXJ5X2NvZGUgPSB0ZGF0YVswXS52YWx1ZTsKICAgICAgICAgICAgICAgIGlmIChfdGhpczUuZXhwRnJvbS5leHByZXNzX3JlY29yZF90eXBlID09PSAyKSBfdGhpczUuZ2V0VGVtcCgpOwogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hKDIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICB9KSk7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KCkpOwogICAgfSwKICAgIHNhdmVJbmZvOiBmdW5jdGlvbiBzYXZlSW5mbygpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yKCkubShmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgdGhhdCwgdHlwZSwgc2F2ZSwgX3QsIF90MjsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yKCkudyhmdW5jdGlvbiAoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIubikgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdGhhdCA9IF90aGlzNiwgdHlwZSA9IHRoYXQudHlwZSwgc2F2ZSA9IHt9OyAvLyBzYXZlLmlkID0gdGhhdC4kcm91dGUucGFyYW1zLmlkOwogICAgICAgICAgICAgIC8vIHNhdmUudHlwZSA9IHRoYXQuZXhwRnJvbS50eXBlOwogICAgICAgICAgICAgIF90ID0gdHlwZTsKICAgICAgICAgICAgICBfY29udGV4dDIubiA9IF90ID09PSAnMScgPyAxIDogX3QgPT09ICcyJyA/IDUgOiBfdCA9PT0gJzMnID8gOSA6IDEwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgaWYgKCEoX3RoaXM2LmV4cEZyb20udHlwZSA9PT0gMSAmJiAhdGhhdC5leHBGcm9tLmRlbGl2ZXJ5X25hbWUpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubiA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hKDIsIHRoYXQuJGRpYWxvZy5lcnJvcign6K+36L6T5YWl5b+r6YCS5YWs5Y+4JykpOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgaWYgKCEoX3RoaXM2LmV4cEZyb20udHlwZSA9PT0gMSAmJiBfdGhpczYuZXhwRnJvbS5leHByZXNzX3JlY29yZF90eXBlID09PSAxICYmICF0aGF0LmV4cEZyb20uZGVsaXZlcnlfaWQpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubiA9IDM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hKDIsIHRoYXQuJGRpYWxvZy5lcnJvcign6K+36L6T5YWl5b+r6YCS5Y2V5Y+3JykpOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgaWYgKCEoX3RoaXM2LmV4cEZyb20udHlwZSA9PT0gMSAmJiAhdGhhdC5leHBGcm9tLmV4cHJlc3NfdGVtcF9pZCAmJiBfdGhpczYuZXhwRnJvbS5leHByZXNzX3JlY29yZF90eXBlID09PSAyKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm4gPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYSgyLCB0aGF0LiRkaWFsb2cuZXJyb3IoJ+ivt+mAieaLqeeUteWtkOmdouWNlScpKTsKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIHRoYXQuc2V0SW5mbyh0aGF0LmV4cEZyb20pOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYSgzLCAxMCk7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBfY29udGV4dDIucCA9IDU7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm4gPSA2OwogICAgICAgICAgICAgIHJldHVybiBfdGhpczYuJHZhbGlkYXRvcih7CiAgICAgICAgICAgICAgICBleHByZXNzSWQ6IFtyZXF1aXJlZChyZXF1aXJlZC5tZXNzYWdlKCflj5HotKfkurrlp5PlkI0nKSldLAogICAgICAgICAgICAgICAgZXhwcmVzc0NvZGU6IFtyZXF1aXJlZChyZXF1aXJlZC5tZXNzYWdlKCflj5HotKfkurrnlLXor50nKSldCiAgICAgICAgICAgICAgfSkudmFsaWRhdGUoewogICAgICAgICAgICAgICAgZXhwcmVzc0lkOiBleHByZXNzSWQsCiAgICAgICAgICAgICAgICBleHByZXNzQ29kZTogZXhwcmVzc0NvZGUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uID0gODsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wID0gNzsKICAgICAgICAgICAgICBfdDIgPSBfY29udGV4dDIudjsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmEoMiwgdmFsaWRhdG9yRGVmYXVsdENhdGNoKF90MikpOwogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgc2F2ZS5leHByZXNzSWQgPSBleHByZXNzSWQ7CiAgICAgICAgICAgICAgc2F2ZS5leHByZXNzQ29kZSA9IGV4cHJlc3NDb2RlOwogICAgICAgICAgICAgIHRoYXQuc2V0SW5mbyhzYXZlKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmEoMywgMTApOwogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgdGhhdC5zZXRJbmZvKHNhdmUpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYSgzLCAxMCk7CiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hKDIpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzUsIDddXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNldEluZm86IGZ1bmN0aW9uIHNldEluZm8oaXRlbSkgewogICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgIG9yZGVyRGVsaXZlcnkodGhhdC4kcm91dGUucGFyYW1zLmlkLCBpdGVtKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB0aGF0LiRkaWFsb2cuc3VjY2Vzcygn5Y+R6YCB6LSn5oiQ5YqfJyk7CiAgICAgICAgdGhhdC4kcm91dGVyLmdvKC0xKTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgdGhhdC4kZGlhbG9nLmVycm9yKGVycm9yLm1zZyk7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},null]}