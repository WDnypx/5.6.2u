{"remainingRequest":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\components\\uploadVideo2\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\components\\uploadVideo2\\index.vue","mtime":1735612792165},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1753254256661},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1753254258567},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1753254260598}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7CiAgZ2V0Q2F0ZWdvcnlMaXN0QXBpLAogIGNyZWF0ZUFwaSwKICBmaWxlTGlzdEFwaSwKICBjYXRlZ29yeUVkaXRBcGksCiAgbW92ZUFwaSwKICBmaWxlVXBkYXRlQXBpLAogIHZpZGVvQ2xvdWRVcGxvYWQsCn0gZnJvbSAnQC9hcGkvdXBsb2FkUGljdHVyZXMnOwppbXBvcnQgeyBwcm9kdWN0R2V0VGVtcEtleXNBcGksIHVwbG9hZFR5cGUgfSBmcm9tICdAL2FwaS9wcm9kdWN0JzsKaW1wb3J0IHsgdXBsb2FkQnlQaWVjZXMgfSBmcm9tICdAL3V0aWxzL3VwbG9hZCc7IC8v5byV5YWldXBsb2FkQnlQaWVjZXPmlrnms5UKCmltcG9ydCBTZXR0aW5nIGZyb20gJ0Avc2V0dGluZyc7CmltcG9ydCB7IGdldENvb2tpZXMgfSBmcm9tICdAL2xpYnMvdXRpbCc7CmltcG9ydCB1cGxvYWRJbWcgZnJvbSAnQC9jb21wb25lbnRzL3VwbG9hZEltZyc7CmltcG9ydCB7IFZ1ZVRyZWVMaXN0LCBUcmVlLCBUcmVlTm9kZSB9IGZyb20gJ3Z1ZS10cmVlLWxpc3QnOwppbXBvcnQgeyBpc1ZpZGVvVXBsb2FkIH0gZnJvbSAnQC91dGlscyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndXBsb2FkUGljdHVyZXMnLAogIGNvbXBvbmVudHM6IHsgdXBsb2FkSW1nLCBWdWVUcmVlTGlzdCB9LAogIHByb3BzOiB7CiAgICBpc0Nob2ljZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdvbmUnLAogICAgfSwKICAgIGlzUGFnZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZSwKICAgIH0sCiAgICBpc0lmcmFtZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZSwKICAgIH0sCiAgICBncmlkQnRuOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogbnVsbCwKICAgIH0sCiAgICBncmlkUGljOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogbnVsbCwKICAgIH0sCiAgICBpc1Nob3c6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxLAogICAgfSwKICAgIHBhZ2VMaW1pdDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAsCiAgICB9LAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNwaW5TaG93OiBmYWxzZSwKICAgICAgZmlsZVVybDogU2V0dGluZy5hcGlCYXNlVVJMICsgJy9maWxlL3VwbG9hZCcsCiAgICAgIG1vZGFsUGljOiBmYWxzZSwKICAgICAgdHJlZURhdGE6IFtdLAogICAgICB0cmVlRGF0YTI6IFtdLAogICAgICBwaWN0cnVlTGlzdDogW10sCiAgICAgIHVwbG9hZERhdGE6IHt9LCAvLyDkuIrkvKDlj4LmlbAKICAgICAgY2hlY2tQaWNMaXN0OiBbXSwKICAgICAgdXBsb2FkTmFtZTogewogICAgICAgIG5hbWU6ICcnLAogICAgICAgIGFsbDogMSwKICAgICAgICB0eXBlOiAxLAogICAgICB9LAogICAgICBmb3JtVmFsaWRhdGU6IHsgaWQ6IDAgfSwKICAgICAgRnJvbURhdGE6IG51bGwsCiAgICAgIHRyZWVJZDogJycsCiAgICAgIGlzSnVkZ2U6IGZhbHNlLAogICAgICBidXR0b25Qcm9wczogewogICAgICAgIHR5cGU6ICdkZWZhdWx0JywKICAgICAgICBzaXplOiAnc21hbGwnLAogICAgICB9LAogICAgICBmaWxlRGF0YTogewogICAgICAgIHBpZDogMCwKICAgICAgICByZWFsX25hbWU6ICcnLAogICAgICAgIHBhZ2U6IDEsCiAgICAgICAgbGltaXQ6IHRoaXMucGFnZUxpbWl0IHx8IDE4LAogICAgICAgIHR5cGU6IDEsCiAgICAgIH0sCiAgICAgIHRvdGFsOiAwLAogICAgICBwaWRzOiAwLAogICAgICBsaXN0OiBbXSwKICAgICAgbW9kYWxUaXRsZVNzOiAnJywKICAgICAgaXNTaG93UGljOiBmYWxzZSwKICAgICAgaGVhZGVyOiB7fSwKICAgICAgaWRzOiBbXSwgLy8g6YCJ5Lit6ZmE5Lu255qEaWTpm4blkIgKICAgICAgbGlldFN0eWxlOiAnbGlzdCcsCiAgICAgIGltYWdlVXJsOiAnJywKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIG11bHRpcGxlU2VsZWN0aW9uOiBbXSwKICAgICAgcGljbWFyZ2luOiAnNXB4JywgLy/pu5jorqTot53nprvlj7Povrnot53nprsKICAgICAgdmlkZW9Nb2RhbDogZmFsc2UsCiAgICAgIHVwbG9hZF90eXBlOiAnJywKICAgICAgdXBsb2FkOiB7CiAgICAgICAgdmlkZW9Jbmc6IGZhbHNlLCAvLyDmmK/lkKbmmL7npLrov5vluqbmnaHvvJsKICAgICAgfSwKICAgIH07CiAgfSwKICBtb3VudGVkKCkgewogICAgaWYgKHRoaXMuaXNQYWdlKSB7CiAgICAgIGxldCBoYW5nID0gcGFyc2VJbnQoKGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC0gdGhpcy4kcmVmcy5pbWdMaXN0Qm94LmNsaWVudEhlaWdodCAtIDMyNSkgLyAxODApOyAvL+iuoeeul+ihjOaVsAogICAgICBsZXQgY29sID0gcGFyc2VJbnQodGhpcy4kcmVmcy5pbWdMaXN0Qm94LmNsaWVudFdpZHRoIC8gMTU2KTsgLy/orqHnrpfliJfmlbAKICAgICAgdGhpcy5maWxlRGF0YS5saW1pdCA9IGNvbCAqIGhhbmc7IC8v6K6h566X5YiG6aG15pWw6YePCiAgICAgIHRoaXMucGljbWFyZ2luID0gcGFyc2VJbnQodGhpcy4kcmVmcy5pbWdMaXN0Qm94LmNsaWVudFdpZHRoIC0gY29sICogMTQ2KSAvICgyICogY29sKSArICdweCc7IC8v5bmz5Z2H5YiG5biD6K6h566XbWFyZ2lu6Led56a7CiAgICB9CiAgICB0aGlzLmdldFRva2VuKCk7CiAgICB0aGlzLnVwbG9hZFR5cGUoKTsKICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgLy/ojrflj5bop4bpopHkuIrkvKDnsbvlnosKICAgIHVwbG9hZFR5cGUoKSB7CiAgICAgIHVwbG9hZFR5cGUoKS50aGVuKChyZXMpID0+IHsKICAgICAgICB0aGlzLnVwbG9hZF90eXBlID0gcmVzLmRhdGEudXBsb2FkX3R5cGU7CiAgICAgIH0pOwogICAgfSwKICAgIGJlZm9yZVVwbG9hZCgpIHsKICAgICAgdGhpcy51cGxvYWREYXRhID0ge307CiAgICAgIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXNvbHZlKHRydWUpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIHByb21pc2U7CiAgICB9LAogICAgemhfdXBsb2FkRmlsZSgpIHsKICAgICAgdGhpcy4kcmVmcy5yZWZpZC5jbGljaygpOwogICAgfSwKICAgIHpoX3VwbG9hZEZpbGVfY2hhbmdlKGV2ZmlsZSkgewogICAgICBsZXQgdGhhdCA9IHRoaXM7CiAgICAgIGlmIChldmZpbGUudGFyZ2V0LmZpbGVzWzBdLnR5cGUgIT09ICd2aWRlby9tcDQnKSB7CiAgICAgICAgcmV0dXJuIHRoYXQuJG1lc3NhZ2UuZXJyb3IoJ+WPquiDveS4iuS8oG1wNOaWh+S7ticpOwogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKCcxMTEnKTsKICAgICAgZGVidWdnZXI7CiAgICAgIGxldCB0eXBlcyA9IHsKICAgICAgICBrZXk6IGV2ZmlsZS50YXJnZXQuZmlsZXNbMF0ubmFtZSwKICAgICAgICBjb250ZW50VHlwZTogZXZmaWxlLnRhcmdldC5maWxlc1swXS50eXBlLAogICAgICB9OwogICAgICBwcm9kdWN0R2V0VGVtcEtleXNBcGkodHlwZXMpLnRoZW4oKHJlcykgPT4gewogICAgICAgIGNvbnNvbGUubG9nKHJlcywgZXZmaWxlLCByZXMuZGF0YS50eXBlKTsKICAgICAgICB0aGF0LiR2aWRlb0Nsb3VkCiAgICAgICAgICAudmlkZW9VcGxvYWQoewogICAgICAgICAgICB0eXBlOiByZXMuZGF0YS50eXBlLAogICAgICAgICAgICBldmZpbGU6IGV2ZmlsZSwKICAgICAgICAgICAgcmVzOiByZXMsCiAgICAgICAgICAgIHVwbG9hZGluZyhzdGF0dXMsIHByb2dyZXNzKSB7CiAgICAgICAgICAgICAgdGhhdC51cGxvYWQudmlkZW9JbmcgPSBzdGF0dXM7CiAgICAgICAgICAgIH0sCiAgICAgICAgICB9KQogICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICB2aWRlb0Nsb3VkVXBsb2FkKHsKICAgICAgICAgICAgICBwaWQ6IHRoaXMudHJlZUlkIHx8IDAsCiAgICAgICAgICAgICAgdmlkZW9fcGF0aDogcmVzLnVybCwKICAgICAgICAgICAgICB2aWRlb19uYW1lOiBldmZpbGUudGFyZ2V0LmZpbGVzWzBdLm5hbWUsCiAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuZ2V0RmlsZUxpc3QoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgICAgdGhhdC4kbWVzc2FnZS5lcnJvcihyZXMpOwogICAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIHZpZGVvU2F2ZVRvVXJsKGZpbGUpIHsKICAgICAgaWYgKGlzVmlkZW9VcGxvYWQoZmlsZSkpCiAgICAgICAgdXBsb2FkQnlQaWVjZXMoewogICAgICAgICAgZmlsZTogZmlsZSwgLy8g6KeG6aKR5a6e5L2TCiAgICAgICAgICBwaWVjZVNpemU6IDMsIC8vIOWIhueJh+Wkp+WwjwogICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+IHsKICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDEwMDsKICAgICAgICAgICAgdmlkZW9DbG91ZFVwbG9hZCh7CiAgICAgICAgICAgICAgcGlkOiB0aGlzLnRyZWVJZCB8fCAwLAogICAgICAgICAgICAgIHZpZGVvX3BhdGg6IGRhdGEuZmlsZV9wYXRoLAogICAgICAgICAgICAgIHZpZGVvX25hbWU6IGZpbGUubmFtZSwKICAgICAgICAgICAgfSkudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygn6KeG6aKR5LiK5Lyg5oiQ5YqfJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIGVycm9yOiAoZSkgPT4gewogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGUubXNnKTsKICAgICAgICAgIH0sCiAgICAgICAgICB1cGxvYWRpbmc6IChjaHVuaywgYWxsQ2h1bmspID0+IHsKICAgICAgICAgICAgdGhpcy52aWRlb0luZyA9IHRydWU7CiAgICAgICAgICAgIGxldCBzdCA9IE1hdGguZmxvb3IoKGNodW5rIC8gYWxsQ2h1bmspICogMTAwKTsKICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHN0OwogICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIHJhZGlvQ2hhbmdlKCkgewogICAgICB0aGlzLmluaXREYXRhKCk7CiAgICB9LAogICAgbG9va0ltZyhpdGVtKSB7CiAgICAgIHRoaXMuaW1hZ2VVcmwgPSBpdGVtLmF0dF9kaXI7CiAgICAgIHRoaXMudmlkZW9Nb2RhbCA9IHRydWU7CiAgICB9LAogICAgb25EZWwobm9kZSkgewogICAgICBsZXQgbWV0aG9kID0gbm9kZS5jYXRlX2lkID8gcm91dGVEZWwgOiByb3V0ZUNhdGVEZWw7CiAgICAgIHRoaXMuJG1zZ2JveCh7CiAgICAgICAgdGl0bGU6ICfmj5DnpLonLAogICAgICAgIG1lc3NhZ2U6ICfmmK/lkKbnoa7lrprliKDpmaTor6Xoj5zljZUnLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfliKDpmaQnLAogICAgICAgIGljb25DbGFzczogJ2VsLWljb24td2FybmluZycsCiAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiAnYnRuLWN1c3RvbS1jYW5jZWwnLAogICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIG1ldGhvZChub2RlLmlkKQogICAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgIG5vZGUucmVtb3ZlKCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoKSA9PiB7fSk7CiAgICB9LAoKICAgIG9uQ2hhbmdlTmFtZShwYXJhbXMpIHsKICAgICAgaWYgKHBhcmFtcy5ldmVudFR5cGUgPT0gJ2JsdXInKSB7CiAgICAgICAgbGV0IGRhdGEgPSB7CiAgICAgICAgICBuYW1lOiBwYXJhbXMubmV3TmFtZSwKICAgICAgICAgIGlkOiBwYXJhbXMuaWQsCiAgICAgICAgfTsKICAgICAgICBpbnRlcmZhY2VFZGl0TmFtZShkYXRhKQogICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIpOwogICAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDmt7vliqDliIbnsbsKICAgIGFkZFNvcnQoKSB7CiAgICAgIHRoaXMuYXBwZW5kKHsgaWQ6IHRoaXMudHJlZUlkIHx8IDAgfSk7CiAgICB9LAogICAgLy8g54K55Ye76I+c5Y2VCiAgICBjbGlja01lbnUoZGF0YSwgbmFtZSkgewogICAgICBpZiAobmFtZSA9PSAxKSB7CiAgICAgICAgdGhpcy5hcHBlbmQoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSAyKSB7CiAgICAgICAgdGhpcy5lZGl0UGljKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gMykgewogICAgICAgIHRoaXMucmVtb3ZlKGRhdGEsICfliIbnsbsnKTsKICAgICAgfQogICAgfSwKICAgIHVwbG9hZFN1Y2Nlc3MoKSB7CiAgICAgIHRoaXMuZmlsZURhdGEucGFnZSA9IDE7CiAgICAgIHRoaXMuaW5pdERhdGEoKTsKICAgICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogICAgfSwKICAgIHVwbG9hZE1vZGFsKCkgewogICAgICB0aGlzLiRyZWZzLnVwbG9hZC51cGxvYWRNb2RhbCA9IHRydWU7CiAgICB9LAogICAgZW50ZXJNb3VzZShpdGVtKSB7CiAgICAgIGl0ZW0ucmVhbE5hbWUgPSAhaXRlbS5yZWFsTmFtZTsKICAgIH0sCiAgICBlbnRlckxlYXZlKGl0ZW0pIHsKICAgICAgaXRlbS5pc1Nob3dFZGl0ID0gIWl0ZW0uaXNTaG93RWRpdDsKICAgIH0sCiAgICAvLyDkuIrkvKDlpLTpg6h0b2tlbgogICAgZ2V0VG9rZW4oKSB7CiAgICAgIHRoaXMuaGVhZGVyWydBdXRob3JpLXphdGlvbiddID0gJ0JlYXJlciAnICsgZ2V0Q29va2llcygndG9rZW4nKTsKICAgIH0sCiAgICBtb3ZlSW1nKHN0YXR1cykgewogICAgICBpZiAoIXN0YXR1cykgewogICAgICAgIHRoaXMuZ2V0TW92ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICghdGhpcy5pZHMudG9TdHJpbmcoKSkgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7flhYjpgInmi6nop4bpopEnKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzZWFyY2hJbWcoKSB7fSwKICAgIC8vIOenu+WKqOWIhuexuwogICAgZ2V0TW92ZSgpIHsKICAgICAgbGV0IGRhdGEgPSB7CiAgICAgICAgcGlkOiB0aGlzLnBpZHMsCiAgICAgICAgaW1hZ2VzOiB0aGlzLmlkcy50b1N0cmluZygpLAogICAgICB9OwogICAgICBpZiAoIWRhdGEuaW1hZ2VzKSByZXR1cm47CiAgICAgIG1vdmVBcGkoZGF0YSkKICAgICAgICAudGhlbihhc3luYyAocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB0aGlzLmdldEZpbGVMaXN0KCk7CiAgICAgICAgICB0aGlzLnBpZHMgPSAwOwogICAgICAgICAgdGhpcy5jaGVja1BpY0xpc3QgPSBbXTsKICAgICAgICAgIHRoaXMuaWRzID0gW107CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBkZWxJbWcoaWQpIHsKICAgICAgbGV0IGlkcyA9IHsKICAgICAgICBpZHM6IGlkLAogICAgICB9OwogICAgICBsZXQgZGVsZnJvbURhdGEgPSB7CiAgICAgICAgdGl0bGU6ICfliKDpmaTpgInkuK3op4bpopEnLAogICAgICAgIHVybDogYGZpbGUvZmlsZS9kZWxldGVgLAogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGlkczogaWRzLAogICAgICB9OwogICAgICB0aGlzLiRtb2RhbFN1cmUoZGVsZnJvbURhdGEpCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogICAgICAgICAgdGhpcy5jaGVja1BpY0xpc3QgPSBbXTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIC8vIOWIoOmZpOinhumikQogICAgZWRpdFBpY0xpc3QoaWQpIHsKICAgICAgbGV0IGlkcyA9IHsKICAgICAgICBpZHM6IGlkIHx8IHRoaXMuaWRzLnRvU3RyaW5nKCksCiAgICAgIH07CiAgICAgIGxldCBkZWxmcm9tRGF0YSA9IHsKICAgICAgICB0aXRsZTogJ+WIoOmZpOmAieS4reinhumikScsCiAgICAgICAgdXJsOiBgZmlsZS9maWxlL2RlbGV0ZWAsCiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgaWRzOiBpZHMsCiAgICAgIH07CiAgICAgIHRoaXMuJG1vZGFsU3VyZShkZWxmcm9tRGF0YSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB0aGlzLmdldEZpbGVMaXN0KCk7CiAgICAgICAgICB0aGlzLmluaXREYXRhKCk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBpbml0RGF0YSgpIHsKICAgICAgdGhpcy5jaGVja1BpY0xpc3QgPSBbXTsKICAgICAgdGhpcy5pZHMgPSBbXTsKICAgICAgdGhpcy5tdWx0aXBsZVNlbGVjdGlvbiA9IFtdOwogICAgfSwKICAgIC8vIOm8oOagh+enu+WFpSDnp7vlh7oKICAgIG9uTW91c2VPdmVyKHJvb3QsIG5vZGUsIGRhdGEpIHsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgZGF0YS5mbGFnID0gIWRhdGEuZmxhZzsKICAgICAgaWYgKGRhdGEuZmxhZzIpIHsKICAgICAgICBkYXRhLmZsYWcyID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICAvLyDngrnlh7vmoJEKICAgIGFwcGVuZEJ0bihkYXRhKSB7CiAgICAgIHRoaXMudHJlZUlkID0gZGF0YS5pZDsKICAgICAgdGhpcy5maWxlRGF0YS5wYWdlID0gMTsKICAgICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogICAgfSwKICAgIC8vIOeCueWHu+a3u+WKoAogICAgYXBwZW5kKGRhdGEpIHsKICAgICAgdGhpcy50cmVlSWQgPSBkYXRhLmlkOwogICAgICB0aGlzLmdldEZyb20oKTsKICAgIH0sCiAgICAvLyDliKDpmaTliIbnsbsKICAgIHJlbW92ZShkYXRhLCB0aXQpIHsKICAgICAgdGhpcy50aXRzID0gdGl0OwogICAgICBsZXQgZGVsZnJvbURhdGEgPSB7CiAgICAgICAgdGl0bGU6ICfliKDpmaQgWyAnICsgZGF0YS50aXRsZSArICcgXSAnICsgJ+WIhuexuycsCiAgICAgICAgdXJsOiBgZmlsZS9jYXRlZ29yeS8ke2RhdGEuaWR9YCwKICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgIGlkczogJycsCiAgICAgIH07CiAgICAgIHRoaXMuJG1vZGFsU3VyZShkZWxmcm9tRGF0YSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB0aGlzLmdldExpc3QoKTsKICAgICAgICAgIHRoaXMuY2hlY2tQaWNMaXN0ID0gW107CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvLyDnvJbovpHmoJHooajljZUKICAgIGVkaXRQaWMoZGF0YSkgewogICAgICB0aGlzLiRtb2RhbEZvcm0oY2F0ZWdvcnlFZGl0QXBpKGRhdGEuaWQpKS50aGVuKCgpID0+IHRoaXMuZ2V0TGlzdCgpKTsKICAgIH0sCiAgICAvLyDmkJzntKLliIbnsbsKICAgIGNoYW5nZVBhZ2UoKSB7CiAgICAgIHRoaXMuZ2V0TGlzdCgnc2VhcmNoJyk7CiAgICB9LAogICAgLy8g5YiG57G75YiX6KGo5qCRCiAgICBnZXRMaXN0KHR5cGUpIHsKICAgICAgbGV0IGRhdGEgPSB7CiAgICAgICAgdGl0bGU6ICflhajpg6jop4bpopEnLAogICAgICAgIGlkOiAnJywKICAgICAgICBwaWQ6IDAsCiAgICAgIH07CiAgICAgIGdldENhdGVnb3J5TGlzdEFwaSh0aGlzLnVwbG9hZE5hbWUpCiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgaWYgKHR5cGUgIT09ICdzZWFyY2gnKSB7CiAgICAgICAgICAgIHRoaXMudHJlZURhdGEyID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShbLi4ucmVzLmRhdGEubGlzdF0pKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlcy5kYXRhLmxpc3QudW5zaGlmdChkYXRhKTsKICAgICAgICAgIHRoaXMudHJlZURhdGEgPSByZXMuZGF0YS5saXN0OwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgbG9hZERhdGEoaXRlbSwgY2FsbGJhY2spIHsKICAgICAgZ2V0Q2F0ZWdvcnlMaXN0QXBpKHsKICAgICAgICBwaWQ6IGl0ZW0uaWQsCiAgICAgIH0pCiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5kYXRhLmxpc3Q7CiAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7fSk7CiAgICB9LAogICAgYWRkRmxhZyh0cmVlZGF0YSkgewogICAgICB0cmVlZGF0YS5tYXAoKGl0ZW0pID0+IHsKICAgICAgICB0aGlzLiRzZXQoaXRlbSwgJ2ZsYWcnLCBmYWxzZSk7CiAgICAgICAgdGhpcy4kc2V0KGl0ZW0sICdmbGFnMicsIGZhbHNlKTsKICAgICAgICBpdGVtLmNoaWxkcmVuICYmIHRoaXMuYWRkRmxhZyhpdGVtLmNoaWxkcmVuKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5paw5bu65YiG57G7CiAgICBhZGQoKSB7CiAgICAgIHRoaXMudHJlZUlkID0gMDsKICAgICAgdGhpcy5nZXRGcm9tKCk7CiAgICB9LAogICAgc2VhcmNoRmlsZSgpIHsKICAgICAgdGhpcy5maWxlRGF0YS5wYWdlID0gMTsKICAgICAgdGhpcy5nZXRGaWxlTGlzdCgpOwogICAgfSwKICAgIC8vIOaWh+S7tuWIl+ihqAogICAgZ2V0RmlsZUxpc3QoKSB7CiAgICAgIHRoaXMuZmlsZURhdGEucGlkID0gdGhpcy50cmVlSWQ7CiAgICAgIGZpbGVMaXN0QXBpKHRoaXMuZmlsZURhdGEpCiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgcmVzLmRhdGEubGlzdC5mb3JFYWNoKChlbCkgPT4gewogICAgICAgICAgICBlbC5pc1NlbGVjdCA9IGZhbHNlOwogICAgICAgICAgICBlbC5pc0VkaXQgPSBmYWxzZTsKICAgICAgICAgICAgZWwuaXNTaG93RWRpdCA9IGZhbHNlOwogICAgICAgICAgICBlbC5yZWFsTmFtZSA9IGZhbHNlOwogICAgICAgICAgICBlbC5udW0gPSAwOwogICAgICAgICAgICB0aGlzLmVkaXROYW1lKGVsKTsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5waWN0cnVlTGlzdCA9IHJlcy5kYXRhLmxpc3Q7CgogICAgICAgICAgaWYgKHRoaXMucGljdHJ1ZUxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMuaXNTaG93UGljID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmlzU2hvd1BpYyA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLnRvdGFsID0gcmVzLmRhdGEuY291bnQ7CiAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgIC8v56Gu5L+dZG9t5Yqg6L295a6M5q+VCiAgICAgICAgICAgIC8vIHRoaXMuc2hvd1NlbGVjdERhdGEoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgc2hvd1NlbGVjdERhdGEoKSB7CiAgICAgIGlmICh0aGlzLm11bHRpcGxlU2VsZWN0aW9uLmxlbmd0aCA+IDApIHsKICAgICAgICAvLyDliKTmlq3mmK/lkKblrZjlnKjli77pgInov4fnmoTmlbDmja4KICAgICAgICB0aGlzLnBpY3RydWVMaXN0LmZvckVhY2goKHJvdykgPT4gewogICAgICAgICAgLy8g6I635Y+W5pWw5o2u5YiX6KGo5o6l5Y+j6K+35rGC5Yiw55qE5pWw5o2uCiAgICAgICAgICB0aGlzLm11bHRpcGxlU2VsZWN0aW9uLmZvckVhY2goKGl0ZW0pID0+IHsKICAgICAgICAgICAgLy8g5Yu+6YCJ5Yiw55qE5pWw5o2uCiAgICAgICAgICAgIGlmIChyb3cuYXR0X2lkID09PSBpdGVtLmF0dF9pZCkgewogICAgICAgICAgICAgIC8vIHRoaXMuJHJlZnMudGFibGUudG9nZ2xlUm93U2VsZWN0aW9uKGl0ZW0sIHRydWUpOyAvLyDoi6XmnInph43lkIjvvIzliJnlm57mmL7or6XmnaHmlbDmja4KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRSb3dLZXkocm93KSB7CiAgICAgIHJldHVybiByb3cuYXR0X2lkOwogICAgfSwKICAgIC8v5a+56LGh5pWw57uE5Y676YeN77ybCiAgICB1bmlxdWUoYXJyKSB7CiAgICAgIGxldCByZXN1bHQgPSBhcnIucmVkdWNlKChhY2MsIGN1cnIpID0+IHsKICAgICAgICBjb25zdCB4ID0gYWNjLmZpbmQoKGl0ZW0pID0+IGl0ZW0uYXR0X2lkID09PSBjdXJyLmF0dF9pZCk7CiAgICAgICAgaWYgKCF4KSB7CiAgICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChbY3Vycl0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gYWNjOwogICAgICAgIH0KICAgICAgfSwgW10pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSwKICAgIC8vICDpgInkuK3mn5DkuIDooYwKICAgIGhhbmRsZVNlbGVjdFJvdyhzZWxlY3Rpb24pIHsKICAgICAgbGV0IGFyciA9IHRoaXMudW5pcXVlKHNlbGVjdGlvbik7CiAgICAgIGNvbnN0IHVuaXF1ZUFyciA9IFtdOwogICAgICBjb25zdCBpZHMgPSBbXTsKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCBpdGVtID0gYXJyW2ldOwogICAgICAgIGlmICghaWRzLmluY2x1ZGVzKGl0ZW0uYXR0X2lkKSkgewogICAgICAgICAgdW5pcXVlQXJyLnB1c2goaXRlbSk7CiAgICAgICAgICBpZHMucHVzaChpdGVtLmF0dF9pZCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuaWRzID0gaWRzOwogICAgICB0aGlzLm11bHRpcGxlU2VsZWN0aW9uID0gdW5pcXVlQXJyOwogICAgfSwKICAgIHBhZ2VDaGFuZ2UoaW5kZXgpIHsKICAgICAgdGhpcy5maWxlRGF0YS5wYWdlID0gaW5kZXg7CiAgICAgIHRoaXMuZ2V0RmlsZUxpc3QoKTsKICAgICAgdGhpcy5jaGVja1BpY0xpc3QgPSBbXTsKICAgIH0sCiAgICAvLyDmlrDlu7rliIbnsbvooajljZUKICAgIGdldEZyb20oKSB7CiAgICAgIHRoaXMuJG1vZGFsRm9ybShjcmVhdGVBcGkoeyBpZDogdGhpcy50cmVlSWQsIHR5cGU6IDEgfSkpLnRoZW4oKHJlcykgPT4gewogICAgICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDkuIrkvKDkuYvliY0KICAgIGJlZm9yZVVwbG9hZChmaWxlKSB7CiAgICAgIC8vIGlmIChmaWxlLnNpemUgPiAyMDk3MTUyKSB7CiAgICAgIC8vICAgdGhpcy4kbWVzc2FnZS5lcnJvcihmaWxlLm5hbWUgKyAi5aSn5bCP6LaF6L+HMk0hIik7CiAgICAgIC8vIH0gZWxzZQogICAgICBpZiAoIS9pbWFnZVwvXHcrLy50ZXN0KGZpbGUudHlwZSkpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfor7fkuIrkvKDku6VqcGfjgIFqcGVn44CBcG5n562J57uT5bC+55qE6KeG6aKR5paH5Lu2Jyk7IC8vRmlsZUV4dC50b0xvd2VyQ2FzZSgpCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHRoaXMudXBsb2FkRGF0YSA9IHsKICAgICAgICBwaWQ6IHRoaXMudHJlZUlkLAogICAgICB9OwogICAgICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHJldHVybiBwcm9taXNlOwogICAgfSwKICAgIC8vIOS4iuS8oOaIkOWKnwogICAgaGFuZGxlU3VjY2VzcyhyZXMsIGZpbGUsIGZpbGVMaXN0KSB7CiAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgdGhpcy5maWxlRGF0YS5wYWdlID0gMTsKICAgICAgICB0aGlzLmdldEZpbGVMaXN0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWFs+mXrQogICAgY2FuY2VsKCkgewogICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VDYW5jZWwnKTsKICAgIH0sCiAgICAvLyDpgInkuK3op4bpopEKICAgIGNoYW5nSW1hZ2UoaXRlbSwgaW5kZXgsIHJvdykgewogICAgICBsZXQgYWN0aXZlSW5kZXggPSAwOwogICAgICBpZiAoIWl0ZW0uaXNTZWxlY3QpIHsKICAgICAgICBpdGVtLmlzU2VsZWN0ID0gdHJ1ZTsKICAgICAgICB0aGlzLmNoZWNrUGljTGlzdC5wdXNoKGl0ZW0pOwogICAgICB9IGVsc2UgewogICAgICAgIGl0ZW0uaXNTZWxlY3QgPSBmYWxzZTsKICAgICAgICB0aGlzLmNoZWNrUGljTGlzdC5tYXAoKGVsLCBpbmRleCkgPT4gewogICAgICAgICAgaWYgKGVsLmF0dF9pZCA9PSBpdGVtLmF0dF9pZCkgewogICAgICAgICAgICBhY3RpdmVJbmRleCA9IGluZGV4OwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHRoaXMuY2hlY2tQaWNMaXN0LnNwbGljZShhY3RpdmVJbmRleCwgMSk7CiAgICAgIH0KCiAgICAgIHRoaXMuaWRzID0gW107CiAgICAgIHRoaXMuY2hlY2tQaWNMaXN0Lm1hcCgoaXRlbSwgaSkgPT4gewogICAgICAgIHRoaXMuaWRzLnB1c2goaXRlbS5hdHRfaWQpOwogICAgICB9KTsKICAgICAgdGhpcy5waWN0cnVlTGlzdC5tYXAoKGVsLCBpKSA9PiB7CiAgICAgICAgaWYgKGVsLmlzU2VsZWN0KSB7CiAgICAgICAgICB0aGlzLmNoZWNrUGljTGlzdC5maWx0ZXIoKGVsMiwgaikgPT4gewogICAgICAgICAgICBpZiAoZWwuYXR0X2lkID09IGVsMi5hdHRfaWQpIHsKICAgICAgICAgICAgICBlbC5udW0gPSBqICsgMTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVsLm51bSA9IDA7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDngrnlh7vkvb/nlKjpgInkuK3op4bpopEKICAgIGNoZWNrUGljcygpIHsKICAgICAgY29uc29sZS5sb2codGhpcy5jaGVja1BpY0xpc3QsICd0aGlzLmNoZWNrUGljTGlzdCcsIHRoaXMuaXNDaG9pY2UpOwogICAgICBpZiAodGhpcy5pc0Nob2ljZSA9PT0gJ29uZScpIHsKICAgICAgICBpZiAodGhpcy5jaGVja1BpY0xpc3QubGVuZ3RoID4gMSkgcmV0dXJuIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5pyA5aSa5Y+q6IO96YCJ5LiA5byg6KeG6aKRJyk7CiAgICAgICAgdGhpcy4kZW1pdCgnZ2V0VmlkZW8nLCB0aGlzLmNoZWNrUGljTGlzdFswXS5hdHRfZGlyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsZXQgbWF4TGVuZ3RoID0gdGhpcy4kcm91dGUucXVlcnkubWF4TGVuZ3RoOwogICAgICAgIGlmIChtYXhMZW5ndGggIT0gdW5kZWZpbmVkICYmIHRoaXMuY2hlY2tQaWNMaXN0Lmxlbmd0aCA+IE51bWJlcihtYXhMZW5ndGgpKQogICAgICAgICAgcmV0dXJuIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5pyA5aSa5Y+q6IO96YCJJyArIG1heExlbmd0aCArICflvKDop4bpopEnKTsKICAgICAgICB0aGlzLiRlbWl0KCdnZXRQaWNEJywgdGhpcy5jaGVja1BpY0xpc3QpOwogICAgICAgIHRoaXMuJGVtaXQoJ2dldFZpZGVvJywgdGhpcy5jaGVja1BpY0xpc3QpOwogICAgICB9CiAgICB9LAogICAgZWRpdE5hbWUoaXRlbSkgewogICAgICBsZXQgaXQgPSBpdGVtLnJlYWxfbmFtZS5zcGxpdCgnLicpOwogICAgICBsZXQgaXQxID0gaXRbMV0gPT0gdW5kZWZpbmVkID8gW10gOiBpdFsxXTsKICAgICAgbGV0IGxlbiA9IGl0WzBdLmxlbmd0aCArIGl0MS5sZW5ndGg7CiAgICAgIGl0ZW0uZWRpdE5hbWUgPSBsZW4gPCAxMCA/IGl0ZW0ucmVhbF9uYW1lIDogaXRlbS5yZWFsX25hbWUuc3Vic3RyKDAsIDQpICsgJy4uLicgKyBpdGVtLnJlYWxfbmFtZS5zdWJzdHIoLTUsIDUpOwogICAgfSwKICAgIC8vIOS/ruaUueinhumikeaWh+Wtl+S4iuS8oAogICAgYmluZFR4dChpdGVtKSB7CiAgICAgIGlmIChpdGVtLnJlYWxfbmFtZSA9PSAnJykgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivt+Whq+WGmeWGheWuuScpOwogICAgICB9CiAgICAgIGZpbGVVcGRhdGVBcGkoaXRlbS5hdHRfaWQsIHsKICAgICAgICByZWFsX25hbWU6IGl0ZW0ucmVhbF9uYW1lLAogICAgICB9KQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuZWRpdE5hbWUoaXRlbSk7CiAgICAgICAgICBpdGVtLmlzRWRpdCA9IGZhbHNlOwogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnJvci5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICB9LAp9Owo="},null]}