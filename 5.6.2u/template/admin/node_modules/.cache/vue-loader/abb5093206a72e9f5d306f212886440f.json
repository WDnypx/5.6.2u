{"remainingRequest":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\system\\backendRouting\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\system\\backendRouting\\index.vue","mtime":1731313973100},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1753254256661},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1753254258567},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1753254260598}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7CiAgcm91dGVDYXRlLAogIHN5bmNSb3V0ZSwKICByb3V0ZUxpc3QsCiAgcm91dGVEZXQsCiAgcm91dGVTYXZlLAogIGludGVyZmFjZUVkaXROYW1lLAogIHJvdXRlRGVsLAogIHJvdXRlRWRpdCwKICByb3V0ZUNhdGVEZWwsCn0gZnJvbSAnQC9hcGkvc3lzdGVtQmFja2VuZFJvdXRpbmcnOwppbXBvcnQgeyBWdWVUcmVlTGlzdCwgVHJlZSwgVHJlZU5vZGUgfSBmcm9tICd2dWUtdHJlZS1saXN0JzsKaW1wb3J0IGRlYnVnZ2luZyBmcm9tICcuL2RlYnVnZ2luZy52dWUnOwoKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzeXN0ZW1PdXRJbnRlcmZhY2UnLAogIGNvbXBvbmVudHM6IHsKICAgIFZ1ZVRyZWVMaXN0LAogICAgZGVidWdnaW5nLAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHZhbHVlOiAnJywKICAgICAgaXNFZGl0OiBmYWxzZSwKICAgICAgbmFtZU1vZGFsOiBmYWxzZSwKICAgICAgZGVidWdnaW5nTW9kYWw6IGZhbHNlLAogICAgICBmb3JtVmFsaWRhdGU6IHt9LAogICAgICBncmlkOiB7CiAgICAgICAgeGw6IDcsCiAgICAgICAgbGc6IDcsCiAgICAgICAgbWQ6IDEyLAogICAgICAgIHNtOiAyNCwKICAgICAgICB4czogMjQsCiAgICAgIH0sCiAgICAgIHJ1bGVWYWxpZGF0ZTogewogICAgICAgIHRpdGxlOiBbeyBtZXNzYWdlOiAn6K+36L6T5YWl5q2j56Gu55qE5o+P6L+wICjkuI3og73lpJrkuo4yMDDkvY3mlbApJywgdHJpZ2dlcjogJ2JsdXInLCBtYXg6IDIwMCB9XSwKICAgICAgfSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGludFR5cGVMaXN0OiBbCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdzdHJpbmcnLAogICAgICAgICAgbGFiZWw6ICdTdHJpbmcnLAogICAgICAgIH0sCiAgICAgICAgLy8gewogICAgICAgIC8vICAgdmFsdWU6ICdhcnJheScsCiAgICAgICAgLy8gICBsYWJlbDogJ0FycmF5JywKICAgICAgICAvLyB9LAogICAgICAgIC8vIHsKICAgICAgICAvLyAgIHZhbHVlOiAnb2JqZWN0JywKICAgICAgICAvLyAgIGxhYmVsOiAnT2JqZWN0JywKICAgICAgICAvLyB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnbnVtYmVyJywKICAgICAgICAgIGxhYmVsOiAnTnVtYmVyJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnYm9vbGVhbicsCiAgICAgICAgICBsYWJlbDogJ0Jvb2xlYW4nLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdudWxsJywKICAgICAgICAgIGxhYmVsOiAnTnVsbCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ2FueScsCiAgICAgICAgICBsYWJlbDogJ0FueScsCiAgICAgICAgfSwKICAgICAgXSwKICAgICAgdHlwZUxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ3N0cmluZycsCiAgICAgICAgICBsYWJlbDogJ1N0cmluZycsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ2FycmF5JywKICAgICAgICAgIGxhYmVsOiAnQXJyYXknLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdvYmplY3QnLAogICAgICAgICAgbGFiZWw6ICdPYmplY3QnLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdudW1iZXInLAogICAgICAgICAgbGFiZWw6ICdOdW1iZXInLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdib29sZWFuJywKICAgICAgICAgIGxhYmVsOiAnQm9vbGVhbicsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ251bGwnLAogICAgICAgICAgbGFiZWw6ICdOdWxsJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnYW55JywKICAgICAgICAgIGxhYmVsOiAnQW55JywKICAgICAgICB9LAogICAgICBdLAogICAgICByZXF1ZXN0VHlwZUxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ0dFVCcsCiAgICAgICAgICBsYWJlbDogJ0dFVCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ1BPU1QnLAogICAgICAgICAgbGFiZWw6ICdQT1NUJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnREVMRVRFJywKICAgICAgICAgIGxhYmVsOiAnREVMRVRFJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnUFVUJywKICAgICAgICAgIGxhYmVsOiAnUFVUJywKICAgICAgICB9LAogICAgICBdLAogICAgICBjb250ZXh0RGF0YTogbnVsbCwgLy/lt6bkvqflr7zoiKrlj7PplK7ngrnlh7vmmK/kuqfnlJ/nmoTmlbDmja7lr7nosaEKICAgICAgdHJlZURhdGE6IHVuZGVmaW5lZCwKICAgICAgYnV0dG9uUHJvcHM6IHsKICAgICAgICB0eXBlOiAnZGVmYXVsdCcsCiAgICAgICAgc2l6ZTogJ3NtYWxsJywKICAgICAgfSwKICAgICAgbWV0aG9kQ29sb3I6ICcjZmZmJywKICAgICAgYXBpVHlwZTogJ2FkbWluYXBpJywKICAgICAgcGFyYW1zSWQ6IDAsCiAgICAgIHdpbkxvYWRpbmc6IGZhbHNlLAogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBbJ2Zvcm1WYWxpZGF0ZS5tZXRob2QnXTogewogICAgICBkZWVwOiB0cnVlLAogICAgICBoYW5kbGVyKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgICAgaWYgKG5ld1ZhbCkgewogICAgICAgICAgbGV0IG1ldGhvZCA9IG5ld1ZhbC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgaWYgKG1ldGhvZCA9PSAnR0VUJykgewogICAgICAgICAgICB0aGlzLm1ldGhvZENvbG9yID0gJyM2MWFmZmUnOwogICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIHRoaXMubWV0aG9kQ29sb3IgPSAnIzQ5Y2M5MCc7CiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PSAnUFVUJykgewogICAgICAgICAgICB0aGlzLm1ldGhvZENvbG9yID0gJyNmY2ExMzAnOwogICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ0RFTCcgfHwgbWV0aG9kID09ICdERUxFVEUnKSB7CiAgICAgICAgICAgIHRoaXMubWV0aG9kQ29sb3IgPSAnI2Y5M2UzZSc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgfSwKICAgIGFwaVR5cGUobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwpIHsKICAgICAgICB0aGlzLndpbkxvYWRpbmcgPSB0cnVlOwogICAgICAgIHRoaXMuZ2V0SW50ZXJmYWNlTGlzdCgnb25lJyk7CiAgICAgIH0KICAgIH0sCiAgICBpc0VkaXQobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwpIHsKICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZV9leGFtcGxlLm1hcCgoZSkgPT4gewogICAgICAgICAgZS5kYXRhID0gSlNPTi5zdHJpbmdpZnkoZS5kYXRhKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZV9leGFtcGxlLm1hcCgoZSkgPT4gewogICAgICAgICAgZS5kYXRhID0gSlNPTi5wYXJzZShlLmRhdGEpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKCdtZWRpYScsIFsnaXNNb2JpbGUnXSksCiAgICBsYWJlbFdpZHRoKCkgewogICAgICByZXR1cm4gdGhpcy5pc01vYmlsZSA/IHVuZGVmaW5lZCA6ICc1MHB4JzsKICAgIH0sCiAgICBsYWJlbFBvc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pc01vYmlsZSA/ICd0b3AnIDogJ3JpZ2h0JzsKICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRJbnRlcmZhY2VMaXN0KCdvbmUnKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHN5bmNSb3V0ZSgpIHsKICAgICAgdGhpcy4kbXNnYm94KHsKICAgICAgICB0aXRsZTogJ+eri+WNs+WQjOatpScsCiAgICAgICAgbWVzc2FnZTogJ+WQjOatpeS5i+WQju+8jOi3r+eUseaWh+S7tuS4reaWsOWinueahOaOpeWPo+a3u+WKoOWIsOaOpeWPo+WIl+ihqOS4re+8jOi3r+eUseaWh+S7tuS4reWIoOmZpOeahOi3r+eUseS8muWQjOatpeeahOWcqOaOpeWPo+WIl+ihqOS4reWIoOmZpCcsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsCiAgICAgICAgaWNvbkNsYXNzOiAnZWwtaWNvbi13YXJuaW5nJywKICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6ICdidG4tY3VzdG9tLWNhbmNlbCcsCiAgICAgIH0pCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgc3luY1JvdXRlKHRoaXMuYXBpVHlwZSkudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgIHRoaXMuZ2V0SW50ZXJmYWNlTGlzdCgnb25lJyk7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTsKICAgIH0sCiAgICBkZWJ1Z2dpbmcoKSB7CiAgICAgIHRoaXMuZGVidWdnaW5nTW9kYWwgPSB0cnVlOwogICAgfSwKICAgIG9uQ2xpY2tzc3MoZSkge30sCiAgICBtZXRob2RzQ29sb3IobmV3VmFsKSB7CiAgICAgIGxldCBtZXRob2QgPSBuZXdWYWwudG9VcHBlckNhc2UoKTsKICAgICAgaWYgKG1ldGhvZCA9PSAnR0VUJykgewogICAgICAgIHJldHVybiAnIzYxYWZmZSc7CiAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09ICdQT1NUJykgewogICAgICAgIHJldHVybiAnIzQ5Y2M5MCc7CiAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09ICdQVVQnKSB7CiAgICAgICAgcmV0dXJuICcjZmNhMTMwJzsKICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ0RFTCcgfHwgbWV0aG9kID09ICdERUxFVEUnKSB7CiAgICAgICAgcmV0dXJuICcjZjkzZTNlJzsKICAgICAgfQogICAgfSwKICAgIGluc2VydEJlZm9yZShwYXJhbXMpIHt9LAogICAgaW5zZXJ0QWZ0ZXIocGFyYW1zKSB7fSwKICAgIG1vdmVJbnRvKHBhcmFtcykge30sCiAgICBhc3luYyBhZGRUYWJsZURhdGEoKSB7CiAgICAgIGNvbnN0IHsgcm93OiBkYXRhIH0gPSBhd2FpdCAkdGFibGUuaW5zZXJ0QXQobmV3Um93LCAtMSk7CiAgICAgIGF3YWl0ICR0YWJsZS5zZXRBY3RpdmVDZWxsKGRhdGEsICduYW1lJyk7CiAgICB9LAogICAgZ2V0SW50ZXJmYWNlTGlzdChkaXNrX3R5cGUpIHsKICAgICAgdHJ5IHsKICAgICAgICByb3V0ZUxpc3QodGhpcy5hcGlUeXBlKQogICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICBpZiAocmVzLmRhdGEubGVuZ3RoKSB7CiAgICAgICAgICAgICAgcmVzLmRhdGFbMF0uZXhwYW5kID0gZmFsc2U7CiAgICAgICAgICAgICAgdGhpcy50cmVlRGF0YSA9IG5ldyBUcmVlKHJlcy5kYXRhKTsKICAgICAgICAgICAgICBsZXQgaTsKICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKGRpc2tfdHlwZSkgewogICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgcmVzLmRhdGFbMF0uY2hpbGRyZW4gJiYKICAgICAgICAgICAgICAgICAgICByZXMuZGF0YVswXS5jaGlsZHJlblswXS5jaGlsZHJlbiAmJgogICAgICAgICAgICAgICAgICAgIHJlcy5kYXRhWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuLmxlbmd0aAogICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudnRsLWljb24tY2FyZXQtcmlnaHQnKVswXS5jbGljaygpOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52dGwtaWNvbi1jYXJldC1yaWdodCcpWzFdLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgaSA9IHJlcy5kYXRhWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52dGwtaWNvbi1jYXJldC1yaWdodCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgaSA9IHJlcy5kYXRhWzBdLmNoaWxkcmVuWzBdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHRoaXMub25DbGljayhpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyB0aGlzLiRyZWZzLnRyZWVMaXN0LmNsZWFyKCk7CiAgICAgICAgICAgICAgdGhpcy50cmVlRGF0YSA9IG5ldyBUcmVlKHt9KTsKICAgICAgICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZSA9IHt9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMud2luTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICAgIHRoaXMud2luTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgb25DbGljayhwYXJhbXMpIHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAocGFyYW1zLm1ldGhvZCkgewogICAgICAgICAgdGhpcy5pc0VkaXQgPSBmYWxzZTsKICAgICAgICAgIHRoaXMucGFyYW1zSWQgPSBwYXJhbXMuaWQ7CiAgICAgICAgICB0aGlzLmdldFJvdGVEYXRhKHBhcmFtcy5pZCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnJvcikge30KICAgIH0sCiAgICBnZXRSb3RlRGF0YShpZCkgewogICAgICByb3V0ZURldChpZCkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZSA9IHJlcy5kYXRhOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgYXN5bmMgaGFuZGxlU3VibWl0KCkgewogICAgICBpZiAoIXRoaXMuZm9ybVZhbGlkYXRlLm5hbWUpIHsKICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7fovpPlhaXmjqXlj6PlkI3np7AnKTsKICAgICAgfSBlbHNlIGlmICghdGhpcy5mb3JtVmFsaWRhdGUubWV0aG9kKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6K+35rGC57G75Z6LJyk7CiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZm9ybVZhbGlkYXRlLnBhdGgpIHsKICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7fovpPlhaXot6/nlLHlnLDlnYAnKTsKICAgICAgfQogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXF1ZXN0ID0gYXdhaXQgdGhpcy4kcmVmcy5ib2R5VGFibGUuZ2V0VGFibGVEYXRhKCkudGFibGVEYXRhOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZSA9IGF3YWl0IHRoaXMuJHJlZnMucmVzVGFibGUuZ2V0VGFibGVEYXRhKCkudGFibGVEYXRhOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5lcnJvcl9jb2RlID0gYXdhaXQgdGhpcy4kcmVmcy5jb2RlVGFibGUuZ2V0VGFibGVEYXRhKCkudGFibGVEYXRhOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5oZWFkZXIgPSBhd2FpdCB0aGlzLiRyZWZzLmhlYWRUYWJsZS5nZXRUYWJsZURhdGEoKS50YWJsZURhdGE7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnF1ZXJ5ID0gYXdhaXQgdGhpcy4kcmVmcy54VGFibGUuZ2V0VGFibGVEYXRhKCkudGFibGVEYXRhOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5hcGlUeXBlID0gdGhpcy5hcGlUeXBlOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZV9leGFtcGxlLm1hcCgoZSkgPT4gewogICAgICAgIGUuZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTsKICAgICAgfSk7CiAgICAgIGF3YWl0IHJvdXRlU2F2ZSh0aGlzLmZvcm1WYWxpZGF0ZSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB0aGlzLmdldFJvdGVEYXRhKHRoaXMucGFyYW1zSWQpOwogICAgICAgICAgdGhpcy5pc0VkaXQgPSBmYWxzZTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIGFzeW5jIGluc2VydEV2ZW50KHR5cGUpIHsKICAgICAgY29uc3QgJHRhYmxlID0gdGhpcy4kcmVmc1t0eXBlXTsKICAgICAgbGV0IG5ld1JvdzsKICAgICAgaWYgKHR5cGUgPT0gJ3hUYWJsZScpIHsKICAgICAgICBuZXdSb3cgPSB7CiAgICAgICAgICBhdHRyaWJ1dGU6ICcnLAogICAgICAgICAgdHlwZTogJycsCiAgICAgICAgICBtdXN0OiAwLAogICAgICAgICAgdHJpcDogJycsCiAgICAgICAgfTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdyZXNUYWJsZScpIHsKICAgICAgICBuZXdSb3cgPSB7CiAgICAgICAgICBhdHRyaWJ1dGU6ICcnLAogICAgICAgICAgdHlwZTogJycsCiAgICAgICAgICB0cmlwOiAnJywKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIG5ld1JvdyA9IHsKICAgICAgICAgIGNvZGU6ICcnLAogICAgICAgICAgdmFsdWU6ICcnLAogICAgICAgICAgc29sdXRpb246ICcnLAogICAgICAgIH07CiAgICAgIH0KICAgICAgLy8gJHRhYmxlLmluc2VydChuZXdSb3cpLnRoZW4oKHsgcm93IH0pID0+ICR0YWJsZS5zZXRFZGl0Um93KHJvdywgLTEpKTsKICAgICAgY29uc3QgeyByb3c6IGRhdGEgfSA9IGF3YWl0ICR0YWJsZS5pbnNlcnRBdChuZXdSb3csIC0xKTsKICAgICAgYXdhaXQgJHRhYmxlLnNldEFjdGl2ZUNlbGwoZGF0YSwgJ25hbWUnKTsKICAgIH0sCiAgICBhc3luYyBpbnNlcnRSb3coY3VyclJvdywgdHlwZSkgewogICAgICBjb25zdCAkdGFibGUgPSB0aGlzLiRyZWZzW3R5cGVdOwogICAgICAvLyDlpoLmnpwgbnVsbCDliJnmj5LlhaXliLDnm67moIfoioLngrnpobbpg6gKICAgICAgLy8g5aaC5p6cIC0xIOWImeaPkuWFpeWIsOebruagh+iKgueCueW6lemDqAogICAgICAvLyDlpoLmnpwgcm93IOWImeacieaPkuWFpeWIsOaViOeahOebruagh+iKgueCueivpeihjOeahOS9jee9rgogICAgICBsZXQgcmVjb3JkOwogICAgICBpZiAodHlwZSA9PSAneFRhYmxlJykgewogICAgICAgIHJlY29yZCA9IHsKICAgICAgICAgIGF0dHJpYnV0ZTogJycsCiAgICAgICAgICB0eXBlOiAnJywKICAgICAgICAgIG11c3Q6IDAsCiAgICAgICAgICB0cmlwOiAnJywKICAgICAgICAgIGlkOiBEYXRlLm5vdygpLAogICAgICAgICAgcGFyZW50SWQ6IGN1cnJSb3cuaWQsIC8vIOmcgOimgeaMh+WumueItuiKgueCue+8jOiHquWKqOaPkuWFpeivpeiKgueCueS4rQogICAgICAgIH07CiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncmVzVGFibGUnKSB7CiAgICAgICAgcmVjb3JkID0gewogICAgICAgICAgYXR0cmlidXRlOiAnJywKICAgICAgICAgIHR5cGU6ICcnLAogICAgICAgICAgdHJpcDogJycsCiAgICAgICAgICBpZDogRGF0ZS5ub3coKSwKICAgICAgICAgIHBhcmVudElkOiBjdXJyUm93LmlkLCAvLyDpnIDopoHmjIflrprniLboioLngrnvvIzoh6rliqjmj5LlhaXor6XoioLngrnkuK0KICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHJlY29yZCA9IHsKICAgICAgICAgIGNvZGU6ICcnLAogICAgICAgICAgdmFsdWU6ICcnLAogICAgICAgICAgc29sdXRpb246ICcnLAogICAgICAgICAgaWQ6IERhdGUubm93KCksCiAgICAgICAgICBwYXJlbnRJZDogY3VyclJvdy5pZCwgLy8g6ZyA6KaB5oyH5a6a54i26IqC54K577yM6Ieq5Yqo5o+S5YWl6K+l6IqC54K55LitCiAgICAgICAgfTsKICAgICAgfQogICAgICBjb25zdCB7IHJvdzogbmV3Um93IH0gPSBhd2FpdCAkdGFibGUuaW5zZXJ0QXQocmVjb3JkLCAtMSk7CiAgICAgIGF3YWl0ICR0YWJsZS5zZXRUcmVlRXhwYW5kKGN1cnJSb3csIHRydWUpOyAvLyDlsIbniLboioLngrnlsZXlvIAKICAgICAgYXdhaXQgJHRhYmxlLnNldEFjdGl2ZVJvdyhuZXdSb3cpOyAvLyDmj5LlhaXlrZDoioLngrkKICAgIH0sCiAgICBhc3luYyByZW1vdmVSb3cocm93LCB0eXBlKSB7CiAgICAgIGNvbnN0ICR0YWJsZSA9IHRoaXMuJHJlZnNbdHlwZV07CiAgICAgIGF3YWl0ICR0YWJsZS5yZW1vdmUocm93KTsKICAgIH0sCiAgICAvLyDkv67mlLnlkI3lrZcKICAgIGFkZCgpIHsKICAgICAgdGhpcy52YWx1ZSA9ICcnOwogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5pZCA9IDA7CiAgICAgIHRoaXMubmFtZU1vZGFsID0gdHJ1ZTsKICAgIH0sCiAgICAvLyDngrnlh7voj5zljZUKICAgIGNsaWNrTWVudShuYW1lLCBwYXJhbXMpIHsKICAgICAgaWYgKG5hbWUgPT0gMSkgewogICAgICAgIHRoaXMuZm9ybVZhbGlkYXRlID0ge307CiAgICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuY2F0ZV9pZCA9IHBhcmFtcyA/IHBhcmFtcy5pZCA6IDA7CiAgICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuaWQgPSAwOwogICAgICAgIHRoaXMuaXNFZGl0ID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmIChuYW1lID09IDIpIHsKICAgICAgICAvLyB0aGlzLnZhbHVlID0gcGFyYW1zLm5hbWUgfHwgJyc7CiAgICAgICAgLy8gdGhpcy5mb3JtVmFsaWRhdGUuY2F0ZV9pZCA9IHBhcmFtcyA/IHBhcmFtcy5pZCA6IDA7CiAgICAgICAgLy8gdGhpcy5uYW1lTW9kYWwgPSB0cnVlOwogICAgICAgIC8vIHRoaXMub25FZGl0KHBhcmFtcyk7CiAgICAgICAgdGhpcy4kbW9kYWxGb3JtKHJvdXRlRWRpdChwYXJhbXMuaWQsIHRoaXMuYXBpVHlwZSkpLnRoZW4oKCkgPT4gdGhpcy5nZXRJbnRlcmZhY2VMaXN0KCkpOwogICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gMykgewogICAgICAgIHRoaXMub25EZWwocGFyYW1zKTsKICAgICAgfSBlbHNlIGlmIChuYW1lID09IDQpIHsKICAgICAgICAvLyB0aGlzLmFkZCgpOwogICAgICAgIHRoaXMuJG1vZGFsRm9ybShyb3V0ZUNhdGUodGhpcy5hcGlUeXBlKSkudGhlbigoKSA9PiB0aGlzLmdldEludGVyZmFjZUxpc3QoKSk7CiAgICAgIH0KICAgIH0sCgogICAgYWRkRmFjKHBhcmFtcykgewogICAgICB0aGlzLmZvcm1WYWxpZGF0ZSA9IHsKICAgICAgICBpZDogcGFyYW1zID8gcGFyYW1zLmlkIDogMCwKICAgICAgfTsKICAgICAgdGhpcy5pc0VkaXQgPSB0cnVlOwogICAgfSwKICAgIGFzeW5jT0soKSB7CiAgICAgIGxldCBkYXRhID0gewogICAgICAgIGlkOiB0aGlzLmZvcm1WYWxpZGF0ZS5pZCB8fCAwLAogICAgICAgIHR5cGU6IDAsCiAgICAgICAgbmFtZTogdGhpcy52YWx1ZSwKICAgICAgfTsKICAgICAgcm91dGVTYXZlKGRhdGEpCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgdGhpcy5nZXRJbnRlcmZhY2VMaXN0KCk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvL+S+p+i+ueagj+WPs+mUrueCueWHu+S6i+S7tgogICAgaGFuZGxlQ29udGV4dE1lbnUoZGF0YSwgZXZlbnQsIHBvc2l0aW9uKSB7CiAgICAgIHBvc2l0aW9uLmxlZnQgPSBOdW1iZXIocG9zaXRpb24ubGVmdC5zbGljZSgwLCAtMikpICsgNzUgKyAncHgnOwogICAgICB0aGlzLmNvbnRleHREYXRhID0gZGF0YTsKICAgIH0sCiAgICBoYW5kbGVDb250ZXh0Q3JlYXRlRm9sZGVyKCkge30sCiAgICBoYW5kbGVDb250ZXh0Q3JlYXRlRmlsZSgpIHt9LAogICAgLy8g6Ieq5a6a5LmJ5pi+56S6CiAgICByZW5kZXJDb250ZW50KGgsIHsgcm9vdCwgbm9kZSwgZGF0YSB9KSB7CiAgICAgIGxldCB0aGF0ID0gdGhpczsKICAgICAgcmV0dXJuIGgoCiAgICAgICAgJ3NwYW4nLAogICAgICAgIHsKICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLAogICAgICAgICAgICB3aWR0aDogJzEwMCUnLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIGgoJ3NwYW4nLCBbCiAgICAgICAgICAgIGgocmVzb2x2ZUNvbXBvbmVudCgnSWNvbicpLCB7CiAgICAgICAgICAgICAgdHlwZTogJ2lvcy1wYXBlci1vdXRsaW5lJywKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc4cHgnLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBoKCdzcGFuJywgZGF0YS50aXRsZSksCiAgICAgICAgICBdKSwKICAgICAgICAgIGgoCiAgICAgICAgICAgICdzcGFuJywKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJywKICAgICAgICAgICAgICAgIGZsb2F0OiAncmlnaHQnLAogICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICczMnB4JywKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgaChyZXNvbHZlQ29tcG9uZW50KCdCdXR0b24nKSwgewogICAgICAgICAgICAgICAgLi4udGhpcy5idXR0b25Qcm9wcywKICAgICAgICAgICAgICAgIGljb246ICdpb3MtYWRkJywKICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAnOHB4JywKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKGRhdGEpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBoKHJlc29sdmVDb21wb25lbnQoJ0J1dHRvbicpLCB7CiAgICAgICAgICAgICAgICAuLi50aGlzLmJ1dHRvblByb3BzLAogICAgICAgICAgICAgICAgaWNvbjogJ2lvcy1yZW1vdmUnLAogICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4gewogICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShyb290LCBub2RlLCBkYXRhKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0sCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICk7CiAgICB9LAogICAgLyoqCiAgICAgKiDkvqfovrnmoI/ngrnlh7vkuovku7YKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAgICAgKi8KICAgIGNsaWNrRGlyKGRhdGEsIHJvb3QsIG5vZGUpIHsKICAgICAgbGV0IHRoYXQgPSB0aGlzOwogICAgICB0aGF0Lm5hdkl0ZW0gPSBkYXRhOwogICAgICB0aGF0LnBhdGhuYW1lID0gZGF0YS5wYXRobmFtZTsKICAgIH0sCiAgICBhcHBlbmQoZGF0YSkgewogICAgICBjb25zdCBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW4gfHwgW107CiAgICAgIGNoaWxkcmVuLnB1c2goewogICAgICAgIHRpdGxlOiAnYXBwZW5kZWQgbm9kZScsCiAgICAgICAgZXhwYW5kOiB0cnVlLAogICAgICB9KTsKICAgICAgdGhpcy4kc2V0KGRhdGEsICdjaGlsZHJlbicsIGNoaWxkcmVuKTsKICAgIH0sCiAgICByZW1vdmUocm9vdCwgbm9kZSwgZGF0YSkgewogICAgICBjb25zdCBwYXJlbnRLZXkgPSByb290LmZpbmQoKGVsKSA9PiBlbCA9PT0gbm9kZSkucGFyZW50OwogICAgICBjb25zdCBwYXJlbnQgPSByb290LmZpbmQoKGVsKSA9PiBlbC5ub2RlS2V5ID09PSBwYXJlbnRLZXkpLm5vZGU7CiAgICAgIGNvbnN0IGluZGV4ID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2YoZGF0YSk7CiAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSwKICAgIG9uTW91c2VPdmVyKHJvb3QsIG5vZGUsIGRhdGEsIGUsIGQpIHsKICAgICAgY29uc29sZS5sb2cocm9vdCwgbm9kZSwgZGF0YSk7CiAgICB9LAogICAgLy8KICAgIG9uRGVsKG5vZGUpIHsKICAgICAgbGV0IG1ldGhvZCA9IG5vZGUuY2F0ZV9pZCA/IHJvdXRlRGVsIDogcm91dGVDYXRlRGVsOwogICAgICB0aGlzLiRtc2dib3goewogICAgICAgIHRpdGxlOiAn5o+Q56S6JywKICAgICAgICBtZXNzYWdlOiAn5Yig6Zmk5ZCO5peg5rOV5oGi5aSN77yM6K+356Gu6K6k5ZCO5Yig6Zmk77yBJywKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICBpY29uQ2xhc3M6ICdlbC1pY29uLXdhcm5pbmcnLAogICAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogJ2J0bi1jdXN0b20tY2FuY2VsJywKICAgICAgfSkKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICBtZXRob2Qobm9kZS5pZCkKICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgICAgICBub2RlLnJlbW92ZSgpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTsKICAgIH0sCgogICAgb25DaGFuZ2VOYW1lKHBhcmFtcykgewogICAgICBpZiAocGFyYW1zLmV2ZW50VHlwZSA9PSAnYmx1cicpIHsKICAgICAgICBsZXQgZGF0YSA9IHsKICAgICAgICAgIG5hbWU6IHBhcmFtcy5uZXdOYW1lLAogICAgICAgICAgaWQ6IHBhcmFtcy5pZCwKICAgICAgICB9OwogICAgICAgIGludGVyZmFjZUVkaXROYW1lKGRhdGEpCiAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCgogICAgb25BZGROb2RlKHBhcmFtcykgewogICAgICAvLyB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgIC8vICAgcGF0aDogJy9hZG1pbi9zZXR0aW5nL3N5c3RlbV9vdXRfaW50ZXJmYWNlL2FkZCcsCiAgICAgIC8vICAgcXVlcnk6IHsKICAgICAgLy8gICAgIHBpZDogcGFyYW1zLnBpZCwKICAgICAgLy8gICB9LAogICAgICAvLyB9KTsKICAgIH0sCgogICAgYWRkTm9kZSgpIHsKICAgICAgdmFyIG5vZGUgPSBuZXcgVHJlZU5vZGUoeyBuYW1lOiAnbmV3IG5vZGUnLCBpc0xlYWY6IGZhbHNlIH0pOwogICAgICBpZiAoIXRoaXMuZGF0YS5jaGlsZHJlbikgdGhpcy5kYXRhLmNoaWxkcmVuID0gW107CiAgICAgIHRoaXMuZGF0YS5hZGRDaGlsZHJlbihub2RlKTsKICAgIH0sCgogICAgZ2V0TmV3VHJlZSgpIHsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgZnVuY3Rpb24gX2RmcyhvbGROb2RlKSB7CiAgICAgICAgdmFyIG5ld05vZGUgPSB7fTsKCiAgICAgICAgZm9yICh2YXIgayBpbiBvbGROb2RlKSB7CiAgICAgICAgICBpZiAoayAhPT0gJ2NoaWxkcmVuJyAmJiBrICE9PSAncGFyZW50JykgewogICAgICAgICAgICBuZXdOb2RlW2tdID0gb2xkTm9kZVtrXTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChvbGROb2RlLmNoaWxkcmVuICYmIG9sZE5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgewogICAgICAgICAgbmV3Tm9kZS5jaGlsZHJlbiA9IFtdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG9sZE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgbmV3Tm9kZS5jaGlsZHJlbi5wdXNoKF9kZnMob2xkTm9kZS5jaGlsZHJlbltpXSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3Tm9kZTsKICAgICAgfQoKICAgICAgdm0ubmV3VHJlZSA9IF9kZnModm0uZGF0YSk7CiAgICB9LAogIH0sCn07Cg=="},null]}