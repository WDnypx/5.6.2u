{"remainingRequest":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\kefu\\mobile\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\src\\pages\\kefu\\mobile\\index.vue","mtime":1747128746873},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1753254256661},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1753254258567},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1753254255279},{"path":"D:\\pc\\zm\\昆明阔翔科技有限公司\\源码\\CRMEB-BZ v5.6.2(20250630)\\template\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1753254260598}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CnZhciBtcDMgPSByZXF1aXJlKCdAL2Fzc2V0cy92aWRlby9ub3RpY2UubXAzJyk7CnZhciBtcDMgPSBuZXcgQXVkaW8obXAzKTsKaW1wb3J0IFNldHRpbmcgZnJvbSAnQC9zZXR0aW5nJzsKaW1wb3J0IHdvcmRzIGZyb20gJy4uL2NvbXBvbmVudHMvd29yZHMnOwppbXBvcnQgeyBTb2NrZXQgfSBmcm9tICdAL2xpYnMvc29ja2V0JzsKaW1wb3J0IHV0aWwgZnJvbSAnQC9saWJzL3V0aWwnOwppbXBvcnQgZW1vamlMaXN0IGZyb20gJ0AvdXRpbHMvZW1vamknOwppbXBvcnQgeyBzZXJ2aWNlTGlzdCwgc3BlZUNoY3JhZnQsIHRyYW5zZmVyTGlzdCwgc2VydmljZUNhdGUsIHNlcnZpY2VUcmFuc2ZlciB9IGZyb20gJ0AvYXBpL2tlZnUnOwppbXBvcnQgeyBnZXRDb29raWVzLCByZW1vdmVDb29raWVzLCBzZXRDb29raWVzIH0gZnJvbSAnQC9saWJzL3V0aWwnOwppbXBvcnQgeyBpc1BpY1VwbG9hZCB9IGZyb20gJ0AvdXRpbHMnOwoKY29uc3QgY2h1bmsgPSBmdW5jdGlvbiAoYXJyLCBudW0pIHsKICBudW0gPSBudW0gKiAxIHx8IDE7CiAgdmFyIHJldCA9IFtdOwogIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICBpZiAoaSAlIG51bSA9PT0gMCkgewogICAgICByZXQucHVzaChbXSk7CiAgICB9CiAgICByZXRbcmV0Lmxlbmd0aCAtIDFdLnB1c2goaXRlbSk7CiAgfSk7CiAgcmV0dXJuIHJldDsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnYWRtaW5DaGF0X2luZGV4JywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgb3BzOiB7CiAgICAgICAgdnVlc2Nyb2xsOiB7CiAgICAgICAgICBtb2RlOiAnc2xpZGUnLAogICAgICAgICAgZW5hYmxlOiBmYWxzZSwKICAgICAgICAgIGF1dG86IGZhbHNlLAogICAgICAgICAgYXV0b0xvYWREaXN0YW5jZTogMCwKICAgICAgICAgIHB1bGxSZWZyZXNoOiB7CiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSwKICAgICAgICAgICAgYXV0bzogZmFsc2UsCiAgICAgICAgICAgIGF1dG9Mb2FkRGlzdGFuY2U6IDAsCiAgICAgICAgICAgIHRpcHM6IHsKICAgICAgICAgICAgICBkZWFjdGl2ZTogJycsCiAgICAgICAgICAgICAgYWN0aXZlOiAn5LiK5ouJ5Yqg6L295pu05aSaJywKICAgICAgICAgICAgICBzdGFydDogJ0xvYWRpbmcuLi4nLAogICAgICAgICAgICAgIGJlZm9yZURlYWN0aXZlOiAnICcsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgcHVzaExvYWQ6IHsKICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBiYXI6IHsKICAgICAgICAgIGJhY2tncm91bmQ6ICcjMzkzMjMyJywKICAgICAgICAgIG9wYWNpdHk6ICcuNScsCiAgICAgICAgICBzaXplOiAnMnB4JywKICAgICAgICB9LAogICAgICB9LAogICAgICBzd2lwZXJPcHRpb25zOiB7fSwKICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGlzVG9vbDogZmFsc2UsCiAgICAgIGlzU3dpcGVyOiBmYWxzZSwKICAgICAgaXNXb3JkczogZmFsc2UsCiAgICAgIGF1dG9wbGF5OiBmYWxzZSwKICAgICAgY2lyY3VsYXI6IHRydWUsCiAgICAgIGludGVydmFsOiAzMDAwLAogICAgICBkdXJhdGlvbjogNTAwLAogICAgICBlbW9qaUdyb3VwOiBjaHVuayhlbW9qaUxpc3QsIDIxKSwKCiAgICAgIGNvbjogJycsCiAgICAgIHRvVWlkOiAnJywKICAgICAgbGltaXQ6IDE1LAogICAgICB1cHBlcklkOiAwLAogICAgICBjaGF0TGlzdDogW10sCiAgICAgIGtlZnVJbmZvOiB7fSwKICAgICAgc2Nyb2xsVG9wOiAwLAogICAgICBhY3RpdmU6IHRydWUsCiAgICAgIGlzU2Nyb2xsOiB0cnVlLAogICAgICBvbGRIZWlnaHQ6IDAsCiAgICAgIHNlbGVjdG9yOiAnJywKICAgICAgdHJhbnNmZXJMaXN0OiBbXSwgLy/ovazmjqXliJfooagKICAgICAgaXNUcmFuc2ZlcjogZmFsc2UsCiAgICAgIHVwbG9hZERhdGE6IHt9LCAvLyDkuIrkvKDlj4LmlbAKICAgICAgaGVhZGVyOiB7fSwKICAgICAgZmlsZVVybDogJycsCiAgICAgIHRvdXJpc3Q6IDAsCiAgICAgIGFjdGl2ZUtGOiAnJywKICAgIH07CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICB3b3JkcywKICB9LAogIGNvbXB1dGVkOiB7CiAgICBpc1NlbmQoKSB7CiAgICAgIGlmICh0aGlzLmNvbi5sZW5ndGggPT0gMCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIHJlY29yZHMoKSB7CiAgICAgIGlmICghdGhpcy5jaGF0TGlzdC5sZW5ndGgpIHJldHVybjsKICAgICAgcmV0dXJuIHRoaXMuY2hhdExpc3QubWFwKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGl0ZW0udGltZSA9IHRoaXMuJG1vbWVudChpdGVtLmFkZF90aW1lICogMTAwMCkuZm9ybWF0KCdNTU1EbyBoOm1tJyk7CiAgICAgICAgaWYgKGluZGV4KSB7CiAgICAgICAgICBpZiAoaXRlbS5hZGRfdGltZSAtIHRoaXMuY2hhdExpc3RbaW5kZXggLSAxXS5hZGRfdGltZSA+PSAzMDApIHsKICAgICAgICAgICAgaXRlbS5zaG93ID0gdHJ1ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGl0ZW0uc2hvdyA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpdGVtLnNob3cgPSB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgfSk7CiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIHRoaXMuZmlsZVVybCA9IFNldHRpbmcuYXBpQmFzZVVSTC5yZXBsYWNlKCdhZG1pbmFwaScsICdrZWZ1YXBpJykgKyAnL3VwbG9hZCc7CiAgICB0aGlzLnRvVWlkID0gdGhpcy4kcm91dGUucXVlcnkudG9VaWQgfHwgJyc7CiAgICB0aGlzLm5pY2tuYW1lID0gdGhpcy4kcm91dGUucXVlcnkubmlja25hbWUgfHwgJyc7CiAgICB0aGlzLmtlZnVJbmZvID0gSlNPTi5wYXJzZShnZXRDb29raWVzKCdrZWZ1SW5mbycpKTsKICAgIFByb21pc2UuYWxsKFt0aGlzLmdldENoYXRMaXN0KCksIHRoaXMuZ2V0VHJhbnNmZXJMaXN0KCldKTsKICB9LAogIG1vdW50ZWQoKSB7CiAgICB3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSBgJHt0aGlzLiRyb3V0ZS5xdWVyeS5uaWNrbmFtZSB8fCAnJ30gLSDlr7nor53or6bmg4VgOwogICAgLy8g5LiK5Lyg5aS06YOodG9rZW4KICAgIHRoaXMuaGVhZGVyWydBdXRob3JpLXphdGlvbiddID0gJ0JlYXJlciAnICsgZ2V0Q29va2llcygna2VmdV90b2tlbicpOwogICAgbGV0IGlzTG9naW4gPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3dzTG9naW4nKSk7CiAgICBTb2NrZXQudGhlbigod3MpID0+IHsKICAgICAgbGV0IHRoYXQgPSB0aGlzOwogICAgICBpZiAoaXNMb2dpbikgewogICAgICAgIHdzLnNlbmQoewogICAgICAgICAgZGF0YTogewogICAgICAgICAgICBpZDogdGhpcy50b1VpZCwKICAgICAgICAgIH0sCiAgICAgICAgICB0eXBlOiAndG9fY2hhdCcsCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgd3Muc2VuZCh7CiAgICAgICAgICB0eXBlOiAna2VmdV9sb2dpbicsCiAgICAgICAgICBkYXRhOiBnZXRDb29raWVzKCdrZWZ1X3Rva2VuJyksCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLy8g5raI5oGv5o6l5pS2CiAgICAgIHdzLiRvbihbJ3JlcGx5JywgJ2NoYXQnXSwgKGRhdGEpID0+IHsKICAgICAgICBpZiAoZGF0YS5tc25fdHlwZSA9PSAxIHx8IGRhdGEubXNuX3R5cGUgPT0gMikgewogICAgICAgICAgZGF0YS5tc24gPSB0aGlzLnJlcGxhY2VfZW0oZGF0YS5tc24pOwogICAgICAgIH0KICAgICAgICAvLyBpZiAoZGF0YS5tc25fdHlwZSA9PSA1KQogICAgICAgIHRoaXMuY2hhdExpc3QucHVzaChkYXRhKTsKCiAgICAgICAgdGhpcy4kcmVmc1snc2Nyb2xsQm94J10ucmVmcmVzaCgpOwogICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgIHRoaXMuc2Nyb2xsQm9tKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB3cy4kb24oJ3JlcGx5JywgKGRhdGEpID0+IHsKICAgICAgICAvLyBtcDMucGxheSgpOwogICAgICB9KTsKICAgICAgd3MuJG9uKCdzb2NrZXRfZXJyb3InLCAoKSA9PiB7CiAgICAgICAgdGhpcy4kdXRpbC5UaXBzKHsKICAgICAgICAgIHRpdGxlOiAn6L+e5o6l5aSx6LSlJywKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHt9KTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBTb2NrZXQudGhlbigod3MpID0+IHsKICAgICAgd3Muc2VuZCh7CiAgICAgICAgZGF0YTogewogICAgICAgICAgaWQ6IDAsCiAgICAgICAgfSwKICAgICAgICB0eXBlOiAndG9fY2hhdCcsCiAgICAgIH0pOwogICAgfSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnb0JhY2soKSB7CiAgICAgIHRoaXMuJHJvdXRlci5nbygtMSk7CiAgICB9LAogICAgaGFuZGxlRm9ybWF0RXJyb3IoZmlsZSkgewogICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIrkvKDlm77niYflj6rog73mmK8ganBn44CBanBn44CBanBlZ+OAgWdpZiDmoLzlvI8hJyk7CiAgICB9LAogICAgLy8g55So5oi36K+m5oOFCiAgICBnb1VzZXJJbmZvKGl0ZW0sIHN0YXR1cykgewogICAgICBpZiAoIXN0YXR1cykgewogICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICAgIHBhdGg6IGAva2VmdS91c2VyL2luZGV4LyR7aXRlbS51aWR9LyR7aXRlbS50eXBlfWAsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDkuIrkvKDkuYvliY0KICAgIGJlZm9yZVVwbG9hZChmaWxlKSB7CiAgICAgIHJldHVybiBpc1BpY1VwbG9hZChmaWxlKTsKICAgIH0sCiAgICAvLyDkuIrkvKDmiJDlip8KICAgIGhhbmRsZVN1Y2Nlc3MocmVzLCBmaWxlLCBmaWxlTGlzdCkgewogICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIHRoaXMuc2VuZE1zZyhyZXMuZGF0YS51cmwsIDMpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDmu5rliqjliLDlupXpg6gKICAgIHNjcm9sbEJvbSgpIHsKICAgICAgc2V0VGltZW91dCgocmVzKSA9PiB7CiAgICAgICAgbGV0IG51bSA9IHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXRCb3gnKS5vZmZzZXRIZWlnaHQpOwogICAgICAgIGlmICh0aGlzLiRyZWZzWydzY3JvbGxCb3gnXSkgewogICAgICAgICAgdGhpcy4kcmVmc1snc2Nyb2xsQm94J10uc2Nyb2xsVG8oCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICB5OiBudW0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIDMwMCwKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9LCAzMDApOwogICAgfSwKICAgIC8vIOiuouWNleivpuaDhQogICAgZ29PcmRlckRldGFpbChpdGVtKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiBgL2tlZnUvb3JkZXJEZXRhaWwvJHtpdGVtLm9yZGVySW5mby5pZH1gLAogICAgICB9KTsKICAgICAgLy8gdW5pLm5hdmlnYXRlVG8oewogICAgICAvLyAgICAgdXJsOiBgL3BhZ2VzL2FkbWluL29yZGVyRGV0YWlsL2luZGV4P2lkPSR7aXRlbS5tc259YAogICAgICAvLyB9KQogICAgfSwKICAgIC8vIOW6lemDqOWKn+iDveWMuuaJk+W8gAogICAgb3BlbkJveChrZXkpIHsKICAgICAgaWYgKGtleSA9PSAxKSB7CiAgICAgICAgdGhpcy5pc1Rvb2wgPSBmYWxzZTsKICAgICAgICB0aGlzLmlzU3dpcGVyID0gIXRoaXMuaXNTd2lwZXI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5pc1N3aXBlciA9IGZhbHNlOwogICAgICAgIHRoaXMuaXNUb29sID0gIXRoaXMuaXNUb29sOwogICAgICB9CiAgICAgIHRoaXMuJHJlZnNbJ3Njcm9sbEJveCddLnJlZnJlc2goKTsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHRoaXMuc2Nyb2xsQm9tKCk7CiAgICAgIH0pOwogICAgfSwKICAgIHNob3dXb3JkcygpIHsKICAgICAgdGhpcy5pc1dvcmRzID0gdHJ1ZTsKICAgIH0sCgogICAgLy8g6L2s5o6lCiAgICBnb1RyYW5zZmVyKCkgewogICAgICB0aGlzLmlzVHJhbnNmZXIgPSB0cnVlOwogICAgfSwKICAgIC8vIOi9rOaOpeWFs+mXrQogICAgY2xvc2VUcmFuc2ZlcigpIHsKICAgICAgdGhpcy50cmFuc2Zlckxpc3QuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7CiAgICAgICAgZWwuaXNDaGVjayA9IGZhbHNlOwogICAgICB9KTsKICAgICAgdGhpcy5pc1RyYW5zZmVyID0gZmFsc2U7CiAgICB9LAogICAgLy8g6L2s5o6l56Gu6K6kCiAgICBjb25maXJtKCkgewogICAgICBpZiAodGhpcy5hY3RpdmVLRikgewogICAgICAgIHNlcnZpY2VUcmFuc2Zlcih7CiAgICAgICAgICB1aWQ6IHRoaXMudG9VaWQsCiAgICAgICAgICBrZWZ1VG9VaWQ6IHRoaXMuYWN0aXZlS0YsCiAgICAgICAgfSkKICAgICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgdGhpcy50cmFuc2Zlckxpc3QuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgZWwuaXNDaGVjayA9IGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICB0aGlzLmlzVHJhbnNmZXIgPSBmYWxzZTsKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyb3IubXNnKTsKICAgICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivt+mAieaLqei9rOaOpeWuouacjScpOwogICAgICB9CiAgICB9LAogICAgLy8g5ZWG5ZOB5L+h5oGvCiAgICBnb29kc0luZm8oKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiAnL2tlZnUvZ29vZHMvbGlzdD90b1VpZD0nICsgdGhpcy50b1VpZCwKICAgICAgfSk7CiAgICB9LAogICAgLy8g6KGo5oOF54K55Ye7CiAgICBhZGRFbW9qaShpdGVtKSB7CiAgICAgIGxldCB2YWwgPSBgWyR7aXRlbX1dYDsKICAgICAgdGhpcy5jb24gKz0gdmFsOwogICAgfSwKICAgIC8vIOiBiuWkqeihqOaDhei9rOaNogogICAgcmVwbGFjZV9lbShzdHIpIHsKICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xbZW0tKFtcc1xTXSopXF0vZywgIjxzcGFuIGNsYXNzPSdlbSBlbS0kMScvPjwvc3Bhbj4iKTsKICAgICAgcmV0dXJuIHN0cjsKICAgIH0sCiAgICAvLyDojrflj5bogYrlpKnliJfooagKICAgIGdldENoYXRMaXN0KCkgewogICAgICBsZXQgc2VsZiA9IHRoaXM7CiAgICAgIHNlcnZpY2VMaXN0KHsKICAgICAgICBsaW1pdDogdGhpcy5saW1pdCwKICAgICAgICB1aWQ6IHRoaXMudG9VaWQsCiAgICAgICAgdXBwZXJJZDogdGhpcy51cHBlcklkLAogICAgICAgIGlzX3RvdXJpc3Q6IHRoaXMuJHJvdXRlLnF1ZXJ5LmlzX3RvdXJpc3QsCiAgICAgIH0pLnRoZW4oKHJlcykgPT4gewogICAgICAgIHJlcy5kYXRhLmZvckVhY2goKGVsKSA9PiB7CiAgICAgICAgICBpZiAoZWwubXNuX3R5cGUgPT0gMSB8fCBlbC5tc25fdHlwZSA9PSAyKSB7CiAgICAgICAgICAgIGVsLm1zbiA9IHRoaXMucmVwbGFjZV9lbShlbC5tc24pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGxldCBzZWxlY3RvciA9ICcnOwogICAgICAgIGlmICh0aGlzLnVwcGVySWQgPT0gMCkgewogICAgICAgICAgc2VsZWN0b3IgPSBgY2hhdF8ke3Jlcy5kYXRhW3Jlcy5kYXRhLmxlbmd0aCAtIDFdLmlkfWA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGVjdG9yID0gYGNoYXRfJHt0aGlzLmNoYXRMaXN0WzBdLmlkfWA7CiAgICAgICAgfQogICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjsKICAgICAgICB0aGlzLmNoYXRMaXN0ID0gWy4uLnJlcy5kYXRhLCAuLi50aGlzLmNoYXRMaXN0XTsKICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICB0aGlzLmlzU2Nyb2xsID0gcmVzLmRhdGEubGVuZ3RoID49IHRoaXMubGltaXQ7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdHJ1ZSk7CiAgICAgICAgICB0aGlzLiRyZWZzWydzY3JvbGxCb3gnXS5yZWZyZXNoKCk7CiAgICAgICAgICBpZiAodGhpcy51cHBlcklkID09IDApIHsKICAgICAgICAgICAgc2V0VGltZW91dCgocmVzKSA9PiB7CiAgICAgICAgICAgICAgbGV0IG51bSA9IHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpLm9mZnNldFRvcCkgLSA2MDsKICAgICAgICAgICAgICB0aGlzLiRyZWZzWydzY3JvbGxCb3gnXS5zY3JvbGxUbygKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgeTogbnVtLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSwgMzAwKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5Y+R6YCB5raI5oGvCiAgICBzZW5kVGV4dCgpIHsKICAgICAgaWYgKCF0aGlzLmlzU2VuZCkgewogICAgICAgIHJldHVybiB0aGlzLiRtZXNzYWdlLmVycm9yKCfor7fovpPlhaXlhoXlrrknKTsKICAgICAgfQogICAgICB0aGlzLnNlbmRNc2codGhpcy5jb24sIDEpOwogICAgICB0aGlzLmNvbiA9ICcnOwogICAgfSwKICAgIC8vIHdz5Y+R6YCBCiAgICBzZW5kTXNnKG1zbiwgdHlwZSkgewogICAgICBsZXQgb2JqID0gewogICAgICAgIHR5cGU6ICdjaGF0JywKICAgICAgICBkYXRhOiB7CiAgICAgICAgICBtc24sCiAgICAgICAgICB0eXBlLAogICAgICAgICAgdG9fdWlkOiB0aGlzLnRvVWlkLAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIFNvY2tldC50aGVuKCh3cykgPT4gewogICAgICAgIHdzLnNlbmQob2JqKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5Zu+54mH5LiK5LygCiAgICB1cGxvYWRJbWcoKSB7CiAgICAgIGxldCBzZWxmID0gdGhpczsKICAgICAgc2VsZi4kdXRpbC51cGxvYWRJbWFnZU9uZSgndXBsb2FkL2ltYWdlJywgZnVuY3Rpb24gKHJlcykgewogICAgICAgIGlmIChyZXMuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgc2VsZi5zZW5kTXNnKHJlcy5kYXRhLnVybCwgMyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDluLjnlKjkuo7pgInmi6kKICAgIHNlbGVjdFdvcmRzKGl0ZW0pIHsKICAgICAgdGhpcy5pc1dvcmRzID0gZmFsc2U7CiAgICAgIHRoaXMuc2VuZE1zZyhpdGVtLm1lc3NhZ2UsIDEpOwogICAgfSwKICAgIC8vICDllYblk4Hor6bmg4XpobUKICAgIGdvUHJvZHVjdChpdGVtKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiAnL2tlZnUvZ29vZHMvZGV0YWlsP2dvb2RzSWQ9JyArIGl0ZW0ubXNuLAogICAgICB9KTsKICAgIH0sCiAgICAvLyDnrqHnkIblkZjorqLljZUKICAgIGdvQWRtaW5PcmRlcigpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcva2VmdS9vcmRlckxpc3QvMC8nICsgdGhpcy50b1VpZCwKICAgICAgfSk7CiAgICB9LAogICAgLy8g5rua5Yqo5Yiw5bqV6YOoCiAgICBoZWlnaHQoKSB7CiAgICAgIGxldCBzZWxmID0gdGhpczsKICAgICAgdmFyIHNjcm9sbFRvcCA9IDA7CiAgICAgIGxldCBpbmZvID0gdW5pLmNyZWF0ZVNlbGVjdG9yUXVlcnkoKS5zZWxlY3QoJy5jaGF0Jyk7CiAgICAgIHNldFRpbWVvdXQoKHJlcykgPT4gewogICAgICAgIGluZm8KICAgICAgICAgIC5ib3VuZGluZ0NsaWVudFJlY3QoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgLy9kYXRhIC0g5ZCE56eN5Y+C5pWwCiAgICAgICAgICAgIHNjcm9sbFRvcCA9IGRhdGEuaGVpZ2h0OwogICAgICAgICAgICBpZiAoc2VsZi5hY3RpdmUpIHsKICAgICAgICAgICAgICBzZWxmLnNjcm9sbFRvcCA9IHBhcnNlSW50KHNjcm9sbFRvcCkgKyA1MDA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZi5zY3JvbGxUb3AgPSBwYXJzZUludChzY3JvbGxUb3ApICsgMTAwOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICAgLmV4ZWMoKTsKICAgICAgfSwgMTAwMCk7CiAgICB9LAogICAgLy8g6L2s5o6l5YiX6KGoCiAgICBnZXRUcmFuc2Zlckxpc3QoKSB7CiAgICAgIHRyYW5zZmVyTGlzdCh7CiAgICAgICAgdWlkOiB0aGlzLnRvVWlkLAogICAgICB9KS50aGVuKChyZXMpID0+IHsKICAgICAgICByZXMuZGF0YS5saXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgICBpdGVtLmlzQ2hlY2sgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLnRyYW5zZmVyTGlzdCA9IHJlcy5kYXRhLmxpc3Q7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWFs+mXreW4uOeUqOivrQogICAgY2xvc2VCb3goKSB7CiAgICAgIHRoaXMuaXNXb3JkcyA9IGZhbHNlOwogICAgfSwKICAgIC8vIOmAieaLqeivneacrwogICAgc2VsZWN0TXNnKGRhdGEpIHsKICAgICAgdGhpcy5jb24gKz0gZGF0YTsKICAgICAgdGhpcy5pc1dvcmRzID0gZmFsc2U7CiAgICB9LAogICAgaGFuZGxlQWN0aXZhdGUodm0sIHJlZnJlc2hEb20pIHsKICAgICAgdGhpcy51cHBlcklkID0gdGhpcy5jaGF0TGlzdFswXS5pZDsKICAgIH0sCiAgICBoYW5kbGVTdGFydCh2bSwgcmVmcmVzaERvbSwgZG9uZSkgewogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAvLyBsb2FkIGZpbmlzaGVkCiAgICAgICAgZG9uZSgpOwogICAgICB9LCAyMDAwKTsKICAgIH0sCiAgICBoYW5kbGVCZWZvcmVEZWFjdGl2YXRlKHZtLCByZWZyZXNoRG9tLCBkb25lKSB7CiAgICAgIHRoaXMuZ2V0Q2hhdExpc3QoKTsKCiAgICAgIHRoaXMuJG9uKCdjaGFuZ2UnLCAoZGF0YSkgPT4gewogICAgICAgIGlmIChkYXRhKSBkb25lKCk7CiAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZURlYWN0aXZhdGUodm0sIHJlZnJlc2hEb20pIHsKICAgICAgbGV0IG51bSA9IHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5zZWxlY3Rvcikub2Zmc2V0VG9wKSAtIDYwOwogICAgICB0aGlzLiRyZWZzWydzY3JvbGxCb3gnXS5zY3JvbGxUbygKICAgICAgICB7CiAgICAgICAgICB5OiBudW0sCiAgICAgICAgfSwKICAgICAgICAwLAogICAgICApOwogICAgfSwKICB9LAp9Owo="},null]}