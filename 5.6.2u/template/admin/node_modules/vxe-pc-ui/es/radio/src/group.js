import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, globalMixins } from '../../ui';
import VxeRadioComponent from './radio';
import VxeRadioButtonComponent from './button';
export default {
    name: 'VxeRadioGroup',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        value: [String, Number, Boolean],
        disabled: {
            type: Boolean,
            default: null
        },
        type: String,
        options: Array,
        optionProps: Object,
        strict: {
            type: Boolean,
            default: () => getConfig().radioGroup.strict
        },
        size: {
            type: String,
            default: () => getConfig().radioGroup.size || getConfig().size
        }
    },
    inject: {
        $xeForm: {
            default: null
        },
        formItemInfo: {
            from: 'xeFormItemInfo',
            default: null
        }
    },
    provide() {
        const $xeRadioGroup = this;
        return {
            $xeRadioGroup
        };
    },
    data() {
        const reactData = {};
        return {
            xID: XEUtils.uniqueId(),
            name: XEUtils.uniqueId('xe_group_'),
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeIsDisabled() {
            const $xeRadioGroup = this;
            const props = $xeRadioGroup;
            const $xeForm = $xeRadioGroup.$xeForm;
            const { disabled } = props;
            if (disabled === null) {
                if ($xeForm) {
                    return $xeForm.readonly || $xeForm.disabled;
                }
                return false;
            }
            return disabled;
        },
        computePropsOpts() {
            const $xeRadioGroup = this;
            const props = $xeRadioGroup;
            return Object.assign({}, props.optionProps);
        },
        computeLabelField() {
            const $xeRadioGroup = this;
            const propsOpts = $xeRadioGroup.computePropsOpts;
            return propsOpts.label || 'label';
        },
        computeValueField() {
            const $xeRadioGroup = this;
            const propsOpts = $xeRadioGroup.computePropsOpts;
            return propsOpts.value || 'value';
        },
        computeDisabledField() {
            const $xeRadioGroup = this;
            const propsOpts = $xeRadioGroup.computePropsOpts;
            return propsOpts.disabled || 'disabled';
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeRadioGroup = this;
            $xeRadioGroup.$emit(type, createEvent(evnt, { $radioGroup: $xeRadioGroup }, params));
        },
        emitModel(value) {
            const $xeRadioGroup = this;
            const { _events } = $xeRadioGroup;
            $xeRadioGroup.$emit('input', value);
            if (_events && _events.modelValue) {
                $xeRadioGroup.$emit('modelValue', value);
            }
            else {
                $xeRadioGroup.$emit('model-value', value);
            }
        },
        handleChecked(params, evnt) {
            const $xeRadioGroup = this;
            const $xeForm = $xeRadioGroup.$xeForm;
            const formItemInfo = $xeRadioGroup.formItemInfo;
            const value = params.label;
            $xeRadioGroup.emitModel(value);
            $xeRadioGroup.dispatchEvent('change', params, evnt);
            // 自动更新校验状态
            if ($xeForm && formItemInfo) {
                $xeForm.triggerItemEvent(evnt, formItemInfo.itemConfig.field, value);
            }
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeRadioGroup = this;
            const props = $xeRadioGroup;
            const slots = $xeRadioGroup.$scopedSlots;
            const { options, type } = props;
            const defaultSlot = slots.default;
            const valueField = $xeRadioGroup.computeValueField;
            const labelField = $xeRadioGroup.computeLabelField;
            const disabledField = $xeRadioGroup.computeDisabledField;
            const btnComp = type === 'button' ? VxeRadioButtonComponent : VxeRadioComponent;
            return h('div', {
                class: 'vxe-radio-group'
            }, defaultSlot
                ? defaultSlot({})
                : (options
                    ? options.map(item => {
                        return h(btnComp, {
                            key: item[valueField],
                            props: {
                                label: item[valueField],
                                content: item[labelField],
                                disabled: item[disabledField]
                            }
                        });
                    })
                    : []));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
