import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, globalMixins, renderEmptyElement } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
export default {
    name: 'VxeTip',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        title: {
            type: [String, Number],
            default: () => getConfig().tip.title
        },
        content: [String, Number],
        status: String,
        icon: {
            type: String,
            default: () => getConfig().tip.icon
        },
        /**
         * 权限码
         */
        permissionCode: [String, Number],
        size: {
            type: String,
            default: () => getConfig().tip.size || getConfig().size
        }
    },
    data() {
        const reactData = {};
        return {
            xID: XEUtils.uniqueId(),
            reactData
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeTip = this;
            $xeTip.$emit(type, createEvent(evnt, { $tip: $xeTip }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeTip = this;
            const props = $xeTip;
            const slots = $xeTip.$scopedSlots;
            const { status, content, icon, title } = props;
            const defaultSlot = slots.default;
            const titleSlot = slots.title;
            const iconSlot = slots.icon;
            const permissionInfo = $xeTip.computePermissionInfo;
            const vSize = $xeTip.computeSize;
            if (!permissionInfo.visible) {
                return renderEmptyElement($xeTip);
            }
            return h('div', {
                ref: 'refElem',
                class: ['vxe-tip', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status,
                        'has--title': !!(titleSlot || title)
                    }]
            }, [
                iconSlot || icon
                    ? h('div', {
                        class: 'vxe-tip--icon'
                    }, iconSlot
                        ? getSlotVNs(iconSlot({}))
                        : [
                            h('i', {
                                class: icon
                            })
                        ])
                    : renderEmptyElement($xeTip),
                h('div', {
                    class: 'vxe-tip--body'
                }, [
                    titleSlot || title
                        ? h('div', {
                            class: 'vxe-tip--title'
                        }, titleSlot ? getSlotVNs(titleSlot({})) : XEUtils.toValueString(title))
                        : renderEmptyElement($xeTip),
                    h('div', {
                        class: 'vxe-tip--content'
                    }, defaultSlot ? getSlotVNs(defaultSlot({})) : XEUtils.toValueString(content))
                ])
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
