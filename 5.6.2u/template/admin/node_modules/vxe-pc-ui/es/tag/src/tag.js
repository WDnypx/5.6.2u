import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, globalMixins, renderEmptyElement } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
export default {
    name: 'VxeTag',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        status: String,
        title: [String, Number],
        icon: String,
        content: [String, Number],
        size: {
            type: String,
            default: () => getConfig().tag.size || getConfig().size
        }
    },
    data() {
        const reactData = {};
        return {
            xID: XEUtils.uniqueId(),
            reactData
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeTag = this;
            $xeTag.$emit(type, createEvent(evnt, { $tag: $xeTag }, params));
        },
        clickEvent(evnt) {
            const $xeTag = this;
            $xeTag.dispatchEvent('click', {}, evnt);
        },
        //
        // Render
        //
        renderContent(h) {
            const $xeTag = this;
            const props = $xeTag;
            const slots = $xeTag.$scopedSlots;
            const { icon, content } = props;
            const defaultSlot = slots.default;
            const iconSlot = slots.icon;
            return [
                iconSlot || icon
                    ? h('span', {
                        class: 'vxe-tag--icon'
                    }, iconSlot
                        ? getSlotVNs(iconSlot({}))
                        : [
                            h('i', {
                                class: icon
                            })
                        ])
                    : renderEmptyElement($xeTag),
                h('span', {
                    class: 'vxe-tag--content'
                }, defaultSlot ? defaultSlot({}) : XEUtils.toValueString(content))
            ];
        },
        renderVN(h) {
            const $xeTag = this;
            const props = $xeTag;
            const { status, title } = props;
            const vSize = $xeTag.computeSize;
            return h('span', {
                ref: 'refElem',
                class: ['vxe-tag', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status
                    }],
                attrs: {
                    title
                },
                on: {
                    click: $xeTag.clickEvent
                }
            }, $xeTag.renderContent(h));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
