import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { VxeUI, getConfig, getIcon, getI18n, renderEmptyElement, createEvent, globalMixins } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
export default {
    name: 'VxeText',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        status: String,
        title: [String, Number],
        icon: String,
        loading: Boolean,
        content: [String, Number],
        clickToCopy: Boolean,
        size: {
            type: String,
            default: () => getConfig().text.size || getConfig().size
        }
    },
    data() {
        const reactData = {};
        return {
            xID: XEUtils.uniqueId(),
            reactData
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeText = this;
            $xeText.$emit(type, createEvent(evnt, { $text: $xeText }, params));
        },
        clickIconEvent() {
            const $xeText = this;
            const props = $xeText;
            const { content, clickToCopy } = props;
            if (clickToCopy) {
                const contentEl = $xeText.$refs.refContentElem;
                const copyVal = (contentEl ? contentEl.textContent : '') || content;
                if (copyVal) {
                    if (VxeUI.clipboard.copy(copyVal)) {
                        if (VxeUI.modal) {
                            VxeUI.modal.message({
                                content: getI18n('vxe.text.copySuccess'),
                                status: 'success'
                            });
                        }
                    }
                    else {
                        if (VxeUI.modal) {
                            VxeUI.modal.message({
                                content: getI18n('vxe.text.copyError'),
                                status: 'error'
                            });
                        }
                    }
                }
            }
        },
        clickEvent(evnt) {
            const $xeText = this;
            const props = $xeText;
            const { loading } = props;
            if (!loading) {
                $xeText.dispatchEvent('click', {}, evnt);
            }
        },
        //
        // Render
        //
        renderContent(h) {
            const $xeText = this;
            const props = $xeText;
            const slots = $xeText.$scopedSlots;
            const { loading, icon, content, clickToCopy } = props;
            const defaultSlot = slots.default;
            const iconSlot = slots.icon;
            return [
                loading
                    ? h('span', {
                        class: 'vxe-text--loading'
                    }, [
                        h('i', {
                            class: getIcon().TEXT_LOADING
                        })
                    ])
                    : (iconSlot || icon || clickToCopy
                        ? h('span', {
                            class: 'vxe-text--icon',
                            on: {
                                click: $xeText.clickIconEvent
                            }
                        }, iconSlot
                            ? getSlotVNs(iconSlot({}))
                            : [
                                h('i', {
                                    class: icon || getIcon().TEXT_COPY
                                })
                            ])
                        : renderEmptyElement($xeText)),
                h('span', {
                    ref: 'refContentElem',
                    class: 'vxe-text--content'
                }, defaultSlot ? defaultSlot({}) : XEUtils.toValueString(content))
            ];
        },
        renderVN(h) {
            const $xeText = this;
            const props = $xeText;
            const { loading, status, title, clickToCopy } = props;
            const vSize = $xeText.computeSize;
            return h('span', {
                ref: 'refElem',
                class: ['vxe-text', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status,
                        'is--copy': clickToCopy,
                        'is--loading': loading
                    }],
                attrs: {
                    title
                },
                on: {
                    click: $xeText.clickEvent
                }
            }, $xeText.renderContent(h));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
