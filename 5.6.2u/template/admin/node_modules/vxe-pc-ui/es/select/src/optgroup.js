import { defineVxeComponent } from '../../ui/src/comp';
import { createEvent, globalMixins } from '../../ui';
import XEUtils from 'xe-utils';
import { createOption, watchOption, destroyOption, assembleOption } from './util';
export default {
    name: 'VxeOptgroup',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        label: {
            type: [String, Number, Boolean],
            default: ''
        },
        visible: {
            type: Boolean,
            default: null
        },
        className: [String, Function],
        disabled: Boolean
    },
    inject: {
        $xeSelect: {
            default: null
        }
    },
    provide() {
        const $xeOptgroup = this;
        return {
            $xeOptgroup
        };
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        const optionConfig = {};
        return {
            xID,
            reactData,
            optionConfig
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeOptgroup = this;
            $xeOptgroup.$emit(type, createEvent(evnt, { $optgroup: $xeOptgroup }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeOptgroup = this;
            const slots = $xeOptgroup.$scopedSlots;
            const defaultSlot = slots.default;
            return h('div', {
                ref: 'elem'
            }, defaultSlot ? defaultSlot({}) : []);
        }
    },
    created() {
        const $xeOptgroup = this;
        const props = $xeOptgroup;
        const slots = $xeOptgroup.$scopedSlots;
        const $xeSelect = $xeOptgroup.$xeSelect;
        const optionConfig = createOption($xeSelect, props);
        optionConfig.slots = slots;
        $xeOptgroup.optionConfig = optionConfig;
        watchOption($xeOptgroup, optionConfig);
    },
    mounted() {
        const $xeOptgroup = this;
        const optionConfig = $xeOptgroup.optionConfig;
        const $xeSelect = $xeOptgroup.$xeSelect;
        const el = $xeOptgroup.$refs.elem;
        assembleOption($xeSelect, el, optionConfig);
    },
    beforeDestroy() {
        const $xeOptgroup = this;
        const optionConfig = $xeOptgroup.optionConfig;
        const $xeSelect = $xeOptgroup.$xeSelect;
        destroyOption($xeSelect, optionConfig);
    },
    render(h) {
        return this.renderVN(h);
    }
};
