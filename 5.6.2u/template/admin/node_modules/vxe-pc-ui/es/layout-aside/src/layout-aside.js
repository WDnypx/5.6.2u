import { defineVxeComponent } from '../../ui/src/comp';
import { toCssUnit } from '../../ui/src/dom';
import { getConfig, createEvent, globalMixins } from '../../ui';
import VxeLoadingComponent from '../../loading/src/loading';
import XEUtils from 'xe-utils';
export default {
    name: 'VxeLayoutAside',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        width: [String, Number],
        collapsed: Boolean,
        collapseWidth: [String, Number],
        loading: Boolean,
        padding: Boolean,
        size: {
            type: String,
            default: () => getConfig().layoutAside.size || getConfig().size
        }
    },
    provide() {
        const $xeLayoutAside = this;
        return {
            $xeLayoutAside
        };
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeWrapperWidth() {
            const $xeLayoutAside = this;
            const props = $xeLayoutAside;
            const { width, collapsed, collapseWidth } = props;
            if (collapsed) {
                if (collapseWidth) {
                    return toCssUnit(collapseWidth);
                }
            }
            else {
                if (width) {
                    return toCssUnit(width);
                }
            }
            return '';
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeLayoutAside = this;
            $xeLayoutAside.$emit(type, createEvent(evnt, { $layoutAside: $xeLayoutAside }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeLayoutAside = this;
            const props = $xeLayoutAside;
            const slots = $xeLayoutAside.$scopedSlots;
            const { width, collapsed, loading, padding } = props;
            const wrapperWidth = $xeLayoutAside.computeWrapperWidth;
            const vSize = $xeLayoutAside.computeSize;
            const defaultSlot = slots.default;
            return h('aside', {
                class: ['vxe-layout-aside', {
                        [`size--${vSize}`]: vSize,
                        'is--padding': padding,
                        'is--default-width': !width,
                        'is--collapse': collapsed,
                        'is--loading': loading
                    }],
                style: wrapperWidth
                    ? {
                        width: wrapperWidth
                    }
                    : {}
            }, [
                h('div', {
                    class: 'vxe-layout-aside--inner'
                }, defaultSlot ? defaultSlot({}) : []),
                /**
                 * 加载中
                 */
                h(VxeLoadingComponent, {
                    class: 'vxe-list-view--loading',
                    props: {
                        value: loading
                    }
                })
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
