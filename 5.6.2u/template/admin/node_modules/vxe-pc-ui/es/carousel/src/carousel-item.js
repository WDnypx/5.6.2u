import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { globalMixins, createEvent } from '../../ui';
import { assembleCarouselItem, destroyCarouselItem } from './util';
export default {
    name: 'VxeCarouselItem',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        name: [String, Number],
        className: String,
        url: String
    },
    inject: {
        $xeCarousel: {
            default: null
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {
            currentDate: null
        };
        const itemConfig = {
            id: xID,
            name: '',
            url: '',
            className: '',
            slots: {}
        };
        return {
            xID,
            reactData,
            itemConfig
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeCarouselItem = this;
            $xeCarouselItem.$emit(type, createEvent(evnt, { $carouselItem: $xeCarouselItem }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            return h('div', {
                ref: 'refElem'
            });
        }
    },
    watch: {
        name(val) {
            const $xeCarouselItem = this;
            const itemConfig = $xeCarouselItem.itemConfig;
            itemConfig.name = val;
        },
        url(val) {
            const $xeCarouselItem = this;
            const itemConfig = $xeCarouselItem.itemConfig;
            itemConfig.url = val;
        }
    },
    created() {
        const $xeCarouselItem = this;
        const props = $xeCarouselItem;
        const slots = $xeCarouselItem.$scopedSlots;
        const itemConfig = $xeCarouselItem.itemConfig;
        Object.assign(itemConfig, {
            name: props.name,
            url: props.url,
            className: props.className,
            slots
        });
    },
    mounted() {
        const $xeCarouselItem = this;
        const slots = $xeCarouselItem.$scopedSlots;
        const itemConfig = $xeCarouselItem.itemConfig;
        const $xeCarousel = $xeCarouselItem.$xeCarousel;
        itemConfig.slots = slots;
        const elem = $xeCarouselItem.$refs.refElem;
        if ($xeCarousel && elem) {
            assembleCarouselItem($xeCarousel, elem, itemConfig);
        }
    },
    beforeDestroy() {
        const $xeCarouselItem = this;
        const itemConfig = $xeCarouselItem.itemConfig;
        const $xeCarousel = $xeCarouselItem.$xeCarousel;
        if ($xeCarousel) {
            destroyCarouselItem($xeCarousel, itemConfig);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
