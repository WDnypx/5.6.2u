import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, globalMixins, createEvent } from '../../ui';
import VxeBreadcrumbItemComponent from './breadcrumb-item';
export default {
    name: 'VxeBreadcrumb',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        separator: {
            type: String,
            default: () => getConfig().breadcrumb.separator
        },
        options: Array
    },
    provide() {
        const $xeBreadcrumb = this;
        return {
            $xeBreadcrumb
        };
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeBreadcrumb = this;
            $xeBreadcrumb.$emit(type, createEvent(evnt, { $breadcrumb: $xeBreadcrumb }, params));
        },
        handleClickLink(evnt, option) {
            const $xeBreadcrumb = this;
            $xeBreadcrumb.dispatchEvent('click', { option }, evnt);
        },
        //
        // Render
        //
        renderItems(h) {
            const $xeBreadcrumb = this;
            const props = $xeBreadcrumb;
            const { options } = props;
            if (options && options.length) {
                return options.map(item => {
                    return h(VxeBreadcrumbItemComponent, {
                        props: {
                            title: item.title,
                            routerLink: item.routerLink
                        }
                    });
                });
            }
            return [];
        },
        renderVN(h) {
            const $xeBreadcrumb = this;
            const slots = $xeBreadcrumb.$scopedSlots;
            const defaultSlot = slots.default;
            return h('div', {
                ref: 'refElem',
                class: 'vxe-breadcrumb'
            }, defaultSlot ? defaultSlot({}) : $xeBreadcrumb.renderItems(h));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
