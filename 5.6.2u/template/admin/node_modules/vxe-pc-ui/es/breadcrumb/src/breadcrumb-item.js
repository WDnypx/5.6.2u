import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { globalMixins, createEvent, renderEmptyElement } from '../../ui';
export default {
    name: 'VxeBreadcrumbItem',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        title: String,
        routerLink: Object
    },
    inject: {
        $xeBreadcrumb: {
            default: null
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeSeparator() {
            const $xeBreadcrumbItem = this;
            const $xeBreadcrumb = $xeBreadcrumbItem.$xeBreadcrumb;
            if ($xeBreadcrumb) {
                return $xeBreadcrumb.separator;
            }
            return '';
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeBreadcrumbItem = this;
            $xeBreadcrumbItem.$emit(type, createEvent(evnt, { $breadcrumbItem: $xeBreadcrumbItem }, params));
        },
        clickEvent(evnt) {
            const $xeBreadcrumbItem = this;
            const props = $xeBreadcrumbItem;
            const $xeBreadcrumb = $xeBreadcrumbItem.$xeBreadcrumb;
            if ($xeBreadcrumb) {
                const item = {
                    title: props.title,
                    routerLink: props.routerLink
                };
                $xeBreadcrumb.handleClickLink(evnt, item);
            }
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeBreadcrumbItem = this;
            const props = $xeBreadcrumbItem;
            const slots = $xeBreadcrumbItem.$scopedSlots;
            const { title, routerLink } = props;
            const separator = $xeBreadcrumbItem.computeSeparator;
            const defaultSlot = slots.default;
            return h('span', {
                ref: 'refElem',
                class: 'vxe-breadcrumb-item',
                on: {
                    click: $xeBreadcrumbItem.clickEvent
                }
            }, [
                h('span', {
                    class: 'vxe-breadcrumb-item--content'
                }, [
                    routerLink
                        ? h('router-link', {
                            class: 'vxe-breadcrumb-item--content-link',
                            props: {
                                title,
                                custom: true,
                                to: routerLink
                            }
                        }, [
                            h('span', {
                                class: 'vxe-breadcrumb-item--content-text'
                            }, defaultSlot ? defaultSlot({}) : `${title || ''}`)
                        ])
                        : h('span', {
                            class: 'vxe-breadcrumb-item--content-text'
                        }, defaultSlot ? defaultSlot({}) : `${title || ''}`)
                ]),
                separator
                    ? h('span', {
                        class: 'vxe-breadcrumb-item--separator'
                    }, `${separator}`)
                    : renderEmptyElement($xeBreadcrumbItem)
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
