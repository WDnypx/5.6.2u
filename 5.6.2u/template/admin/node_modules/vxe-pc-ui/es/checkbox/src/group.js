import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, globalMixins } from '../../ui';
import VxeCheckboxComponent from './checkbox';
export default {
    name: 'VxeCheckboxGroup',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        value: Array,
        options: Array,
        optionProps: Object,
        disabled: {
            type: Boolean,
            default: null
        },
        max: {
            type: [String, Number],
            default: null
        },
        size: {
            type: String,
            default: () => getConfig().checkboxGroup.size || getConfig().size
        }
    },
    inject: {
        $xeForm: {
            default: null
        },
        formItemInfo: {
            from: 'xeFormItemInfo',
            default: null
        }
    },
    provide() {
        const $xeCheckboxGroup = this;
        return {
            $xeCheckboxGroup
        };
    },
    data() {
        const reactData = {};
        return {
            xID: XEUtils.uniqueId(),
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeIsDisabled() {
            const $xeCheckboxGroup = this;
            const props = $xeCheckboxGroup;
            const $xeForm = $xeCheckboxGroup.$xeForm;
            const { disabled } = props;
            if (disabled === null) {
                if ($xeForm) {
                    return $xeForm.readonly || $xeForm.disabled;
                }
                return false;
            }
            return disabled;
        },
        computeIsMaximize() {
            const $xeCheckboxGroup = this;
            const props = $xeCheckboxGroup;
            const { value, max } = props;
            if (max) {
                return (value ? value.length : 0) >= XEUtils.toNumber(max);
            }
            return false;
        },
        computePropsOpts() {
            const $xeCheckboxGroup = this;
            const props = $xeCheckboxGroup;
            return Object.assign({}, props.optionProps);
        },
        computeLabelField() {
            const $xeCheckboxGroup = this;
            const propsOpts = $xeCheckboxGroup.computePropsOpts;
            return propsOpts.label || 'label';
        },
        computeValueField() {
            const $xeCheckboxGroup = this;
            const propsOpts = $xeCheckboxGroup.computePropsOpts;
            return propsOpts.value || 'value';
        },
        computeDisabledField() {
            const $xeCheckboxGroup = this;
            const propsOpts = $xeCheckboxGroup.computePropsOpts;
            return propsOpts.disabled || 'disabled';
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeCheckboxGroup = this;
            $xeCheckboxGroup.$emit(type, createEvent(evnt, { $checkboxGroup: $xeCheckboxGroup }, params));
        },
        emitModel(value) {
            const $xeCheckboxGroup = this;
            const { _events } = $xeCheckboxGroup;
            $xeCheckboxGroup.$emit('input', value);
            if (_events && _events.modelValue) {
                $xeCheckboxGroup.$emit('modelValue', value);
            }
            else {
                $xeCheckboxGroup.$emit('model-value', value);
            }
        },
        handleChecked(params, evnt) {
            const $xeCheckboxGroup = this;
            const props = $xeCheckboxGroup;
            const $xeForm = $xeCheckboxGroup.$xeForm;
            const formItemInfo = $xeCheckboxGroup.formItemInfo;
            const { checked, label } = params;
            const checklist = props.value || [];
            const checkIndex = checklist.indexOf(label);
            if (checked) {
                if (checkIndex === -1) {
                    checklist.push(label);
                }
            }
            else {
                checklist.splice(checkIndex, 1);
            }
            $xeCheckboxGroup.emitModel(checklist);
            $xeCheckboxGroup.dispatchEvent('change', Object.assign({ checklist }, params), evnt);
            // 自动更新校验状态
            if ($xeForm && formItemInfo) {
                $xeForm.triggerItemEvent(evnt, formItemInfo.itemConfig.field, checklist);
            }
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeCheckboxGroup = this;
            const props = $xeCheckboxGroup;
            const slots = $xeCheckboxGroup.$scopedSlots;
            const { options } = props;
            const defaultSlot = slots.default;
            const valueField = $xeCheckboxGroup.computeValueField;
            const labelField = $xeCheckboxGroup.computeLabelField;
            const disabledField = $xeCheckboxGroup.computeDisabledField;
            return h('div', {
                class: 'vxe-checkbox-group'
            }, defaultSlot
                ? defaultSlot({})
                : (options
                    ? options.map(item => {
                        return h(VxeCheckboxComponent, {
                            key: item[valueField],
                            props: {
                                label: item[valueField],
                                content: item[labelField],
                                disabled: item[disabledField]
                            }
                        });
                    })
                    : []));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
