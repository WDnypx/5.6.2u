import { defineVxeComponent } from '../../ui/src/comp';
import { globalMixins, createEvent } from '../../ui';
import { assembleSplitItem, destroySplitItem } from './util';
import XEUtils from 'xe-utils';
export default {
    name: 'VxeSplitPane',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        name: [Number, String],
        width: [Number, String],
        height: [Number, String],
        showAction: Boolean,
        minWidth: {
            type: [Number, String],
            default: () => null
        },
        minHeight: {
            type: [Number, String],
            default: () => null
        }
    },
    inject: {
        $xeSplit: {
            default: null
        }
    },
    provide() {
        const $xeSplitItem = this;
        return {
            $xeSplitItem
        };
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        const paneConfig = {
            id: xID,
            name: '',
            width: 0,
            height: 0,
            minWidth: 0,
            minHeight: 0,
            showAction: false,
            isVisible: true,
            isExpand: true,
            renderWidth: 0,
            resizeWidth: 0,
            foldWidth: 0,
            renderHeight: 0,
            resizeHeight: 0,
            foldHeight: 0,
            slots: {}
        };
        return {
            xID,
            reactData,
            paneConfig
        };
    },
    computed: Object.assign({}, {}),
    watch: {
        name(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.name = val;
        },
        width(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.width = val;
        },
        height(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.height = val;
        },
        minWidth(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.minWidth = val;
        },
        minHeight(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.minHeight = val;
        },
        showAction(val) {
            const $xeSplitItem = this;
            const paneConfig = $xeSplitItem.paneConfig;
            paneConfig.showAction = val;
        }
    },
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeSplitItem = this;
            $xeSplitItem.$emit(type, createEvent(evnt, { $splitPane: $xeSplitItem }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            return h('div', {
                ref: 'refElem'
            });
        }
    },
    created() {
        const $xeSplitItem = this;
        const props = $xeSplitItem;
        const slots = $xeSplitItem.$scopedSlots;
        const paneConfig = $xeSplitItem.paneConfig;
        Object.assign(paneConfig, {
            name: props.name,
            width: props.width,
            height: props.height,
            minWidth: props.minWidth,
            minHeight: props.minHeight,
            showAction: props.showAction,
            slots
        });
    },
    mounted() {
        const $xeSplitItem = this;
        const slots = $xeSplitItem.$scopedSlots;
        const paneConfig = $xeSplitItem.paneConfig;
        const $xeSplit = $xeSplitItem.$xeSplit;
        paneConfig.slots = slots;
        const elem = $xeSplitItem.$refs.refElem;
        if ($xeSplit && elem) {
            assembleSplitItem($xeSplit, elem, paneConfig);
        }
    },
    beforeDestroy() {
        const $xeSplitItem = this;
        const paneConfig = $xeSplitItem.paneConfig;
        const $xeSplit = $xeSplitItem.$xeSplit;
        if ($xeSplit) {
            destroySplitItem($xeSplit, paneConfig);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
