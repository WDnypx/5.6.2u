import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, renderEmptyElement, globalMixins } from '../../ui';
import { toCssUnit } from '../../ui/src/dom';
export default {
    name: 'VxeAvatar',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        count: [String, Number],
        dot: Boolean,
        content: [String, Number],
        icon: String,
        src: String,
        width: [String, Number],
        height: [String, Number],
        circle: {
            type: Boolean,
            default: () => getConfig().avatar.circle
        },
        status: {
            type: String,
            default: () => getConfig().avatar.status
        },
        size: {
            type: String,
            default: () => getConfig().avatar.size || getConfig().size
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeAvatarStyle() {
            const $xeAvatar = this;
            const props = $xeAvatar;
            const { width, height } = props;
            const stys = {};
            if (width) {
                stys.width = toCssUnit(width);
            }
            if (height) {
                stys.height = toCssUnit(height);
            }
            return stys;
        },
        computeCountNum() {
            const $xeAvatar = this;
            const props = $xeAvatar;
            const { count } = props;
            return count ? XEUtils.toNumber(count) : 0;
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeAvatar = this;
            $xeAvatar.$emit(type, createEvent(evnt, { $avatar: $xeAvatar }, params));
        },
        //
        // Render
        //
        renderContent(h) {
            const $xeAvatar = this;
            const props = $xeAvatar;
            const { icon, content, src } = props;
            if (icon) {
                return h('span', {
                    class: 'vxe-avatar--icon'
                }, [
                    h('i', {
                        class: icon
                    })
                ]);
            }
            if (content) {
                return h('span', {
                    class: 'vxe-avatar--content'
                }, `${content}`);
            }
            if (src) {
                return h('img', {
                    class: 'vxe-avatar--img',
                    attrs: {
                        src
                    }
                });
            }
            return renderEmptyElement($xeAvatar);
        },
        renderVN(h) {
            const $xeAvatar = this;
            const props = $xeAvatar;
            const { circle, dot, status } = props;
            const vSize = $xeAvatar.computeSize;
            const countNum = $xeAvatar.computeCountNum;
            const avatarStyle = $xeAvatar.computeAvatarStyle;
            return h('div', {
                ref: 'refElem',
                class: ['vxe-avatar', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status,
                        'is--circle': circle,
                        'is--dot': dot
                    }],
                style: avatarStyle
            }, [
                $xeAvatar.renderContent(h),
                countNum
                    ? h('span', {
                        class: 'vxe-avatar--count'
                    }, countNum > 99 ? '99+' : `${countNum}`)
                    : renderEmptyElement($xeAvatar)
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
