import { defineVxeComponent } from '../../ui/src/comp';
import { getConfig, createEvent, globalMixins } from '../../ui';
import VxeLoadingComponent from '../../loading/src/loading';
import XEUtils from 'xe-utils';
export default {
    name: 'VxeLayoutBody',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        loading: Boolean,
        padding: Boolean,
        size: {
            type: String,
            default: () => getConfig().layoutBody.size || getConfig().size
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeLayoutBody = this;
            $xeLayoutBody.$emit(type, createEvent(evnt, { $layoutBody: $xeLayoutBody }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeLayoutBody = this;
            const slots = $xeLayoutBody.$scopedSlots;
            const { loading, padding } = $xeLayoutBody;
            const vSize = $xeLayoutBody.computeSize;
            const defaultSlot = slots.default;
            return h('div', {
                class: ['vxe-layout-body', {
                        [`size--${vSize}`]: vSize,
                        'is--loading': loading,
                        'is--padding': padding
                    }]
            }, [
                h('div', {
                    class: 'vxe-layout-body--inner'
                }, defaultSlot ? defaultSlot({}) : []),
                /**
                 * 加载中
                 */
                h(VxeLoadingComponent, {
                    class: 'vxe-list-view--loading',
                    props: {
                        value: loading
                    }
                })
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
