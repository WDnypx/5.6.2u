import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, getIcon, createEvent, globalMixins } from '../../ui';
export default {
    name: 'VxeRate',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        value: [Number, String],
        disabled: {
            type: Boolean,
            default: null
        },
        readonly: {
            type: Boolean,
            default: null
        },
        size: {
            type: String,
            default: () => getConfig().rate.size || getConfig().size
        },
        status: String
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {
            activeValue: null
        };
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeIsDisabled() {
            const $xeRate = this;
            const props = $xeRate;
            const $xeForm = $xeRate.$xeForm;
            const { disabled } = props;
            if (disabled === null) {
                if ($xeForm) {
                    return $xeForm.readonly || $xeForm.disabled;
                }
                return false;
            }
            return disabled;
        },
        computeIsReadonly() {
            const $xeRate = this;
            const props = $xeRate;
            const $xeForm = $xeRate.$xeForm;
            const { readonly } = props;
            if (readonly === null) {
                if ($xeForm) {
                    return $xeForm.readonly || $xeForm.disabled;
                }
                return false;
            }
            return readonly;
        },
        computeNumVal() {
            const $xeRate = this;
            const props = $xeRate;
            const reactData = $xeRate.reactData;
            const { value } = props;
            const { activeValue } = reactData;
            return XEUtils.toNumber(activeValue === null ? value : activeValue);
        },
        computeItemList() {
            return [1, 2, 3, 4, 5].map(num => {
                return {
                    value: num,
                    label: num
                };
            });
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeRate = this;
            $xeRate.$emit(type, createEvent(evnt, { $rate: $xeRate }, params));
        },
        emitModel(value) {
            const $xeRate = this;
            const { _events } = $xeRate;
            $xeRate.$emit('input', value);
            if (_events && _events.modelValue) {
                $xeRate.$emit('modelValue', value);
            }
            else {
                $xeRate.$emit('model-value', value);
            }
        },
        mouseenterEvent(evnt, item) {
            const $xeRate = this;
            const reactData = $xeRate.reactData;
            const isDisabled = $xeRate.computeIsDisabled;
            const isReadonly = $xeRate.computeIsReadonly;
            if (!(isDisabled || isReadonly)) {
                const value = item.value;
                reactData.activeValue = value;
            }
        },
        mouseleaveEvent() {
            const $xeRate = this;
            const reactData = $xeRate.reactData;
            reactData.activeValue = null;
        },
        clickEvent(evnt, item) {
            const $xeRate = this;
            const $xeForm = $xeRate.$xeForm;
            const formItemInfo = $xeRate.formItemInfo;
            const isDisabled = $xeRate.computeIsDisabled;
            const isReadonly = $xeRate.computeIsReadonly;
            if (!(isDisabled || isReadonly)) {
                const value = item.value;
                $xeRate.emitModel(value);
                $xeRate.dispatchEvent('change', { value }, evnt);
                // 自动更新校验状态
                if ($xeForm && formItemInfo) {
                    $xeForm.triggerItemEvent(evnt, formItemInfo.itemConfig.field, value);
                }
            }
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeRate = this;
            const props = $xeRate;
            const { status } = props;
            const isDisabled = $xeRate.computeIsDisabled;
            const isReadonly = $xeRate.computeIsReadonly;
            const itemList = $xeRate.computeItemList;
            const vSize = $xeRate.computeSize;
            const numVal = $xeRate.computeNumVal;
            return h('div', {
                ref: 'refElem',
                class: ['vxe-rate', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status,
                        'is--disabled': isDisabled,
                        'is--readonly': isReadonly
                    }]
            }, itemList.map(item => {
                const isChecked = numVal >= item.value;
                return h('div', {
                    class: ['vxe-rte--item', {
                            'is--checked': isChecked
                        }],
                    on: {
                        mouseenter(evnt) {
                            if (!(isDisabled || isReadonly)) {
                                $xeRate.mouseenterEvent(evnt, item);
                            }
                        },
                        mouseleave: $xeRate.mouseleaveEvent,
                        click(evnt) {
                            if (!(isDisabled || isReadonly)) {
                                $xeRate.clickEvent(evnt, item);
                            }
                        }
                    }
                }, [
                    h('i', {
                        class: isChecked ? getIcon().RATE_CHECKED : getIcon().RATE_UNCHECKED
                    })
                ]);
            }));
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
