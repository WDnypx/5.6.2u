import { defineVxeComponent } from '../../ui/src/comp';
import { getConfig, getIcon, createEvent, permission, renderEmptyElement, globalMixins } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
import XEUtils from 'xe-utils';
export default {
    name: 'VxeCollapse',
    mixins: [
        globalMixins.sizeMixin,
        globalMixins.permissionMixin
    ],
    props: {
        modelValue: Array,
        options: Array,
        padding: {
            type: Boolean,
            default: () => getConfig().collapse.padding
        },
        expandConfig: Object,
        size: {
            type: String,
            default: () => getConfig().collapse.size || getConfig().size
        }
    },
    provide() {
        const $xeCollapse = this;
        return {
            $xeCollapse
        };
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {
            staticPanes: [],
            activeNames: [],
            initNames: [],
            cachePaneMaps: {}
        };
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeItemOptions() {
            const $xeCollapse = this;
            const props = $xeCollapse;
            const { options } = props;
            return (options || []).filter((item) => $xeCollapse.handleFilterItem(item));
        },
        computeItemStaticOptions() {
            const $xeCollapse = this;
            const reactData = $xeCollapse.reactData;
            const { staticPanes } = reactData;
            return staticPanes.filter((item) => $xeCollapse.handleFilterItem(item));
        },
        computeExpandOpts() {
            const $xeCollapse = this;
            const props = $xeCollapse;
            return Object.assign({}, getConfig().collapse.expandConfig, props.expandConfig);
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeCollapse = this;
            $xeCollapse.$emit(type, createEvent(evnt, { $collapse: $xeCollapse }, params));
        },
        handleFilterItem(item) {
            const { permissionCode } = item;
            if (permissionCode) {
                if (!permission.checkVisible(permissionCode)) {
                    return false;
                }
            }
            return true;
        },
        addInitName(name) {
            const $xeCollapse = this;
            const reactData = $xeCollapse.reactData;
            const { initNames } = reactData;
            if (name && !initNames.includes(name)) {
                initNames.push(name);
                $xeCollapse.dispatchEvent('load', { name }, null);
                return true;
            }
            return false;
        },
        initDefaultName(list) {
            const $xeCollapse = this;
            const reactData = $xeCollapse.reactData;
            const { activeNames } = reactData;
            const nameMaps = {};
            if (list && list.length) {
                list.forEach((item) => {
                    const { name, preload } = item || {};
                    if (name) {
                        const isActive = activeNames.includes(name);
                        nameMaps[`${name}`] = {
                            loading: false
                        };
                        if (isActive) {
                            $xeCollapse.addInitName(name);
                        }
                        if (preload) {
                            if (!isActive) {
                                activeNames.push(name);
                            }
                        }
                    }
                });
            }
            reactData.activeNames = activeNames ? activeNames.slice(0) : [];
            reactData.cachePaneMaps = nameMaps;
        },
        callSlot(slotFunc, params, h) {
            const $xeCollapse = this;
            const slots = $xeCollapse.$scopedSlots;
            if (slotFunc) {
                if (XEUtils.isString(slotFunc)) {
                    slotFunc = slots[slotFunc] || null;
                }
                if (XEUtils.isFunction(slotFunc)) {
                    return getSlotVNs(slotFunc.call($xeCollapse, params, h));
                }
            }
            return [];
        },
        handleClickEvent(evnt, item) {
            const $xeCollapse = this;
            const reactData = $xeCollapse.reactData;
            const { activeNames } = reactData;
            const { name } = item;
            if (name) {
                const aIndex = activeNames.indexOf(name);
                let expanded = false;
                if (aIndex === -1) {
                    expanded = true;
                    activeNames.push(name);
                }
                else {
                    activeNames.splice(aIndex, 1);
                }
                $xeCollapse.addInitName(name);
                $xeCollapse.dispatchEvent('change', { value: activeNames, name }, evnt);
                $xeCollapse.dispatchEvent('toggle-expand', { value: activeNames, name, expanded }, evnt);
            }
        },
        //
        // Render
        //
        renderList(h, itemList) {
            const $xeCollapse = this;
            const reactData = $xeCollapse.reactData;
            const { activeNames, initNames } = reactData;
            const expandOpts = $xeCollapse.computeExpandOpts;
            return itemList.map(item => {
                const { icon, name, title, slots } = item;
                const titleSlot = slots ? slots.title : null;
                const defaultSlot = slots ? slots.default : null;
                const isActive = name && activeNames.includes(name);
                return h('div', {
                    class: 'vxe-collapse-item'
                }, [
                    h('div', {
                        class: 'vxe-collapse--item-header',
                        on: {
                            click(evnt) {
                                $xeCollapse.handleClickEvent(evnt, item);
                            }
                        }
                    }, [
                        expandOpts.showIcon
                            ? h('span', {
                                class: 'vxe-collapse--item-switch'
                            }, [
                                h('i', {
                                    class: isActive ? getIcon().COLLAPSE_OPEN : getIcon().COLLAPSE_CLOSE
                                })
                            ])
                            : renderEmptyElement($xeCollapse),
                        icon
                            ? h('span', {
                                class: 'vxe-collapse--item-icon'
                            }, [
                                h('i', {
                                    class: icon
                                })
                            ])
                            : renderEmptyElement($xeCollapse),
                        h('span', {
                            class: 'vxe-collapse--item-name'
                        }, titleSlot ? $xeCollapse.callSlot(titleSlot, { name, title }, h) : `${title}`)
                    ]),
                    h('div', {
                        class: ['vxe-collapse--item-content', {
                                'is--visible': isActive
                            }]
                    }, [
                        name && initNames.includes(name)
                            ? h('div', {
                                class: 'vxe-collapse--item-inner'
                            }, [
                                defaultSlot ? $xeCollapse.callSlot(defaultSlot, { name, title }, h) : ''
                            ])
                            : renderEmptyElement($xeCollapse)
                    ])
                ]);
            });
        },
        renderVN(h) {
            const $xeCollapse = this;
            const props = $xeCollapse;
            const slots = $xeCollapse.$scopedSlots;
            const { padding } = props;
            const vSize = $xeCollapse.computeSize;
            const itemOptions = $xeCollapse.computeItemOptions;
            const itemStaticOptions = $xeCollapse.computeItemStaticOptions;
            const defaultSlot = slots.default;
            const itemList = defaultSlot ? itemStaticOptions : itemOptions;
            return h('div', {
                ref: 'refElem',
                class: ['vxe-collapse', {
                        [`size--${vSize}`]: vSize,
                        'is--padding': padding
                    }]
            }, [
                h('div', {
                    class: 'vxe-collapse-slots'
                }, defaultSlot ? defaultSlot({}) : []),
                $xeCollapse.renderList(h, itemList)
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
