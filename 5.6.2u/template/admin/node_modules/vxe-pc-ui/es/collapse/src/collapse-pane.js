import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { createEvent } from '../../ui';
import { assembleCollapseItem, destroyCollapseItem } from './util';
export default {
    name: 'VxeCollapsePane',
    props: {
        title: [String, Number],
        name: [String, Number],
        icon: String,
        preload: Boolean,
        permissionCode: [String, Number]
    },
    inject: {
        $xeCollapse: {
            default: null
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        const collapseConfig = {
            id: xID,
            title: '',
            name: '',
            icon: '',
            preload: false,
            permissionCode: '',
            slots: {}
        };
        return {
            xID,
            reactData,
            collapseConfig
        };
    },
    computed: Object.assign({}, {}),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeCollapsePane = this;
            $xeCollapsePane.$emit(type, createEvent(evnt, { $collapsePane: $xeCollapsePane }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeCollapsePane = this;
            const slots = $xeCollapsePane.$scopedSlots;
            const defaultSlot = slots.default;
            return h('div', {
                ref: 'refElem'
            }, defaultSlot ? defaultSlot({}) : []);
        }
    },
    watch: {
        title(val) {
            const $xeCollapsePane = this;
            const collapseConfig = $xeCollapsePane.collapseConfig;
            collapseConfig.title = val;
        },
        name(val) {
            const $xeCollapsePane = this;
            const collapseConfig = $xeCollapsePane.collapseConfig;
            collapseConfig.name = val;
        },
        icon(val) {
            const $xeCollapsePane = this;
            const collapseConfig = $xeCollapsePane.collapseConfig;
            collapseConfig.icon = val;
        },
        permissionCode(val) {
            const $xeCollapsePane = this;
            const collapseConfig = $xeCollapsePane.collapseConfig;
            collapseConfig.permissionCode = val;
        }
    },
    created() {
        const $xeCollapsePane = this;
        const props = $xeCollapsePane;
        const slots = $xeCollapsePane.$scopedSlots;
        const collapseConfig = $xeCollapsePane.collapseConfig;
        Object.assign(collapseConfig, {
            title: props.title,
            name: props.name,
            icon: props.icon,
            preload: props.preload,
            permissionCode: props.permissionCode,
            slots
        });
    },
    mounted() {
        const $xeCollapsePane = this;
        const $xeCollapse = $xeCollapsePane.$xeCollapse;
        const slots = $xeCollapsePane.$scopedSlots;
        const collapseConfig = $xeCollapsePane.collapseConfig;
        collapseConfig.slots = slots;
        const elem = $xeCollapsePane.$refs.refElem;
        if ($xeCollapse && elem) {
            assembleCollapseItem($xeCollapse, elem, collapseConfig);
        }
    },
    beforeDestroy() {
        const $xeCollapsePane = this;
        const $xeCollapse = $xeCollapsePane.$xeCollapse;
        const collapseConfig = $xeCollapsePane.collapseConfig;
        if ($xeCollapse) {
            destroyCollapseItem($xeCollapse, collapseConfig);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
