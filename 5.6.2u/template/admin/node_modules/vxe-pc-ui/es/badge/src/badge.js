import { defineVxeComponent } from '../../ui/src/comp';
import XEUtils from 'xe-utils';
import { getConfig, createEvent, globalMixins, renderEmptyElement } from '../../ui';
export default {
    name: 'VxeBadge',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        count: [String, Number],
        dot: Boolean,
        content: [String, Number],
        size: {
            type: String,
            default: () => getConfig().badge.size || getConfig().size
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {};
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeCountNum() {
            const $xeAvatar = this;
            const props = $xeAvatar;
            const { count } = props;
            return count ? XEUtils.toNumber(count) : 0;
        } }),
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeBadge = this;
            $xeBadge.$emit(type, createEvent(evnt, { $badge: $xeBadge }, params));
        },
        //
        // Render
        //
        renderVN(h) {
            const $xeBadge = this;
            const props = $xeBadge;
            const slots = $xeBadge.$scopedSlots;
            const { dot, content } = props;
            const vSize = $xeBadge.computeSize;
            const countNum = $xeBadge.computeCountNum;
            const defaultSlot = slots.default;
            return h('div', {
                ref: 'refElem',
                class: ['vxe-badge', {
                        [`size--${vSize}`]: vSize,
                        'is--dot': dot
                    }]
            }, [
                defaultSlot || content
                    ? h('div', {
                        class: 'vxe-badge--content'
                    }, defaultSlot ? defaultSlot({}) : `${content || ''}`)
                    : [],
                countNum
                    ? h('span', {
                        class: 'vxe-badge--count'
                    }, countNum > 99 ? '99+' : `${countNum}`)
                    : renderEmptyElement($xeBadge)
            ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
