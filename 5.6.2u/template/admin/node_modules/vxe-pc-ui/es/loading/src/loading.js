import { defineVxeComponent } from '../../ui/src/comp';
import { getConfig, getIcon, getI18n, globalMixins, createEvent, renderEmptyElement } from '../../ui';
import { getSlotVNs } from '../../ui/src/vn';
import XEUtils from 'xe-utils';
export default {
    name: 'VxeLoading',
    mixins: [
        globalMixins.sizeMixin
    ],
    props: {
        value: Boolean,
        icon: {
            type: String,
            default: () => getConfig().loading.icon
        },
        showIcon: {
            type: Boolean,
            default: () => getConfig().loading.showIcon
        },
        text: {
            type: String,
            default: () => getConfig().loading.text
        },
        showText: {
            type: Boolean,
            default: () => getConfig().loading.showText
        },
        status: String,
        size: {
            type: String,
            default: () => getConfig().loading.size || getConfig().size
        }
    },
    data() {
        const xID = XEUtils.uniqueId();
        const reactData = {
            initialized: false
        };
        return {
            xID,
            reactData
        };
    },
    computed: Object.assign(Object.assign({}, {}), { computeLoadingIcon() {
            const $xeLoading = this;
            const props = $xeLoading;
            return props.icon || getIcon().LOADING;
        },
        computeLoadingText() {
            const $xeLoading = this;
            const props = $xeLoading;
            const { text } = props;
            return XEUtils.isString(text) ? text : getI18n('vxe.loading.text');
        } }),
    watch: {
        value() {
            this.handleInit();
        }
    },
    methods: {
        //
        // Method
        //
        dispatchEvent(type, params, evnt) {
            const $xeLoading = this;
            $xeLoading.$emit(type, createEvent(evnt, { $loading: $xeLoading }, params));
        },
        emitModel(value) {
            const $xeLoading = this;
            const { _events } = $xeLoading;
            $xeLoading.$emit('input', value);
            if (_events && _events.modelValue) {
                $xeLoading.$emit('modelValue', value);
            }
            else {
                $xeLoading.$emit('model-value', value);
            }
        },
        handleInit() {
            const $xeLoading = this;
            const reactData = $xeLoading.reactData;
            if (!reactData.initialized) {
                reactData.initialized = !!reactData.initialized;
            }
        },
        //
        //
        // Render
        //
        renderVN(h) {
            const $xeLoading = this;
            const props = $xeLoading;
            const slots = $xeLoading.$scopedSlots;
            const reactData = $xeLoading.reactData;
            const { value, showIcon, status } = props;
            const { initialized } = reactData;
            const vSize = $xeLoading.computeSize;
            const defaultSlot = slots.default;
            const textSlot = slots.text;
            const iconSlot = slots.icon;
            const loadingIcon = $xeLoading.computeLoadingIcon;
            const loadingText = $xeLoading.computeLoadingText;
            if (!initialized && !value) {
                return renderEmptyElement($xeLoading);
            }
            return h('div', {
                class: ['vxe-loading', {
                        [`size--${vSize}`]: vSize,
                        [`theme--${status}`]: status,
                        'is--visible': value
                    }]
            }, defaultSlot
                ? [
                    h('div', {
                        class: 'vxe-loading--wrapper'
                    }, getSlotVNs(defaultSlot({})))
                ]
                : [
                    h('div', {
                        class: 'vxe-loading--chunk'
                    }, [
                        showIcon && (iconSlot || loadingIcon)
                            ? h('div', {
                                class: 'vxe-loading--icon'
                            }, iconSlot
                                ? getSlotVNs(iconSlot({}))
                                : [
                                    h('i', {
                                        class: loadingIcon
                                    })
                                ])
                            : h('div', {
                                class: 'vxe-loading--spinner'
                            }),
                        textSlot || loadingText
                            ? h('div', {
                                class: 'vxe-loading--text'
                            }, textSlot ? getSlotVNs(textSlot({})) : `${loadingText}`)
                            : null
                    ])
                ]);
        }
    },
    render(h) {
        return this.renderVN(h);
    }
};
