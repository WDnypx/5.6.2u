"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _dom = require("../../ui/src/dom");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeRow',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    gutter: [Number, String, Array],
    wrap: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().row.wrap;
      }
    },
    vertical: Boolean,
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().row.size || (0, _ui.getConfig)().size;
      }
    }
  },
  provide: function provide() {
    var $xeRow = this;
    return {
      $xeRow: $xeRow
    };
  },
  data: function data() {
    var reactData = {};
    return {
      xID: _xeUtils.default.uniqueId(),
      reactData: reactData
    };
  },
  computed: {
    computeRowStyle: function computeRowStyle() {
      var $xeRow = this;
      var props = $xeRow;
      var gutter = props.gutter,
        vertical = props.vertical;
      var style = {};
      if (gutter) {
        var _ref = _xeUtils.default.isArray(gutter) ? gutter : [gutter],
          _ref2 = _slicedToArray(_ref, 2),
          lrGutter = _ref2[0],
          tbGutter = _ref2[1];
        if (vertical) {
          tbGutter = lrGutter;
          lrGutter = '';
        }
        if (lrGutter) {
          var offsetSize = _xeUtils.default.isNumber(lrGutter) ? (0, _dom.toCssUnit)(-(lrGutter / 2)) : "calc(".concat((0, _dom.toCssUnit)(lrGutter), " / 2 * -1)");
          style.marginLeft = offsetSize;
          style.marginRight = offsetSize;
        }
        if (tbGutter) {
          var _offsetSize = _xeUtils.default.isNumber(tbGutter) ? (0, _dom.toCssUnit)(-(tbGutter / 2)) : "calc(".concat((0, _dom.toCssUnit)(tbGutter), " / 2 * -1)");
          style.marginTop = _offsetSize;
          style.marginBottom = _offsetSize;
        }
      }
      return style;
    }
  },
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeRow = this;
      $xeRow.$emit(type, (0, _ui.createEvent)(evnt, {
        $row: $xeRow
      }, params));
    },
    clickEvent: function clickEvent(evnt) {
      var $xeRow = this;
      $xeRow.dispatchEvent('click', {}, evnt);
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeRow = this;
      var props = $xeRow;
      var slots = $xeRow.$scopedSlots;
      var vertical = props.vertical,
        wrap = props.wrap;
      var rowStyle = $xeRow.computeRowStyle;
      var defaultSlot = slots.default;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-row', {
          'is--vertical': vertical,
          'is--wrap': wrap
        }],
        style: rowStyle,
        on: {
          click: $xeRow.clickEvent
        }
      }, defaultSlot ? defaultSlot({}) : []);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */