"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeBadge',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    count: [String, Number],
    dot: Boolean,
    content: [String, Number],
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().badge.size || (0, _ui.getConfig)().size;
      }
    }
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {};
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeCountNum: function computeCountNum() {
      var $xeAvatar = this;
      var props = $xeAvatar;
      var count = props.count;
      return count ? _xeUtils.default.toNumber(count) : 0;
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeBadge = this;
      $xeBadge.$emit(type, (0, _ui.createEvent)(evnt, {
        $badge: $xeBadge
      }, params));
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeBadge = this;
      var props = $xeBadge;
      var slots = $xeBadge.$scopedSlots;
      var dot = props.dot,
        content = props.content;
      var vSize = $xeBadge.computeSize;
      var countNum = $xeBadge.computeCountNum;
      var defaultSlot = slots.default;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-badge', _defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), 'is--dot', dot)]
      }, [defaultSlot || content ? h('div', {
        class: 'vxe-badge--content'
      }, defaultSlot ? defaultSlot({}) : "".concat(content || '')) : [], countNum ? h('span', {
        class: 'vxe-badge--count'
      }, countNum > 99 ? '99+' : "".concat(countNum)) : (0, _ui.renderEmptyElement)($xeBadge)]);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */