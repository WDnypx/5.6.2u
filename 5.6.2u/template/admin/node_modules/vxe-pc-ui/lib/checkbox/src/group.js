"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _checkbox = _interopRequireDefault(require("./checkbox"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeCheckboxGroup',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    value: Array,
    options: Array,
    optionProps: Object,
    disabled: {
      type: Boolean,
      default: null
    },
    max: {
      type: [String, Number],
      default: null
    },
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().checkboxGroup.size || (0, _ui.getConfig)().size;
      }
    }
  },
  inject: {
    $xeForm: {
      default: null
    },
    formItemInfo: {
      from: 'xeFormItemInfo',
      default: null
    }
  },
  provide: function provide() {
    var $xeCheckboxGroup = this;
    return {
      $xeCheckboxGroup: $xeCheckboxGroup
    };
  },
  data: function data() {
    var reactData = {};
    return {
      xID: _xeUtils.default.uniqueId(),
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeIsDisabled: function computeIsDisabled() {
      var $xeCheckboxGroup = this;
      var props = $xeCheckboxGroup;
      var $xeForm = $xeCheckboxGroup.$xeForm;
      var disabled = props.disabled;
      if (disabled === null) {
        if ($xeForm) {
          return $xeForm.readonly || $xeForm.disabled;
        }
        return false;
      }
      return disabled;
    },
    computeIsMaximize: function computeIsMaximize() {
      var $xeCheckboxGroup = this;
      var props = $xeCheckboxGroup;
      var value = props.value,
        max = props.max;
      if (max) {
        return (value ? value.length : 0) >= _xeUtils.default.toNumber(max);
      }
      return false;
    },
    computePropsOpts: function computePropsOpts() {
      var $xeCheckboxGroup = this;
      var props = $xeCheckboxGroup;
      return Object.assign({}, props.optionProps);
    },
    computeLabelField: function computeLabelField() {
      var $xeCheckboxGroup = this;
      var propsOpts = $xeCheckboxGroup.computePropsOpts;
      return propsOpts.label || 'label';
    },
    computeValueField: function computeValueField() {
      var $xeCheckboxGroup = this;
      var propsOpts = $xeCheckboxGroup.computePropsOpts;
      return propsOpts.value || 'value';
    },
    computeDisabledField: function computeDisabledField() {
      var $xeCheckboxGroup = this;
      var propsOpts = $xeCheckboxGroup.computePropsOpts;
      return propsOpts.disabled || 'disabled';
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeCheckboxGroup = this;
      $xeCheckboxGroup.$emit(type, (0, _ui.createEvent)(evnt, {
        $checkboxGroup: $xeCheckboxGroup
      }, params));
    },
    emitModel: function emitModel(value) {
      var $xeCheckboxGroup = this;
      var _events = $xeCheckboxGroup._events;
      $xeCheckboxGroup.$emit('input', value);
      if (_events && _events.modelValue) {
        $xeCheckboxGroup.$emit('modelValue', value);
      } else {
        $xeCheckboxGroup.$emit('model-value', value);
      }
    },
    handleChecked: function handleChecked(params, evnt) {
      var $xeCheckboxGroup = this;
      var props = $xeCheckboxGroup;
      var $xeForm = $xeCheckboxGroup.$xeForm;
      var formItemInfo = $xeCheckboxGroup.formItemInfo;
      var checked = params.checked,
        label = params.label;
      var checklist = props.value || [];
      var checkIndex = checklist.indexOf(label);
      if (checked) {
        if (checkIndex === -1) {
          checklist.push(label);
        }
      } else {
        checklist.splice(checkIndex, 1);
      }
      $xeCheckboxGroup.emitModel(checklist);
      $xeCheckboxGroup.dispatchEvent('change', Object.assign({
        checklist: checklist
      }, params), evnt);
      // 自动更新校验状态
      if ($xeForm && formItemInfo) {
        $xeForm.triggerItemEvent(evnt, formItemInfo.itemConfig.field, checklist);
      }
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeCheckboxGroup = this;
      var props = $xeCheckboxGroup;
      var slots = $xeCheckboxGroup.$scopedSlots;
      var options = props.options;
      var defaultSlot = slots.default;
      var valueField = $xeCheckboxGroup.computeValueField;
      var labelField = $xeCheckboxGroup.computeLabelField;
      var disabledField = $xeCheckboxGroup.computeDisabledField;
      return h('div', {
        class: 'vxe-checkbox-group'
      }, defaultSlot ? defaultSlot({}) : options ? options.map(function (item) {
        return h(_checkbox.default, {
          key: item[valueField],
          props: {
            label: item[valueField],
            content: item[labelField],
            disabled: item[disabledField]
          }
        });
      }) : []);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */