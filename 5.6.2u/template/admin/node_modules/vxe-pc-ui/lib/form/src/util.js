"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assembleItem = assembleItem;
exports.createItem = createItem;
exports.destroyItem = destroyItem;
exports.handleFieldOrItem = handleFieldOrItem;
exports.isActiveItem = isActiveItem;
exports.isFormItem = isFormItem;
exports.isHiddenItem = isHiddenItem;
exports.watchItem = watchItem;
var _ui = require("../../ui");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _itemInfo = require("./itemInfo");
var _utils = require("../../ui/src/utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function isFormItem(item) {
  return item instanceof _itemInfo.ItemInfo;
}
function createItem($xeForm, _vm) {
  return isFormItem(_vm) ? _vm : new _itemInfo.ItemInfo($xeForm, _vm);
}
function handleFieldOrItem($xeForm, fieldOrItem) {
  if (fieldOrItem) {
    return _xeUtils.default.isString(fieldOrItem) ? $xeForm.getItemByField(fieldOrItem) : fieldOrItem;
  }
  return null;
}
function isHiddenItem($xeForm, formItem) {
  var reactData = $xeForm.reactData;
  var collapseAll = reactData.collapseAll;
  var folding = formItem.folding,
    visible = formItem.visible;
  return visible === false || folding && collapseAll;
}
function isActiveItem($xeForm, formItem) {
  var $xeGrid = $xeForm.$xeGrid;
  var visibleMethod = formItem.visibleMethod,
    itemRender = formItem.itemRender,
    visible = formItem.visible,
    field = formItem.field;
  if (visible === false) {
    return visible;
  }
  var compConf = (0, _utils.isEnableConf)(itemRender) ? _ui.renderer.get(itemRender.name) : null;
  var fiVisibleMethod = compConf ? compConf.formItemVisibleMethod || compConf.itemVisibleMethod : null;
  if (!visibleMethod && fiVisibleMethod) {
    visibleMethod = fiVisibleMethod;
  }
  if (!visibleMethod) {
    return true;
  }
  var formProps = $xeForm;
  var data = formProps.data;
  return visibleMethod({
    data: data,
    field: field,
    property: field,
    item: formItem,
    $form: $xeForm,
    $grid: $xeGrid
  });
}
function watchItem(_vm, formItemPropKeys, formItem) {
  formItemPropKeys.forEach(function (name) {
    _vm.$watch(name, function (val) {
      formItem.update(name, val);
    });
  });
}
function assembleItem($xeForm, el, formItem, formGroup) {
  var reactData = $xeForm.reactData;
  var formProps = $xeForm;
  var customLayout = formProps.customLayout;
  var staticItems = reactData.staticItems;
  if (customLayout) {
    if (!staticItems.some(function (item) {
      return item.id === formItem.id;
    })) {
      staticItems.push(formItem);
    }
  } else {
    if (el) {
      var parentElem = el.parentNode;
      var parentItem = formGroup ? formGroup.formItem : null;
      var parentItems = parentItem ? parentItem.children : staticItems;
      if (parentElem) {
        parentItems.splice(_xeUtils.default.arrayIndexOf(parentElem.children, el), 0, formItem);
        reactData.staticItems = staticItems.slice(0);
      }
    }
  }
}
function destroyItem($xeForm, formItem) {
  var reactData = $xeForm.reactData;
  var staticItems = reactData.staticItems;
  var index = _xeUtils.default.findIndexOf(staticItems, function (item) {
    return item.id === formItem.id;
  });
  if (index > -1) {
    staticItems.splice(index, 1);
  }
  reactData.staticItems = staticItems.slice(0);
}