"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _ui = require("../../ui");
var _vn = require("../../ui/src/vn");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeCollapse',
  mixins: [_ui.globalMixins.sizeMixin, _ui.globalMixins.permissionMixin],
  props: {
    modelValue: Array,
    options: Array,
    padding: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().collapse.padding;
      }
    },
    expandConfig: Object,
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().collapse.size || (0, _ui.getConfig)().size;
      }
    }
  },
  provide: function provide() {
    var $xeCollapse = this;
    return {
      $xeCollapse: $xeCollapse
    };
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {
      staticPanes: [],
      activeNames: [],
      initNames: [],
      cachePaneMaps: {}
    };
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeItemOptions: function computeItemOptions() {
      var $xeCollapse = this;
      var props = $xeCollapse;
      var options = props.options;
      return (options || []).filter(function (item) {
        return $xeCollapse.handleFilterItem(item);
      });
    },
    computeItemStaticOptions: function computeItemStaticOptions() {
      var $xeCollapse = this;
      var reactData = $xeCollapse.reactData;
      var staticPanes = reactData.staticPanes;
      return staticPanes.filter(function (item) {
        return $xeCollapse.handleFilterItem(item);
      });
    },
    computeExpandOpts: function computeExpandOpts() {
      var $xeCollapse = this;
      var props = $xeCollapse;
      return Object.assign({}, (0, _ui.getConfig)().collapse.expandConfig, props.expandConfig);
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeCollapse = this;
      $xeCollapse.$emit(type, (0, _ui.createEvent)(evnt, {
        $collapse: $xeCollapse
      }, params));
    },
    handleFilterItem: function handleFilterItem(item) {
      var permissionCode = item.permissionCode;
      if (permissionCode) {
        if (!_ui.permission.checkVisible(permissionCode)) {
          return false;
        }
      }
      return true;
    },
    addInitName: function addInitName(name) {
      var $xeCollapse = this;
      var reactData = $xeCollapse.reactData;
      var initNames = reactData.initNames;
      if (name && !initNames.includes(name)) {
        initNames.push(name);
        $xeCollapse.dispatchEvent('load', {
          name: name
        }, null);
        return true;
      }
      return false;
    },
    initDefaultName: function initDefaultName(list) {
      var $xeCollapse = this;
      var reactData = $xeCollapse.reactData;
      var activeNames = reactData.activeNames;
      var nameMaps = {};
      if (list && list.length) {
        list.forEach(function (item) {
          var _ref = item || {},
            name = _ref.name,
            preload = _ref.preload;
          if (name) {
            var isActive = activeNames.includes(name);
            nameMaps["".concat(name)] = {
              loading: false
            };
            if (isActive) {
              $xeCollapse.addInitName(name);
            }
            if (preload) {
              if (!isActive) {
                activeNames.push(name);
              }
            }
          }
        });
      }
      reactData.activeNames = activeNames ? activeNames.slice(0) : [];
      reactData.cachePaneMaps = nameMaps;
    },
    callSlot: function callSlot(slotFunc, params, h) {
      var $xeCollapse = this;
      var slots = $xeCollapse.$scopedSlots;
      if (slotFunc) {
        if (_xeUtils.default.isString(slotFunc)) {
          slotFunc = slots[slotFunc] || null;
        }
        if (_xeUtils.default.isFunction(slotFunc)) {
          return (0, _vn.getSlotVNs)(slotFunc.call($xeCollapse, params, h));
        }
      }
      return [];
    },
    handleClickEvent: function handleClickEvent(evnt, item) {
      var $xeCollapse = this;
      var reactData = $xeCollapse.reactData;
      var activeNames = reactData.activeNames;
      var name = item.name;
      if (name) {
        var aIndex = activeNames.indexOf(name);
        var expanded = false;
        if (aIndex === -1) {
          expanded = true;
          activeNames.push(name);
        } else {
          activeNames.splice(aIndex, 1);
        }
        $xeCollapse.addInitName(name);
        $xeCollapse.dispatchEvent('change', {
          value: activeNames,
          name: name
        }, evnt);
        $xeCollapse.dispatchEvent('toggle-expand', {
          value: activeNames,
          name: name,
          expanded: expanded
        }, evnt);
      }
    },
    //
    // Render
    //
    renderList: function renderList(h, itemList) {
      var $xeCollapse = this;
      var reactData = $xeCollapse.reactData;
      var activeNames = reactData.activeNames,
        initNames = reactData.initNames;
      var expandOpts = $xeCollapse.computeExpandOpts;
      return itemList.map(function (item) {
        var icon = item.icon,
          name = item.name,
          title = item.title,
          slots = item.slots;
        var titleSlot = slots ? slots.title : null;
        var defaultSlot = slots ? slots.default : null;
        var isActive = name && activeNames.includes(name);
        return h('div', {
          class: 'vxe-collapse-item'
        }, [h('div', {
          class: 'vxe-collapse--item-header',
          on: {
            click: function click(evnt) {
              $xeCollapse.handleClickEvent(evnt, item);
            }
          }
        }, [expandOpts.showIcon ? h('span', {
          class: 'vxe-collapse--item-switch'
        }, [h('i', {
          class: isActive ? (0, _ui.getIcon)().COLLAPSE_OPEN : (0, _ui.getIcon)().COLLAPSE_CLOSE
        })]) : (0, _ui.renderEmptyElement)($xeCollapse), icon ? h('span', {
          class: 'vxe-collapse--item-icon'
        }, [h('i', {
          class: icon
        })]) : (0, _ui.renderEmptyElement)($xeCollapse), h('span', {
          class: 'vxe-collapse--item-name'
        }, titleSlot ? $xeCollapse.callSlot(titleSlot, {
          name: name,
          title: title
        }, h) : "".concat(title))]), h('div', {
          class: ['vxe-collapse--item-content', {
            'is--visible': isActive
          }]
        }, [name && initNames.includes(name) ? h('div', {
          class: 'vxe-collapse--item-inner'
        }, [defaultSlot ? $xeCollapse.callSlot(defaultSlot, {
          name: name,
          title: title
        }, h) : '']) : (0, _ui.renderEmptyElement)($xeCollapse)])]);
      });
    },
    renderVN: function renderVN(h) {
      var $xeCollapse = this;
      var props = $xeCollapse;
      var slots = $xeCollapse.$scopedSlots;
      var padding = props.padding;
      var vSize = $xeCollapse.computeSize;
      var itemOptions = $xeCollapse.computeItemOptions;
      var itemStaticOptions = $xeCollapse.computeItemStaticOptions;
      var defaultSlot = slots.default;
      var itemList = defaultSlot ? itemStaticOptions : itemOptions;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-collapse', _defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), 'is--padding', padding)]
      }, [h('div', {
        class: 'vxe-collapse-slots'
      }, defaultSlot ? defaultSlot({}) : []), $xeCollapse.renderList(h, itemList)]);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */