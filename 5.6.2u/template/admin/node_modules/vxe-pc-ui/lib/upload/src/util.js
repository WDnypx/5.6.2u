"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExportBlobByContent = getExportBlobByContent;
exports.parseFile = parseFile;
exports.saveLocalFile = exports.readLocalFile = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _core = require("@vxe-ui/core");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 导入
var fileForm = null;
var fileInput = null;
function parseFile(file) {
  var name = file.name;
  var tIndex = _xeUtils.default.lastIndexOf(name, '.');
  var type = name.substring(tIndex + 1, name.length).toLowerCase();
  var filename = name.substring(0, tIndex);
  return {
    filename: filename,
    type: type
  };
}
/**
 * 读取本地文件
 */
var readLocalFile = exports.readLocalFile = function readLocalFile(options) {
  var opts = Object.assign({}, options);
  return new Promise(function (resolve, reject) {
    if (!fileInput) {
      fileInput = document.createElement('input');
      fileInput.name = 'file';
      fileInput.type = 'file';
    }
    if (!fileForm) {
      fileForm = document.createElement('form');
      fileForm.style.display = 'none';
      fileForm.appendChild(fileInput);
      document.body.appendChild(fileForm);
    }
    var types = opts.types || [];
    var isAllType = !types.length || types.some(function (type) {
      return type === '*';
    });
    fileInput.multiple = !!opts.multiple;
    fileInput.accept = isAllType ? '' : ".".concat(types.join(', .'));
    fileInput.onchange = function (evnt) {
      var eventTarget = evnt.target;
      var files = Array.from(eventTarget.files || []);
      var file = files[0];
      var errType = '';
      // 校验类型
      if (!isAllType) {
        for (var fIndex = 0; fIndex < files.length; fIndex++) {
          var _parseFile = parseFile(files[fIndex]),
            type = _parseFile.type;
          if (!_xeUtils.default.includes(types, type)) {
            errType = type;
            break;
          }
        }
      }
      if (!errType) {
        resolve({
          status: true,
          files: files,
          file: file
        });
      } else {
        if (opts.message !== false) {
          if (_core.VxeUI.modal) {
            _core.VxeUI.modal.message({
              content: (0, _core.getI18n)('vxe.error.notType', [errType]),
              status: 'error'
            });
          }
        }
        var params = {
          status: false,
          files: files,
          file: file
        };
        reject(params);
      }
    };
    fileForm.reset();
    fileInput.click();
  });
};
function getExportBlobByContent(content, options) {
  return new Blob([content], {
    type: "text/".concat(options.type, ";charset=utf-8;")
  });
}
/**
 * 保存文件到本地
 */
var saveLocalFile = exports.saveLocalFile = function saveLocalFile(options) {
  var opts = Object.assign({
    type: ''
  }, options);
  var filename = opts.filename,
    type = opts.type,
    content = opts.content;
  var name = type ? "".concat(filename, ".").concat(type) : "".concat(filename);
  if (window.Blob) {
    var blob = content instanceof Blob ? content : getExportBlobByContent(_xeUtils.default.toValueString(content), opts);
    var winNavigator = window.navigator;
    if (winNavigator.msSaveBlob) {
      winNavigator.msSaveBlob(blob, name);
    } else {
      var url = URL.createObjectURL(blob);
      var linkElem = document.createElement('a');
      linkElem.target = '_blank';
      linkElem.download = name;
      linkElem.href = url;
      document.body.appendChild(linkElem);
      linkElem.click();
      requestAnimationFrame(function () {
        if (linkElem.parentNode) {
          linkElem.parentNode.removeChild(linkElem);
        }
        URL.revokeObjectURL(url);
      });
    }
    return Promise.resolve();
  }
  return Promise.reject(new Error((0, _core.getI18n)('vxe.error.notExp')));
};