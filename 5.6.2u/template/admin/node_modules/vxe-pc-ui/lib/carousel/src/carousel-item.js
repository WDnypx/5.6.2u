"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _util = require("./util");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeCarouselItem',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    name: [String, Number],
    className: String,
    url: String
  },
  inject: {
    $xeCarousel: {
      default: null
    }
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {
      currentDate: null
    };
    var itemConfig = {
      id: xID,
      name: '',
      url: '',
      className: '',
      slots: {}
    };
    return {
      xID: xID,
      reactData: reactData,
      itemConfig: itemConfig
    };
  },
  computed: Object.assign({}, {}),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeCarouselItem = this;
      $xeCarouselItem.$emit(type, (0, _ui.createEvent)(evnt, {
        $carouselItem: $xeCarouselItem
      }, params));
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      return h('div', {
        ref: 'refElem'
      });
    }
  },
  watch: {
    name: function name(val) {
      var $xeCarouselItem = this;
      var itemConfig = $xeCarouselItem.itemConfig;
      itemConfig.name = val;
    },
    url: function url(val) {
      var $xeCarouselItem = this;
      var itemConfig = $xeCarouselItem.itemConfig;
      itemConfig.url = val;
    }
  },
  created: function created() {
    var $xeCarouselItem = this;
    var props = $xeCarouselItem;
    var slots = $xeCarouselItem.$scopedSlots;
    var itemConfig = $xeCarouselItem.itemConfig;
    Object.assign(itemConfig, {
      name: props.name,
      url: props.url,
      className: props.className,
      slots: slots
    });
  },
  mounted: function mounted() {
    var $xeCarouselItem = this;
    var slots = $xeCarouselItem.$scopedSlots;
    var itemConfig = $xeCarouselItem.itemConfig;
    var $xeCarousel = $xeCarouselItem.$xeCarousel;
    itemConfig.slots = slots;
    var elem = $xeCarouselItem.$refs.refElem;
    if ($xeCarousel && elem) {
      (0, _util.assembleCarouselItem)($xeCarousel, elem, itemConfig);
    }
  },
  beforeDestroy: function beforeDestroy() {
    var $xeCarouselItem = this;
    var itemConfig = $xeCarouselItem.itemConfig;
    var $xeCarousel = $xeCarouselItem.$xeCarousel;
    if ($xeCarousel) {
      (0, _util.destroyCarouselItem)($xeCarousel, itemConfig);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */