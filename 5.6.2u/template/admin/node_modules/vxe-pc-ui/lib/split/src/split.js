"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _vn = require("../../ui/src/vn");
var _dom = require("../../ui/src/dom");
var _utils = require("../../ui/src/utils");
var _log = require("../../ui/src/log");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeSplit',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    width: [Number, String],
    height: [Number, String],
    vertical: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().split.vertical;
      }
    },
    border: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().split.border;
      }
    },
    padding: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().split.padding;
      }
    },
    resize: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().split.resize;
      }
    },
    items: Array,
    itemConfig: Object,
    barConfig: Object,
    actionConfig: Object
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {
      staticItems: [],
      itemList: []
    };
    var internalData = {};
    return {
      xID: xID,
      reactData: reactData,
      internalData: internalData,
      reFlag: 0
    };
  },
  provide: function provide() {
    var $xeSplit = this;
    return {
      $xeSplit: $xeSplit
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeItemOpts: function computeItemOpts() {
      var $xeSplit = this;
      var props = $xeSplit;
      return Object.assign({}, (0, _ui.getConfig)().split.itemConfig, props.itemConfig);
    },
    computeBarOpts: function computeBarOpts() {
      var $xeSplit = this;
      var props = $xeSplit;
      return Object.assign({}, (0, _ui.getConfig)().split.barConfig, props.barConfig);
    },
    computeActionOpts: function computeActionOpts() {
      var $xeSplit = this;
      var props = $xeSplit;
      return Object.assign({}, (0, _ui.getConfig)().split.actionConfig, props.actionConfig);
    },
    computeIsFoldNext: function computeIsFoldNext() {
      var $xeSplit = this;
      var actionOpts = $xeSplit.computeActionOpts;
      return actionOpts.direction === 'next';
    },
    computeVisibleItems: function computeVisibleItems() {
      var $xeSplit = this;
      var reactData = $xeSplit.reactData;
      return reactData.itemList.filter(function (item) {
        return item.isVisible;
      });
    },
    computeAutoItems: function computeAutoItems() {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      var vertical = props.vertical;
      return reactData.itemList.filter(function (item) {
        return vertical ? !item.height : !item.width;
      });
    },
    computeBarStyle: function computeBarStyle() {
      var $xeSplit = this;
      var barOpts = $xeSplit.computeBarOpts;
      var width = barOpts.width,
        height = barOpts.height;
      var stys = {};
      if (height) {
        stys.height = (0, _dom.toCssUnit)(height);
      }
      if (width) {
        stys.width = (0, _dom.toCssUnit)(width);
      }
      return stys;
    },
    computeSItemSize: function computeSItemSize() {
      var $xeSplit = this;
      var reactData = $xeSplit.reactData;
      return reactData.staticItems.length;
    }
  }),
  watch: {
    items: function items(val) {
      var $xeSplit = this;
      $xeSplit.loadItem(val || []);
    },
    computeSItemSize: function computeSItemSize() {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      if (props.items && props.items.length) {
        (0, _log.errLog)('vxe.error.errConflicts', ['<vxe-split-pane ...>', 'items']);
      }
      reactData.itemList = reactData.staticItems;
      $xeSplit.recalculate();
    }
  },
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeSplit = this;
      $xeSplit.$emit(type, (0, _ui.createEvent)(evnt, {
        $split: $xeSplit
      }, params));
    },
    callSlot: function callSlot(slotFunc, params) {
      var $xeSplit = this;
      var slots = $xeSplit.$scopedSlots;
      if (slotFunc) {
        if (_xeUtils.default.isString(slotFunc)) {
          slotFunc = slots[slotFunc] || null;
        }
        if (_xeUtils.default.isFunction(slotFunc)) {
          return (0, _vn.getSlotVNs)(slotFunc(params));
        }
      }
      return [];
    },
    reset: function reset() {
      var $xeSplit = this;
      var reactData = $xeSplit.reactData;
      var itemList = reactData.itemList;
      itemList.forEach(function (item) {
        item.isExpand = true;
        item.isVisible = true;
        item.foldHeight = 0;
        item.foldWidth = 0;
        item.resizeHeight = 0;
        item.resizeWidth = 0;
      });
      return $xeSplit.$nextTick();
    },
    handleLoadItem: function handleLoadItem(list, isReset) {
      var $xeSplit = this;
      var slots = $xeSplit.$scopedSlots;
      var reactData = $xeSplit.reactData;
      var staticItems = reactData.staticItems;
      var itemDef = {
        isVisible: true,
        isExpand: true,
        renderWidth: 0,
        resizeWidth: 0,
        foldWidth: 0,
        renderHeight: 0,
        resizeHeight: 0,
        foldHeight: 0
      };
      reactData.itemList = list.map(function (item) {
        if (item.slots) {
          _xeUtils.default.each(item.slots, function (func) {
            if (!_xeUtils.default.isFunction(func)) {
              if (!slots[func]) {
                (0, _log.errLog)('vxe.error.notSlot', [func]);
              }
            }
          });
        }
        return Object.assign({}, isReset ? null : itemDef, item, isReset ? itemDef : null, {
          id: _xeUtils.default.uniqueId()
        });
      });
      if (staticItems.length) {
        (0, _log.errLog)('vxe.error.errConflicts', ['<vxe-split-pane ...>', 'items']);
      }
      return $xeSplit.recalculate();
    },
    loadItem: function loadItem(list) {
      var $xeSplit = this;
      return $xeSplit.handleLoadItem(list || [], false);
    },
    reloadItem: function reloadItem(list) {
      var $xeSplit = this;
      return $xeSplit.handleLoadItem(list || [], true);
    },
    recalculate: function recalculate() {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      return $xeSplit.$nextTick().then(function () {
        var vertical = props.vertical;
        var itemList = reactData.itemList;
        var el = $xeSplit.$refs.refElem;
        if (!el) {
          return;
        }
        var wrapperWidth = el.clientWidth;
        var wrapperHeight = el.clientHeight;
        if (!wrapperWidth || !wrapperHeight) {
          return;
        }
        var itemOpts = $xeSplit.computeItemOpts;
        var allMinWidth = _xeUtils.default.toNumber(itemOpts.minWidth);
        var allMinHeight = _xeUtils.default.toNumber(itemOpts.minHeight);
        var residueItems = [];
        if (vertical) {
          var countHeight = 0;
          itemList.forEach(function (item) {
            var height = item.height;
            var itemHeight = 0;
            if (height) {
              if ((0, _dom.isScale)(height)) {
                itemHeight = wrapperHeight * _xeUtils.default.toNumber(height);
              } else {
                itemHeight = _xeUtils.default.toNumber(height);
              }
              item.renderHeight = itemHeight;
            } else {
              residueItems.push(item);
            }
            countHeight += itemHeight;
          });
          if (residueItems.length) {
            var reMeanHeight = (wrapperHeight - countHeight) / residueItems.length;
            residueItems.forEach(function (item) {
              item.renderHeight = Math.max(_xeUtils.default.toNumber((0, _utils.getGlobalDefaultConfig)(item.minHeight, allMinHeight)), reMeanHeight);
            });
          }
        } else {
          var countWidth = 0;
          itemList.forEach(function (item) {
            var width = item.width;
            var itemWidth = 0;
            if (width) {
              if ((0, _dom.isScale)(width)) {
                itemWidth = wrapperWidth * _xeUtils.default.toNumber(width);
              } else {
                itemWidth = _xeUtils.default.toNumber(width);
              }
              item.renderWidth = itemWidth;
            } else {
              residueItems.push(item);
            }
            countWidth += itemWidth;
          });
          if (residueItems.length) {
            var reMeanWidth = (wrapperWidth - countWidth) / residueItems.length;
            residueItems.forEach(function (item) {
              item.renderWidth = Math.max(_xeUtils.default.toNumber((0, _utils.getGlobalDefaultConfig)(item.minWidth, allMinWidth)), reMeanWidth);
            });
          }
        }
      });
    },
    dragEvent: function dragEvent(evnt) {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      var resize = props.resize,
        vertical = props.vertical;
      var itemList = reactData.itemList;
      if (!resize) {
        return;
      }
      evnt.preventDefault();
      var barEl = evnt.currentTarget;
      var handleEl = barEl.parentElement;
      var el = $xeSplit.$refs.refElem;
      if (!el) {
        return;
      }
      var itemId = handleEl.getAttribute('itemid');
      var itemIndex = _xeUtils.default.findIndexOf(itemList, function (item) {
        return item.id === itemId;
      });
      var item = itemList[itemIndex];
      if (!item) {
        return;
      }
      if (!item.isExpand) {
        return;
      }
      var isFoldNext = $xeSplit.computeIsFoldNext;
      var itemOpts = $xeSplit.computeItemOpts;
      var allMinWidth = _xeUtils.default.toNumber(itemOpts.minWidth);
      var allMinHeight = _xeUtils.default.toNumber(itemOpts.minHeight);
      var targetItem = itemList[itemIndex + (isFoldNext ? 1 : -1)];
      var targetItemEl = targetItem ? el.querySelector(".vxe-split-pane[itemid=\"".concat(targetItem.id, "\"]")) : null;
      var currItemEl = item ? el.querySelector(".vxe-split-pane[itemid=\"".concat(item.id, "\"]")) : null;
      var targetWidth = targetItemEl ? targetItemEl.clientWidth : 0;
      var currWidth = currItemEl ? currItemEl.clientWidth : 0;
      var targetHeight = targetItemEl ? targetItemEl.clientHeight : 0;
      var currHeight = currItemEl ? currItemEl.clientHeight : 0;
      var targetMinWidth = _xeUtils.default.toNumber(targetItem ? (0, _utils.getGlobalDefaultConfig)(targetItem.minWidth, allMinWidth) : allMinWidth);
      var currMinWidth = _xeUtils.default.toNumber((0, _utils.getGlobalDefaultConfig)(item.minWidth, allMinWidth));
      var targetMinHeight = _xeUtils.default.toNumber(targetItem ? (0, _utils.getGlobalDefaultConfig)(targetItem.minHeight, allMinHeight) : allMinHeight);
      var currMinHeight = _xeUtils.default.toNumber((0, _utils.getGlobalDefaultConfig)(item.minHeight, allMinHeight));
      var disX = evnt.clientX;
      var disY = evnt.clientY;
      (0, _dom.addClass)(el, 'is--drag');
      document.onmousemove = function (evnt) {
        evnt.preventDefault();
        if (vertical) {
          var offsetTop = isFoldNext ? disY - evnt.clientY : evnt.clientY - disY;
          if (offsetTop > 0) {
            if (targetItem) {
              if (currHeight - offsetTop >= currMinHeight) {
                var reHeight = currHeight - offsetTop;
                targetItem.resizeHeight = targetHeight + offsetTop;
                item.resizeHeight = reHeight;
                $xeSplit.dispatchEvent('resize-drag', {
                  item: item,
                  name: item.name,
                  offsetHeight: offsetTop,
                  resizeHeight: reHeight,
                  offsetWidth: 0,
                  resizeWidth: 0
                }, evnt);
              }
            }
          } else {
            if (targetItem) {
              if (targetHeight + offsetTop >= targetMinHeight) {
                var _reHeight = currHeight - offsetTop;
                targetItem.resizeHeight = targetHeight + offsetTop;
                item.resizeHeight = _reHeight;
                $xeSplit.dispatchEvent('resize-drag', {
                  item: item,
                  name: item.name,
                  offsetHeight: offsetTop,
                  resizeHeight: _reHeight,
                  offsetWidth: 0,
                  resizeWidth: 0
                }, evnt);
              }
            }
          }
        } else {
          var offsetLeft = isFoldNext ? disX - evnt.clientX : evnt.clientX - disX;
          if (offsetLeft > 0) {
            if (targetItem) {
              if (currWidth - offsetLeft >= currMinWidth) {
                var reWidth = currWidth - offsetLeft;
                targetItem.resizeWidth = targetWidth + offsetLeft;
                item.resizeWidth = reWidth;
                $xeSplit.dispatchEvent('resize-drag', {
                  item: item,
                  name: item.name,
                  offsetHeight: 0,
                  resizeHeight: 0,
                  offsetWidth: offsetLeft,
                  resizeWidth: reWidth
                }, evnt);
              }
            }
          } else {
            if (targetItem) {
              if (targetWidth + offsetLeft >= targetMinWidth) {
                var _reWidth = currWidth - offsetLeft;
                targetItem.resizeWidth = targetWidth + offsetLeft;
                item.resizeWidth = _reWidth;
                $xeSplit.dispatchEvent('resize-drag', {
                  item: item,
                  name: item.name,
                  offsetHeight: 0,
                  resizeHeight: 0,
                  offsetWidth: offsetLeft,
                  resizeWidth: _reWidth
                }, evnt);
              }
            }
          }
        }
      };
      document.onmouseup = function (evnt) {
        document.onmousemove = null;
        document.onmouseup = null;
        (0, _dom.removeClass)(el, 'is--drag');
        $xeSplit.dispatchEvent('resize-end', {
          item: item,
          name: item.name,
          resizeHeight: item.resizeHeight,
          resizeWidth: item.resizeWidth
        }, evnt);
        $xeSplit.recalculate();
      };
      $xeSplit.dispatchEvent('resize-start', {
        item: item,
        name: item.name
      }, evnt);
    },
    handleItemActionEvent: function handleItemActionEvent(evnt) {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      var el = $xeSplit.$refs.refElem;
      if (!el) {
        return;
      }
      var vertical = props.vertical;
      var itemList = reactData.itemList;
      var isFoldNext = $xeSplit.computeIsFoldNext;
      var btnEl = evnt.currentTarget;
      var handleEl = btnEl.parentElement;
      var itemId = handleEl.getAttribute('itemid');
      var itemIndex = _xeUtils.default.findIndexOf(itemList, function (item) {
        return item.id === itemId;
      });
      var item = itemList[itemIndex];
      var targetItem = itemList[itemIndex + (isFoldNext ? 1 : -1)];
      if (item) {
        var showAction = item.showAction,
          isExpand = item.isExpand;
        if (showAction) {
          if (vertical) {
            if (targetItem) {
              targetItem.isVisible = !isExpand;
              targetItem.foldHeight = 0;
              item.isExpand = !isExpand;
              item.isVisible = true;
              item.foldHeight = isExpand ? (targetItem.resizeHeight || targetItem.renderHeight) + (item.resizeHeight || item.renderHeight) : 0;
            }
          } else {
            if (targetItem) {
              targetItem.isVisible = !isExpand;
              targetItem.foldWidth = 0;
              item.isExpand = !isExpand;
              item.isVisible = true;
              item.foldWidth = isExpand ? (targetItem.resizeWidth || targetItem.renderWidth) + (item.resizeWidth || item.renderWidth) : 0;
            }
          }
          $xeSplit.dispatchEvent('toggle-expand', {
            item: item,
            name: item.name,
            targetItem: targetItem,
            targetName: targetItem ? targetItem.name : '',
            expanded: item.isExpand
          }, evnt);
          $xeSplit.recalculate();
        }
      }
    },
    handleActionDblclickEvent: function handleActionDblclickEvent(evnt) {
      var $xeSplit = this;
      var reactData = $xeSplit.reactData;
      var itemList = reactData.itemList;
      var actionOpts = $xeSplit.computeActionOpts;
      var btnEl = evnt.currentTarget;
      var handleEl = btnEl.parentElement;
      var itemId = handleEl.getAttribute('itemid');
      var itemIndex = _xeUtils.default.findIndexOf(itemList, function (item) {
        return item.id === itemId;
      });
      var item = itemList[itemIndex];
      if (actionOpts.trigger === 'dblclick') {
        $xeSplit.handleItemActionEvent(evnt);
      }
      $xeSplit.dispatchEvent('action-dblclick', {
        item: item,
        name: item ? item.name : ''
      }, evnt);
    },
    handleActionClickEvent: function handleActionClickEvent(evnt) {
      var $xeSplit = this;
      var reactData = $xeSplit.reactData;
      var itemList = reactData.itemList;
      var actionOpts = $xeSplit.computeActionOpts;
      var btnEl = evnt.currentTarget;
      var handleEl = btnEl.parentElement;
      var itemId = handleEl.getAttribute('itemid');
      var itemIndex = _xeUtils.default.findIndexOf(itemList, function (item) {
        return item.id === itemId;
      });
      var item = itemList[itemIndex];
      if (actionOpts.trigger !== 'dblclick') {
        $xeSplit.handleItemActionEvent(evnt);
      }
      $xeSplit.dispatchEvent('action-click', {
        item: item,
        name: item ? item.name : ''
      }, evnt);
    },
    handleGlobalResizeEvent: function handleGlobalResizeEvent() {
      var $xeSplit = this;
      $xeSplit.recalculate();
    },
    getDefaultActionIcon: function getDefaultActionIcon(item) {
      var $xeSplit = this;
      var props = $xeSplit;
      var vertical = props.vertical;
      var showAction = item.showAction,
        isExpand = item.isExpand;
      var isFoldNext = $xeSplit.computeIsFoldNext;
      var topIcon = 'SPLIT_TOP_ACTION';
      var bottomIcon = 'SPLIT_BOTTOM_ACTION';
      var leftIcon = 'SPLIT_LEFT_ACTION';
      var rightIcon = 'SPLIT_RIGHT_ACTION';
      if (showAction) {
        var iconName = '';
        if (isFoldNext) {
          if (vertical) {
            iconName = isExpand ? bottomIcon : topIcon;
          } else {
            iconName = isExpand ? rightIcon : leftIcon;
          }
        } else {
          if (vertical) {
            iconName = isExpand ? topIcon : bottomIcon;
          } else {
            iconName = isExpand ? leftIcon : rightIcon;
          }
        }
        if (iconName) {
          return (0, _ui.getIcon)()[iconName];
        }
      }
      return '';
    },
    //
    // Render
    //
    renderHandleBar: function renderHandleBar(h, item) {
      var $xeSplit = this;
      var barStyle = $xeSplit.computeBarStyle;
      var actionOpts = $xeSplit.computeActionOpts;
      var isFoldNext = $xeSplit.computeIsFoldNext;
      var id = item.id,
        isExpand = item.isExpand,
        showAction = item.showAction;
      var btnOns = {};
      if (actionOpts.trigger === 'dblclick') {
        btnOns.dblclick = $xeSplit.handleItemActionEvent;
      } else {
        btnOns.click = $xeSplit.handleItemActionEvent;
      }
      return h('div', {
        attrs: {
          itemid: id
        },
        class: ['vxe-split-pane-handle', isFoldNext ? 'to--next' : 'to--prev']
      }, [h('div', {
        class: 'vxe-split-pane-handle-bar',
        style: barStyle,
        on: {
          mousedown: $xeSplit.dragEvent
        }
      }), showAction ? h('span', {
        class: 'vxe-split-pane-action-btn',
        on: btnOns
      }, [h('i', {
        class: (isExpand ? actionOpts.openIcon : actionOpts.closeIcon) || $xeSplit.getDefaultActionIcon(item)
      })]) : (0, _ui.renderEmptyElement)($xeSplit)]);
    },
    renderItems: function renderItems(h) {
      var $xeSplit = this;
      var props = $xeSplit;
      var reactData = $xeSplit.reactData;
      var border = props.border,
        padding = props.padding,
        resize = props.resize,
        vertical = props.vertical;
      var itemList = reactData.itemList;
      var visibleItems = $xeSplit.computeVisibleItems;
      var autoItems = $xeSplit.computeAutoItems;
      var isFoldNext = $xeSplit.computeIsFoldNext;
      var itemVNs = [];
      itemList.forEach(function (item, index) {
        var id = item.id,
          name = item.name,
          slots = item.slots,
          renderHeight = item.renderHeight,
          resizeHeight = item.resizeHeight,
          foldHeight = item.foldHeight,
          renderWidth = item.renderWidth,
          resizeWidth = item.resizeWidth,
          foldWidth = item.foldWidth,
          isVisible = item.isVisible,
          isExpand = item.isExpand;
        var defaultSlot = slots ? slots.default : null;
        var stys = {};
        var itemWidth = isVisible ? foldWidth || resizeWidth || renderWidth : 0;
        var itemHeight = isVisible ? foldHeight || resizeHeight || renderHeight : 0;
        // 至少存在一个自适应
        if (autoItems.length === 1) {
          if (vertical) {
            if (!item.height) {
              itemHeight = 0;
            }
          } else {
            if (!item.width) {
              itemWidth = 0;
            }
          }
        }
        // 当只剩下一个可视区自动占用 100%
        if (vertical) {
          if (itemHeight) {
            stys.height = visibleItems.length === 1 ? '100%' : (0, _dom.toCssUnit)(itemHeight);
          }
        } else {
          if (itemWidth) {
            stys.width = visibleItems.length === 1 ? '100%' : (0, _dom.toCssUnit)(itemWidth);
          }
        }
        itemVNs.push(h('div', {
          attrs: {
            itemid: id
          },
          class: ['vxe-split-pane', vertical ? 'is--vertical' : 'is--horizontal', {
            'is--resize': resize,
            'is--padding': padding,
            'is--border': border,
            'is--height': itemHeight,
            'is--width': itemWidth,
            'is--fill': isVisible && !itemHeight && !itemWidth,
            'is--handle': index > 0,
            'is--expand': isExpand,
            'is--hidden': !isVisible
          }],
          style: stys
        }, [index && !isFoldNext ? $xeSplit.renderHandleBar(h, item) : (0, _ui.renderEmptyElement)($xeSplit), h('div', {
          attrs: {
            itemid: id
          },
          class: 'vxe-split-pane--wrapper'
        }, [h('div', {
          class: 'vxe-split-pane--inner'
        }, defaultSlot ? $xeSplit.callSlot(defaultSlot, {
          name: name,
          isVisible: isVisible,
          isExpand: isExpand
        }) : [])]), isFoldNext && index < itemList.length - 1 ? $xeSplit.renderHandleBar(h, item) : (0, _ui.renderEmptyElement)($xeSplit)]));
      });
      return h('div', {
        class: 'vxe-split-wrapper'
      }, itemVNs);
    },
    renderVN: function renderVN(h) {
      var $xeSplit = this;
      var props = $xeSplit;
      var slots = $xeSplit.$scopedSlots;
      var vertical = props.vertical,
        width = props.width,
        height = props.height;
      var defaultSlot = slots.default;
      var stys = {};
      if (height) {
        stys.height = (0, _dom.toCssUnit)(height);
      }
      if (width) {
        stys.width = (0, _dom.toCssUnit)(width);
      }
      return h('div', {
        ref: 'refElem',
        class: ['vxe-split', vertical ? 'is--vertical' : 'is--horizontal'],
        style: stys
      }, [h('div', {
        class: 'vxe-split-slots'
      }, defaultSlot ? defaultSlot({}) : []), $xeSplit.renderItems(h)]);
    }
  },
  created: function created() {
    var $xeSplit = this;
    _ui.globalEvents.on($xeSplit, 'resize', $xeSplit.handleGlobalResizeEvent);
  },
  mounted: function mounted() {
    var $xeSplit = this;
    var props = $xeSplit;
    var el = $xeSplit.$refs.refElem;
    if (el) {
      var resizeObserver = _ui.globalResize.create(function () {
        $xeSplit.recalculate();
      });
      resizeObserver.observe(el);
      this.$resize = resizeObserver;
    }
    if (props.items) {
      $xeSplit.loadItem(props.items);
    }
    $xeSplit.$nextTick(function () {
      $xeSplit.recalculate();
    });
  },
  beforeDestroy: function beforeDestroy() {
    var $xeSplit = this;
    if (this.$resize) {
      this.$resize.disconnect();
    }
    _ui.globalEvents.off($xeSplit, 'resize');
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */