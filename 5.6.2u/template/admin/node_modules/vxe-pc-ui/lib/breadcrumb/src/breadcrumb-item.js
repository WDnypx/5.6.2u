"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeBreadcrumbItem',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    title: String,
    routerLink: Object
  },
  inject: {
    $xeBreadcrumb: {
      default: null
    }
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {};
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeSeparator: function computeSeparator() {
      var $xeBreadcrumbItem = this;
      var $xeBreadcrumb = $xeBreadcrumbItem.$xeBreadcrumb;
      if ($xeBreadcrumb) {
        return $xeBreadcrumb.separator;
      }
      return '';
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeBreadcrumbItem = this;
      $xeBreadcrumbItem.$emit(type, (0, _ui.createEvent)(evnt, {
        $breadcrumbItem: $xeBreadcrumbItem
      }, params));
    },
    clickEvent: function clickEvent(evnt) {
      var $xeBreadcrumbItem = this;
      var props = $xeBreadcrumbItem;
      var $xeBreadcrumb = $xeBreadcrumbItem.$xeBreadcrumb;
      if ($xeBreadcrumb) {
        var item = {
          title: props.title,
          routerLink: props.routerLink
        };
        $xeBreadcrumb.handleClickLink(evnt, item);
      }
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeBreadcrumbItem = this;
      var props = $xeBreadcrumbItem;
      var slots = $xeBreadcrumbItem.$scopedSlots;
      var title = props.title,
        routerLink = props.routerLink;
      var separator = $xeBreadcrumbItem.computeSeparator;
      var defaultSlot = slots.default;
      return h('span', {
        ref: 'refElem',
        class: 'vxe-breadcrumb-item',
        on: {
          click: $xeBreadcrumbItem.clickEvent
        }
      }, [h('span', {
        class: 'vxe-breadcrumb-item--content'
      }, [routerLink ? h('router-link', {
        class: 'vxe-breadcrumb-item--content-link',
        props: {
          title: title,
          custom: true,
          to: routerLink
        }
      }, [h('span', {
        class: 'vxe-breadcrumb-item--content-text'
      }, defaultSlot ? defaultSlot({}) : "".concat(title || ''))]) : h('span', {
        class: 'vxe-breadcrumb-item--content-text'
      }, defaultSlot ? defaultSlot({}) : "".concat(title || ''))]), separator ? h('span', {
        class: 'vxe-breadcrumb-item--separator'
      }, "".concat(separator)) : (0, _ui.renderEmptyElement)($xeBreadcrumbItem)]);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */