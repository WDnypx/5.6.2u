"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _ui = require("../../ui");
var _vn = require("../../ui/src/vn");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeLoading',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    value: Boolean,
    icon: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().loading.icon;
      }
    },
    showIcon: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().loading.showIcon;
      }
    },
    text: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().loading.text;
      }
    },
    showText: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().loading.showText;
      }
    },
    status: String,
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().loading.size || (0, _ui.getConfig)().size;
      }
    }
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {
      initialized: false
    };
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeLoadingIcon: function computeLoadingIcon() {
      var $xeLoading = this;
      var props = $xeLoading;
      return props.icon || (0, _ui.getIcon)().LOADING;
    },
    computeLoadingText: function computeLoadingText() {
      var $xeLoading = this;
      var props = $xeLoading;
      var text = props.text;
      return _xeUtils.default.isString(text) ? text : (0, _ui.getI18n)('vxe.loading.text');
    }
  }),
  watch: {
    value: function value() {
      this.handleInit();
    }
  },
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeLoading = this;
      $xeLoading.$emit(type, (0, _ui.createEvent)(evnt, {
        $loading: $xeLoading
      }, params));
    },
    emitModel: function emitModel(value) {
      var $xeLoading = this;
      var _events = $xeLoading._events;
      $xeLoading.$emit('input', value);
      if (_events && _events.modelValue) {
        $xeLoading.$emit('modelValue', value);
      } else {
        $xeLoading.$emit('model-value', value);
      }
    },
    handleInit: function handleInit() {
      var $xeLoading = this;
      var reactData = $xeLoading.reactData;
      if (!reactData.initialized) {
        reactData.initialized = !!reactData.initialized;
      }
    },
    //
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeLoading = this;
      var props = $xeLoading;
      var slots = $xeLoading.$scopedSlots;
      var reactData = $xeLoading.reactData;
      var value = props.value,
        showIcon = props.showIcon,
        status = props.status;
      var initialized = reactData.initialized;
      var vSize = $xeLoading.computeSize;
      var defaultSlot = slots.default;
      var textSlot = slots.text;
      var iconSlot = slots.icon;
      var loadingIcon = $xeLoading.computeLoadingIcon;
      var loadingText = $xeLoading.computeLoadingText;
      if (!initialized && !value) {
        return (0, _ui.renderEmptyElement)($xeLoading);
      }
      return h('div', {
        class: ['vxe-loading', _defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(status), status), 'is--visible', value)]
      }, defaultSlot ? [h('div', {
        class: 'vxe-loading--wrapper'
      }, (0, _vn.getSlotVNs)(defaultSlot({})))] : [h('div', {
        class: 'vxe-loading--chunk'
      }, [showIcon && (iconSlot || loadingIcon) ? h('div', {
        class: 'vxe-loading--icon'
      }, iconSlot ? (0, _vn.getSlotVNs)(iconSlot({})) : [h('i', {
        class: loadingIcon
      })]) : h('div', {
        class: 'vxe-loading--spinner'
      }), textSlot || loadingText ? h('div', {
        class: 'vxe-loading--text'
      }, textSlot ? (0, _vn.getSlotVNs)(textSlot({})) : "".concat(loadingText)) : null])]);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */