"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _util = require("./util");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeAnchorLink',
  props: {
    content: [String, Number],
    title: [String, Number],
    href: String
  },
  inject: {
    $xeAnchor: {
      default: null
    },
    $xeParentAnchorLink: {
      from: '$xeAnchorLink',
      default: null
    }
  },
  provide: function provide() {
    var $xeAnchorLink = this;
    return {
      $xeAnchorLink: $xeAnchorLink
    };
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {};
    var linkConfig = {
      id: xID,
      href: '',
      children: []
    };
    return {
      xID: xID,
      reactData: reactData,
      linkConfig: linkConfig
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeIsActive: function computeIsActive() {
      var $xeAnchorLink = this;
      var props = $xeAnchorLink;
      var $xeAnchor = $xeAnchorLink.$xeAnchor;
      var href = props.href;
      if ($xeAnchor) {
        return $xeAnchor.reactData.activeHref === href;
      }
      return null;
    }
  }),
  watch: {
    href: function href(val) {
      var $xeAnchorLink = this;
      var linkConfig = $xeAnchorLink.linkConfig;
      linkConfig.href = val;
    }
  },
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeAnchorLink = this;
      $xeAnchorLink.$emit(type, (0, _ui.createEvent)(evnt, {
        $anchorLink: $xeAnchorLink
      }, params));
    },
    clickEvent: function clickEvent(event) {
      var $xeAnchorLink = this;
      var props = $xeAnchorLink;
      var $xeAnchor = $xeAnchorLink.$xeAnchor;
      var href = props.href;
      if ($xeAnchor) {
        $xeAnchor.handleClickLink(event, href);
      }
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeAnchorLink = this;
      var props = $xeAnchorLink;
      var slots = $xeAnchorLink.$scopedSlots;
      var href = props.href,
        content = props.content,
        title = props.title;
      var defaultSlot = slots.default;
      var subSlot = slots.sub;
      var isActive = $xeAnchorLink.computeIsActive;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-anchor-link', {
          'is--active': isActive
        }]
      }, [h('a', {
        class: 'vxe-anchor-link--item',
        attrs: {
          href: href,
          title: title
        },
        on: {
          click: $xeAnchorLink.clickEvent
        }
      }, defaultSlot ? defaultSlot({}) : _xeUtils.default.toValueString(content)), subSlot ? h('div', {
        class: 'vxe-anchor-link--sub-items'
      }, subSlot({})) : (0, _ui.renderEmptyElement)($xeAnchorLink)]);
    }
  },
  created: function created() {
    var $xeAnchorLink = this;
    var props = $xeAnchorLink;
    var linkConfig = $xeAnchorLink.linkConfig;
    linkConfig.href = props.href;
  },
  mounted: function mounted() {
    var $xeAnchorLink = this;
    var $xeAnchor = $xeAnchorLink.$xeAnchor;
    var $xeParentAnchorLink = $xeAnchorLink.$xeParentAnchorLink;
    var linkConfig = $xeAnchorLink.linkConfig;
    var elem = $xeAnchorLink.$refs.refElem;
    if ($xeAnchor && elem) {
      (0, _util.assembleAnchorLink)($xeAnchor, elem, linkConfig, $xeParentAnchorLink);
    }
  },
  beforeDestroy: function beforeDestroy() {
    var $xeAnchorLink = this;
    var $xeAnchor = $xeAnchorLink.$xeAnchor;
    var linkConfig = $xeAnchorLink.linkConfig;
    if ($xeAnchor) {
      (0, _util.destroyAnchorLink)($xeAnchor, linkConfig);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */