"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeRate',
  mixins: [_ui.globalMixins.sizeMixin, _ui.globalMixins.permissionMixin],
  props: {
    value: [Number, String],
    disabled: {
      type: Boolean,
      default: null
    },
    readonly: {
      type: Boolean,
      default: null
    },
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().rate.size || (0, _ui.getConfig)().size;
      }
    },
    status: String
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {
      activeValue: null
    };
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeIsDisabled: function computeIsDisabled() {
      var $xeRate = this;
      var props = $xeRate;
      var $xeForm = $xeRate.$xeForm;
      var disabled = props.disabled;
      if (disabled === null) {
        if ($xeForm) {
          return $xeForm.readonly || $xeForm.disabled;
        }
        return false;
      }
      return disabled;
    },
    computeIsReadonly: function computeIsReadonly() {
      var $xeRate = this;
      var props = $xeRate;
      var $xeForm = $xeRate.$xeForm;
      var readonly = props.readonly;
      if (readonly === null) {
        if ($xeForm) {
          return $xeForm.readonly || $xeForm.disabled;
        }
        return false;
      }
      return readonly;
    },
    computeNumVal: function computeNumVal() {
      var $xeRate = this;
      var props = $xeRate;
      var reactData = $xeRate.reactData;
      var value = props.value;
      var activeValue = reactData.activeValue;
      return _xeUtils.default.toNumber(activeValue === null ? value : activeValue);
    },
    computeItemList: function computeItemList() {
      return [1, 2, 3, 4, 5].map(function (num) {
        return {
          value: num,
          label: num
        };
      });
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeRate = this;
      $xeRate.$emit(type, (0, _ui.createEvent)(evnt, {
        $rate: $xeRate
      }, params));
    },
    emitModel: function emitModel(value) {
      var $xeRate = this;
      var _events = $xeRate._events;
      $xeRate.$emit('input', value);
      if (_events && _events.modelValue) {
        $xeRate.$emit('modelValue', value);
      } else {
        $xeRate.$emit('model-value', value);
      }
    },
    mouseenterEvent: function mouseenterEvent(evnt, item) {
      var $xeRate = this;
      var reactData = $xeRate.reactData;
      var isDisabled = $xeRate.computeIsDisabled;
      var isReadonly = $xeRate.computeIsReadonly;
      if (!(isDisabled || isReadonly)) {
        var value = item.value;
        reactData.activeValue = value;
      }
    },
    mouseleaveEvent: function mouseleaveEvent() {
      var $xeRate = this;
      var reactData = $xeRate.reactData;
      reactData.activeValue = null;
    },
    clickEvent: function clickEvent(evnt, item) {
      var $xeRate = this;
      var $xeForm = $xeRate.$xeForm;
      var formItemInfo = $xeRate.formItemInfo;
      var isDisabled = $xeRate.computeIsDisabled;
      var isReadonly = $xeRate.computeIsReadonly;
      if (!(isDisabled || isReadonly)) {
        var value = item.value;
        $xeRate.emitModel(value);
        $xeRate.dispatchEvent('change', {
          value: value
        }, evnt);
        // 自动更新校验状态
        if ($xeForm && formItemInfo) {
          $xeForm.triggerItemEvent(evnt, formItemInfo.itemConfig.field, value);
        }
      }
    },
    //
    // Render
    //
    renderVN: function renderVN(h) {
      var $xeRate = this;
      var props = $xeRate;
      var status = props.status;
      var isDisabled = $xeRate.computeIsDisabled;
      var isReadonly = $xeRate.computeIsReadonly;
      var itemList = $xeRate.computeItemList;
      var vSize = $xeRate.computeSize;
      var numVal = $xeRate.computeNumVal;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-rate', _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(status), status), 'is--disabled', isDisabled), 'is--readonly', isReadonly)]
      }, itemList.map(function (item) {
        var isChecked = numVal >= item.value;
        return h('div', {
          class: ['vxe-rte--item', {
            'is--checked': isChecked
          }],
          on: {
            mouseenter: function mouseenter(evnt) {
              if (!(isDisabled || isReadonly)) {
                $xeRate.mouseenterEvent(evnt, item);
              }
            },
            mouseleave: $xeRate.mouseleaveEvent,
            click: function click(evnt) {
              if (!(isDisabled || isReadonly)) {
                $xeRate.clickEvent(evnt, item);
              }
            }
          }
        }, [h('i', {
          class: isChecked ? (0, _ui.getIcon)().RATE_CHECKED : (0, _ui.getIcon)().RATE_UNCHECKED
        })]);
      }));
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */