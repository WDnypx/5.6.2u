"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
var _dom = require("../../ui/src/dom");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeAvatar',
  mixins: [_ui.globalMixins.sizeMixin],
  props: {
    count: [String, Number],
    dot: Boolean,
    content: [String, Number],
    icon: String,
    src: String,
    width: [String, Number],
    height: [String, Number],
    circle: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().avatar.circle;
      }
    },
    status: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().avatar.status;
      }
    },
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().avatar.size || (0, _ui.getConfig)().size;
      }
    }
  },
  data: function data() {
    var xID = _xeUtils.default.uniqueId();
    var reactData = {};
    return {
      xID: xID,
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeAvatarStyle: function computeAvatarStyle() {
      var $xeAvatar = this;
      var props = $xeAvatar;
      var width = props.width,
        height = props.height;
      var stys = {};
      if (width) {
        stys.width = (0, _dom.toCssUnit)(width);
      }
      if (height) {
        stys.height = (0, _dom.toCssUnit)(height);
      }
      return stys;
    },
    computeCountNum: function computeCountNum() {
      var $xeAvatar = this;
      var props = $xeAvatar;
      var count = props.count;
      return count ? _xeUtils.default.toNumber(count) : 0;
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeAvatar = this;
      $xeAvatar.$emit(type, (0, _ui.createEvent)(evnt, {
        $avatar: $xeAvatar
      }, params));
    },
    //
    // Render
    //
    renderContent: function renderContent(h) {
      var $xeAvatar = this;
      var props = $xeAvatar;
      var icon = props.icon,
        content = props.content,
        src = props.src;
      if (icon) {
        return h('span', {
          class: 'vxe-avatar--icon'
        }, [h('i', {
          class: icon
        })]);
      }
      if (content) {
        return h('span', {
          class: 'vxe-avatar--content'
        }, "".concat(content));
      }
      if (src) {
        return h('img', {
          class: 'vxe-avatar--img',
          attrs: {
            src: src
          }
        });
      }
      return (0, _ui.renderEmptyElement)($xeAvatar);
    },
    renderVN: function renderVN(h) {
      var $xeAvatar = this;
      var props = $xeAvatar;
      var circle = props.circle,
        dot = props.dot,
        status = props.status;
      var vSize = $xeAvatar.computeSize;
      var countNum = $xeAvatar.computeCountNum;
      var avatarStyle = $xeAvatar.computeAvatarStyle;
      return h('div', {
        ref: 'refElem',
        class: ['vxe-avatar', _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(status), status), 'is--circle', circle), 'is--dot', dot)],
        style: avatarStyle
      }, [$xeAvatar.renderContent(h), countNum ? h('span', {
        class: 'vxe-avatar--count'
      }, countNum > 99 ? '99+' : "".concat(countNum)) : (0, _ui.renderEmptyElement)($xeAvatar)]);
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */