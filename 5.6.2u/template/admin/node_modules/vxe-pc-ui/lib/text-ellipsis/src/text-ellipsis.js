"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _comp = require("../../ui/src/comp");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _ui = require("../../ui");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default2 = exports.default = /* define-vxe-component start */(0, _comp.defineVxeComponent)({
  name: 'VxeTextEllipsis',
  mixins: [_ui.globalMixins.sizeMixin, _ui.globalMixins.permissionMixin],
  props: {
    href: String,
    target: String,
    content: [String, Number],
    lineClamp: [String, Number],
    status: String,
    title: [String, Number],
    loading: Boolean,
    offsetLength: [String, Number],
    routerLink: Object,
    underline: {
      type: Boolean,
      default: function _default() {
        return (0, _ui.getConfig)().textEllipsis.underline;
      }
    },
    /**
     * 权限码
     */
    permissionCode: [String, Number],
    size: {
      type: String,
      default: function _default() {
        return (0, _ui.getConfig)().textEllipsis.size || (0, _ui.getConfig)().size;
      }
    }
  },
  data: function data() {
    var reactData = {
      resizeObserver: null,
      visibleLen: 0
    };
    return {
      xID: _xeUtils.default.uniqueId(),
      reactData: reactData
    };
  },
  computed: Object.assign(Object.assign({}, {}), {
    computeTextLineClamp: function computeTextLineClamp() {
      var $xeTextEllipsis = this;
      var props = $xeTextEllipsis;
      return _xeUtils.default.toNumber(props.lineClamp);
    },
    computeTextContent: function computeTextContent() {
      var $xeTextEllipsis = this;
      var props = $xeTextEllipsis;
      return _xeUtils.default.toValueString(props.content);
    },
    computeTextOffsetLength: function computeTextOffsetLength() {
      var $xeTextEllipsis = this;
      var props = $xeTextEllipsis;
      return props.offsetLength ? _xeUtils.default.toNumber(props.offsetLength) : 0;
    },
    computeVisibleContent: function computeVisibleContent() {
      var $xeTextEllipsis = this;
      var reactData = $xeTextEllipsis.reactData;
      var visibleLen = reactData.visibleLen;
      var textLineClamp = $xeTextEllipsis.computeTextLineClamp;
      var textContent = $xeTextEllipsis.computeTextContent;
      var textOffsetLength = $xeTextEllipsis.computeTextOffsetLength;
      if (textLineClamp > 1) {
        if (textContent.length > visibleLen) {
          return "".concat(textContent.slice(0, Math.max(1, visibleLen - 3 + textOffsetLength)), "...");
        }
        return textContent;
      }
      return textContent;
    }
  }),
  methods: {
    //
    // Method
    //
    dispatchEvent: function dispatchEvent(type, params, evnt) {
      var $xeTextEllipsis = this;
      $xeTextEllipsis.$emit(type, (0, _ui.createEvent)(evnt, {
        $text: $xeTextEllipsis
      }, params));
    },
    calculateFont: function calculateFont(targetWidth) {
      var $xeTextEllipsis = this;
      var reactData = $xeTextEllipsis.reactData;
      var el = $xeTextEllipsis.$refs.refElem;
      var ryEl = $xeTextEllipsis.$refs.realityElem;
      if (el && ryEl) {
        var fontSize = 12;
        try {
          fontSize = Math.max(10, _xeUtils.default.toNumber(getComputedStyle(ryEl).fontSize));
        } catch (e) {}
        var textContent = $xeTextEllipsis.computeTextContent;
        var currIndex = Math.floor(targetWidth / fontSize);
        var currStr = textContent.slice(0, currIndex);
        ryEl.textContent = currStr;
        reactData.visibleLen = currStr.length;
        var maxCount = 0;
        while (targetWidth > ryEl.clientWidth && maxCount < 30) {
          maxCount++;
          var offsetIndex = Math.floor((targetWidth - ryEl.clientWidth) / fontSize);
          if (offsetIndex) {
            currIndex += offsetIndex;
            currStr = textContent.slice(0, currIndex);
            ryEl.textContent = currStr;
            reactData.visibleLen = currStr.length;
          } else {
            break;
          }
        }
        ryEl.textContent = '';
        ryEl.style.display = '';
        ryEl.style.position = '';
        ryEl.style.top = '';
        ryEl.style.left = '';
      }
    },
    updateStyle: function updateStyle() {
      var $xeTextEllipsis = this;
      var reactData = $xeTextEllipsis.reactData;
      var el = $xeTextEllipsis.$refs.refElem;
      var ryEl = $xeTextEllipsis.$refs.realityElem;
      var textContent = $xeTextEllipsis.computeTextContent;
      var textLineClamp = $xeTextEllipsis.computeTextLineClamp;
      if (el && ryEl) {
        var cWidth = el.clientWidth;
        ryEl.style.display = 'block';
        ryEl.style.position = 'absolute';
        ryEl.style.top = '-3000px';
        ryEl.style.left = '-3000px';
        ryEl.textContent = textContent;
        var sWidth = ryEl.offsetWidth;
        var targetWidth = Math.floor(cWidth * textLineClamp);
        if (targetWidth > sWidth) {
          reactData.visibleLen = textContent.length;
        } else {
          $xeTextEllipsis.calculateFont(targetWidth);
        }
      } else {
        reactData.visibleLen = textContent.length;
      }
    },
    clickEvent: function clickEvent() {
      var $xeTextEllipsis = this;
      $xeTextEllipsis.$emit('click', {});
    },
    initObserver: function initObserver() {
      var $xeTextEllipsis = this;
      var reactData = $xeTextEllipsis.reactData;
      var resizeObserver = reactData.resizeObserver;
      var textLineClamp = $xeTextEllipsis.computeTextLineClamp;
      if (!resizeObserver) {
        var el = $xeTextEllipsis.$refs.refElem;
        if (el && textLineClamp > 1) {
          if (window.ResizeObserver) {
            var observerObj = new window.ResizeObserver(_xeUtils.default.throttle(function () {
              $xeTextEllipsis.updateStyle();
            }, 300, {
              leading: true,
              trailing: true
            }));
            observerObj.observe(el);
            reactData.resizeObserver = observerObj;
          }
        }
      }
    },
    //
    // Render
    //
    renderContent: function renderContent(h) {
      var $xeTextEllipsis = this;
      var props = $xeTextEllipsis;
      var routerLink = props.routerLink,
        href = props.href,
        target = props.target,
        title = props.title;
      var visibleContent = $xeTextEllipsis.computeVisibleContent;
      if (routerLink) {
        return h('router-link', {
          class: 'vxe-text-ellipsis--link',
          props: {
            title: title,
            target: target,
            custom: true
          }
        }, visibleContent);
      }
      if (href) {
        return h('a', {
          class: 'vxe-text-ellipsis--link',
          attrs: {
            href: href,
            target: target,
            title: title
          }
        }, visibleContent);
      }
      return h('span', {
        class: 'vxe-text-ellipsis--content'
      }, visibleContent);
    },
    renderVN: function renderVN(h) {
      var $xeTextEllipsis = this;
      var props = $xeTextEllipsis;
      var loading = props.loading,
        status = props.status,
        title = props.title,
        underline = props.underline;
      var permissionInfo = $xeTextEllipsis.computePermissionInfo;
      var vSize = $xeTextEllipsis.computeSize;
      var textLineClamp = $xeTextEllipsis.computeTextLineClamp;
      if (!permissionInfo.visible) {
        return (0, _ui.renderEmptyElement)($xeTextEllipsis);
      }
      return h('div', {
        ref: 'refElem',
        class: ['vxe-text-ellipsis', textLineClamp > 1 ? 'is--multi' : 'is--single', _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(status), status), 'is--underline', underline), 'is--loading', loading)],
        attrs: {
          title: title
        },
        on: {
          click: $xeTextEllipsis.clickEvent
        }
      }, [h('span', {
        ref: 'realityElem',
        class: 'vxe-text-ellipsis--reality'
      }), $xeTextEllipsis.renderContent(h)]);
    }
  },
  watch: {
    content: function content() {
      var $xeTextEllipsis = this;
      $xeTextEllipsis.updateStyle();
    },
    lineClamp: function lineClamp() {
      var $xeTextEllipsis = this;
      $xeTextEllipsis.initObserver();
      $xeTextEllipsis.updateStyle();
    }
  },
  mounted: function mounted() {
    var $xeTextEllipsis = this;
    $xeTextEllipsis.initObserver();
    $xeTextEllipsis.updateStyle();
  },
  beforeDestroy: function beforeDestroy() {
    var $xeTextEllipsis = this;
    var reactData = $xeTextEllipsis.reactData;
    var resizeObserver = reactData.resizeObserver;
    var el = $xeTextEllipsis.$refs.refElem;
    var ryEl = $xeTextEllipsis.$refs.realityElem;
    if (ryEl) {
      ryEl.textContent = '';
    }
    if (resizeObserver) {
      if (el) {
        resizeObserver.unobserve(el);
      }
      resizeObserver.disconnect();
      reactData.resizeObserver = null;
    }
  },
  render: function render(h) {
    return this.renderVN(h);
  }
});
/* define-vxe-component end */